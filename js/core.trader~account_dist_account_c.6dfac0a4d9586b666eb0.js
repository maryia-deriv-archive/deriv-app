/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["trader~account_dist_account_c"],{

/***/ "../../account/dist/account/css/reset-trading-password-modal.css":
/*!***********************************************************************!*\
  !*** ../../account/dist/account/css/reset-trading-password-modal.css ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYWNjb3VudC9kaXN0L2FjY291bnQvY3NzL3Jlc2V0LXRyYWRpbmctcGFzc3dvcmQtbW9kYWwuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uLy4uL2FjY291bnQvZGlzdC9hY2NvdW50L2Nzcy9yZXNldC10cmFkaW5nLXBhc3N3b3JkLW1vZGFsLmNzcz81OGE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJtYXBwaW5ncyI6IjtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../account/dist/account/css/reset-trading-password-modal.css\n");

/***/ }),

/***/ "../../account/dist/account/js/file-uploader-container.js":
/*!****************************************************************!*\
  !*** ../../account/dist/account/js/file-uploader-container.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"../../../node_modules/@binary-com/binary-document-uploader/DocumentUploader.js\":\n/***/ (function(module) {\n\neval(\"(function(e,t){ true?module.exports=t():0})(this,function(){var e=Math.sqrt,t=String.fromCharCode,r=Math.LN2,n=Math.log,o=Math.pow,l=Math.abs,a=Math.exp,s=Math.expm1,i=Math.max,c=Math.ceil,p=Math.floor,d=Math.min;return function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e['default']}:function(){return e};return t.d(r,'a',r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p='',t(t.s=100)}([function(e,t,r){var n=r(3),o=r(20),l=r(9),a=r(17),s=r(14),i='prototype',c=function(e,t,r){var p,d,u,g,h=e&c.F,y=e&c.G,f=e&c.S,m=e&c.P,E=e&c.B,x=y?n:f?n[t]||(n[t]={}):(n[t]||{})[i],_=y?o:o[t]||(o[t]={}),S=_[i]||(_[i]={});for(p in y&&(r=t),r)d=!h&&x&&void 0!==x[p],u=(d?x:r)[p],g=E&&d?s(u,n):m&&'function'==typeof u?s(Function.call,u):u,x&&a(x,p,u,e&c.U),_[p]!=u&&l(_,p,g),m&&S[p]!=u&&(S[p]=u)};n.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e){e.exports=function(e){return'object'==typeof e?null!==e:'function'==typeof e}},function(e,t,r){var n=r(1);e.exports=function(e){if(!n(e))throw TypeError(e+' is not an object!');return e}},function(e){var t=e.exports='undefined'!=typeof window&&window.Math==Math?window:'undefined'!=typeof self&&self.Math==Math?self:Function('return this')();'number'==typeof __g&&(__g=t)},function(e,t,r){var n=r(41)('wks'),o=r(22),l=r(3).Symbol,a='function'==typeof l,s=e.exports=function(e){return n[e]||(n[e]=a&&l[e]||(a?l:o)('Symbol.'+e))};s.store=n},function(e){e.exports=function(e){try{return!!e()}catch(t){return!0}}},function(e,t,r){var n=r(18);e.exports=function(e){return 0<e?d(n(e),9007199254740991):0}},function(e,t,r){var n=r(2),o=r(70),l=r(36),a=Object.defineProperty;t.f=r(8)?Object.defineProperty:function(e,t,r){if(n(e),t=l(t,!0),n(r),o)try{return a(e,t,r)}catch(t){}if('get'in r||'set'in r)throw TypeError('Accessors not supported!');return'value'in r&&(e[t]=r.value),e}},function(e,t,r){e.exports=!r(5)(function(){return 7!=Object.defineProperty({},'a',{get:function(){return 7}}).a})},function(e,t,r){var n=r(7),o=r(21);e.exports=r(8)?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},function(e){var t={}.hasOwnProperty;e.exports=function(e,r){return t.call(e,r)}},function(e,t,r){var n=r(54),o=r(25);e.exports=function(e){return n(o(e))}},function(e,t,r){var n=r(25);e.exports=function(e){return Object(n(e))}},function(e,t,r){var n=r(0),o=r(20),l=r(5);e.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],a={};a[e]=t(r),n(n.S+n.F*l(function(){r(1)}),'Object',a)}},function(e,t,r){var n=r(24);e.exports=function(e,t,r){return(n(e),void 0===t)?e:1===r?function(r){return e.call(t,r)}:2===r?function(r,n){return e.call(t,r,n)}:3===r?function(r,n,o){return e.call(t,r,n,o)}:function(){return e.apply(t,arguments)}}},function(e,t,r){'use strict';if(r(8)){var n=r(23),o=r(3),l=r(5),a=r(0),s=r(53),i=r(71),c=r(14),d=r(29),u=r(21),g=r(9),h=r(28),y=r(18),f=r(6),m=r(72),E=r(31),x=r(36),_=r(10),S=r(44),T=r(1),b=r(12),P=r(59),v=r(38),I=r(34),A=r(37).f,R=r(60),O=r(22),k=r(4),L=r(39),F=r(55),N=r(42),M=r(61),w=r(33),D=r(45),C=r(43),j=r(58),Y=r(78),B=r(7),G=r(16),U=B.f,H=G.f,W=o.RangeError,V=o.TypeError,z=o.Uint8Array,$='ArrayBuffer',K='Shared'+$,q='BYTES_PER_ELEMENT',X='prototype',Z=Array[X],J=i.ArrayBuffer,Q=i.DataView,ee=L(0),te=L(2),re=L(3),ne=L(4),oe=L(5),le=L(6),ae=F(!0),se=F(!1),ie=M.values,ce=M.keys,pe=M.entries,de=Z.lastIndexOf,ue=Z.reduce,ge=Z.reduceRight,he=Z.join,ye=Z.sort,fe=Z.slice,me=Z.toString,Ee=Z.toLocaleString,xe=k('iterator'),_e=k('toStringTag'),Se=O('typed_constructor'),Te=O('def_constructor'),be=s.CONSTR,Pe=s.TYPED,Oe=s.VIEW,ve='Wrong length!',Ie=L(1,function(e,t){return Fe(N(e,e[Te]),t)}),Ae=l(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),Re=!!z&&!!z[X].set&&l(function(){new z(1).set({})}),ke=function(e,t){var r=y(e);if(0>r||r%t)throw W('Wrong offset!');return r},Le=function(e){if(T(e)&&Pe in e)return e;throw V(e+' is not a typed array!')},Fe=function(e,t){if(!(T(e)&&Se in e))throw V('It is not a typed array constructor!');return new e(t)},Ne=function(e,t){return Me(N(e,e[Te]),t)},Me=function(e,t){for(var r=0,n=t.length,o=Fe(e,n);n>r;)o[r]=t[r++];return o},we=function(e,t,r){U(e,t,{get:function(){return this._d[r]}})},De=function(e){var t,r,n,o,l,a,s=b(e),i=arguments.length,p=1<i?arguments[1]:void 0,d=p!==void 0,u=R(s);if(u!=void 0&&!P(u)){for(a=u.call(s),n=[],t=0;!(l=a.next()).done;t++)n.push(l.value);s=n}for(d&&2<i&&(p=c(p,arguments[2],2)),t=0,r=f(s.length),o=Fe(this,r);r>t;t++)o[t]=d?p(s[t],t):s[t];return o},Ce=function(){for(var e=0,t=arguments.length,r=Fe(this,t);t>e;)r[e]=arguments[e++];return r},je=!!z&&l(function(){Ee.call(new z(1))}),Ye=function(){return Ee.apply(je?fe.call(Le(this)):Le(this),arguments)},Be={copyWithin:function(e,t){return Y.call(Le(this),e,t,2<arguments.length?arguments[2]:void 0)},every:function(e){return ne(Le(this),e,1<arguments.length?arguments[1]:void 0)},fill:function(){return j.apply(Le(this),arguments)},filter:function(e){return Ne(this,te(Le(this),e,1<arguments.length?arguments[1]:void 0))},find:function(e){return oe(Le(this),e,1<arguments.length?arguments[1]:void 0)},findIndex:function(e){return le(Le(this),e,1<arguments.length?arguments[1]:void 0)},forEach:function(e){ee(Le(this),e,1<arguments.length?arguments[1]:void 0)},indexOf:function(e){return se(Le(this),e,1<arguments.length?arguments[1]:void 0)},includes:function(e){return ae(Le(this),e,1<arguments.length?arguments[1]:void 0)},join:function(){return he.apply(Le(this),arguments)},lastIndexOf:function(){return de.apply(Le(this),arguments)},map:function(e){return Ie(Le(this),e,1<arguments.length?arguments[1]:void 0)},reduce:function(){return ue.apply(Le(this),arguments)},reduceRight:function(){return ge.apply(Le(this),arguments)},reverse:function(){for(var e,t=this,r=Le(t).length,n=p(r/2),o=0;o<n;)e=t[o],t[o++]=t[--r],t[r]=e;return t},some:function(e){return re(Le(this),e,1<arguments.length?arguments[1]:void 0)},sort:function(e){return ye.call(Le(this),e)},subarray:function(e,t){var r=Le(this),n=r.length,o=E(e,n);return new(N(r,r[Te]))(r.buffer,r.byteOffset+o*r.BYTES_PER_ELEMENT,f((t===void 0?n:E(t,n))-o))}},Ge=function(e,t){return Ne(this,fe.call(Le(this),e,t))},Ue=function(e){Le(this);var t=ke(arguments[1],1),r=this.length,n=b(e),o=f(n.length),l=0;if(o+t>r)throw W(ve);for(;l<o;)this[t+l]=n[l++]},He={entries:function(){return pe.call(Le(this))},keys:function(){return ce.call(Le(this))},values:function(){return ie.call(Le(this))}},We=function(e,t){return T(e)&&e[Pe]&&'symbol'!=typeof t&&t in e&&+t+''==t+''},Ve=function(e,t){return We(e,t=x(t,!0))?u(2,e[t]):H(e,t)},ze=function(e,t,r){return We(e,t=x(t,!0))&&T(r)&&_(r,'value')&&!_(r,'get')&&!_(r,'set')&&!r.configurable&&(!_(r,'writable')||r.writable)&&(!_(r,'enumerable')||r.enumerable)?(e[t]=r.value,e):U(e,t,r)};be||(G.f=Ve,B.f=ze),a(a.S+a.F*!be,'Object',{getOwnPropertyDescriptor:Ve,defineProperty:ze}),l(function(){me.call({})})&&(me=Ee=function(){return he.call(this)});var $e=h({},Be);h($e,He),g($e,xe,He.values),h($e,{slice:Ge,set:Ue,constructor:function(){},toString:me,toLocaleString:Ye}),we($e,'buffer','b'),we($e,'byteOffset','o'),we($e,'byteLength','l'),we($e,'length','e'),U($e,_e,{get:function(){return this[Pe]}}),e.exports=function(e,t,r,i){i=!!i;var c=e+(i?'Clamped':'')+'Array',p=o[c],u=p||{},h=p&&I(p),y=!p||!s.ABV,E={},x=p&&p[X],_=function(r,n){var o=r._d;return o.v['get'+e](n*t+o.o,Ae)},b=function(r,n,o){var l=r._d;i&&(o=0>(o=Math.round(o))?0:255<o?255:255&o),l.v['set'+e](n*t+l.o,o,Ae)},P=function(e,t){U(e,t,{get:function(){return _(this,t)},set:function(e){return b(this,t,e)},enumerable:!0})};y?(p=r(function(e,r,n,o){d(e,p,c,'_d');var l,a,s,i,u=0,h=0;if(!T(r))s=m(r),a=s*t,l=new J(a);else if(r instanceof J||(i=S(r))==$||i==K){l=r,h=ke(n,t);var y=r.byteLength;if(void 0===o){if(y%t)throw W(ve);if(a=y-h,0>a)throw W(ve)}else if(a=f(o)*t,a+h>y)throw W(ve);s=a/t}else return Pe in r?Me(p,r):De.call(p,r);for(g(e,'_d',{b:l,o:h,l:a,e:s,v:new Q(l)});u<s;)P(e,u++)}),x=p[X]=v($e),g(x,'constructor',p)):(!l(function(){p(1)})||!l(function(){new p(-1)})||!D(function(e){new p,new p(null),new p(1.5),new p(e)},!0))&&(p=r(function(e,r,n,o){d(e,p,c);var l;return T(r)?r instanceof J||(l=S(r))==$||l==K?void 0===o?void 0===n?new u(r):new u(r,ke(n,t)):new u(r,ke(n,t),o):Pe in r?Me(p,r):De.call(p,r):new u(m(r))}),ee(h===Function.prototype?A(u):A(u).concat(A(h)),function(e){e in p||g(p,e,u[e])}),p[X]=x,!n&&(x.constructor=p));var O=x[xe],R=!!O&&('values'==O.name||O.name==void 0),k=He.values;g(p,Se,!0),g(x,Pe,c),g(x,Oe,!0),g(x,Te,p),(i?new p(1)[_e]!=c:!(_e in x))&&U(x,_e,{get:function(){return c}}),E[c]=p,a(a.G+a.W+a.F*(p!=u),E),a(a.S,c,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*l(function(){u.of.call(p,1)}),c,{from:De,of:Ce}),q in x||g(x,q,t),a(a.P,c,Be),C(c),a(a.P+a.F*Re,c,{set:Ue}),a(a.P+a.F*!R,c,He),n||x.toString==me||(x.toString=me),a(a.P+a.F*l(function(){new p(1).slice()}),c,{slice:Ge}),a(a.P+a.F*(l(function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()})||!l(function(){x.toLocaleString.call([1,2])})),c,{toLocaleString:Ye}),w[c]=R?O:k,n||R||g(x,xe,k)}}else e.exports=function(){}},function(e,t,r){var n=r(40),o=r(21),l=r(11),a=r(36),s=r(10),i=r(70),c=Object.getOwnPropertyDescriptor;t.f=r(8)?c:function(e,t){if(e=l(e),t=a(t,!0),i)try{return c(e,t)}catch(t){}return s(e,t)?o(!n.f.call(e,t),e[t]):void 0}},function(e,t,r){var n=r(3),o=r(9),l=r(10),a=r(22)('src'),s=r(102),i='toString',c=(''+s).split(i);r(20).inspectSource=function(e){return s.call(e)},(e.exports=function(e,t,r,s){var i='function'==typeof r;i&&(l(r,'name')||o(r,'name',t));e[t]===r||(i&&(l(r,a)||o(r,a,e[t]?''+e[t]:c.join(t+''))),e===n?e[t]=r:s?e[t]?e[t]=r:o(e,t,r):(delete e[t],o(e,t,r)))})(Function.prototype,i,function(){return'function'==typeof this&&this[a]||s.call(this)})},function(e){e.exports=function(e){return isNaN(e=+e)?0:(0<e?p:c)(e)}},function(e,t,r){var n=r(22)('meta'),o=r(1),l=r(10),a=r(7).f,s=0,i=Object.isExtensible||function(){return!0},c=!r(5)(function(){return i(Object.preventExtensions({}))}),p=function(e){a(e,n,{value:{i:'O'+ ++s,w:{}}})},d=e.exports={KEY:n,NEED:!1,fastKey:function(e,t){if(!o(e))return'symbol'==typeof e?e:('string'==typeof e?'S':'P')+e;if(!l(e,n)){if(!i(e))return'F';if(!t)return'E';p(e)}return e[n].i},getWeak:function(e,t){if(!l(e,n)){if(!i(e))return!0;if(!t)return!1;p(e)}return e[n].w},onFreeze:function(e){return c&&d.NEED&&i(e)&&!l(e,n)&&p(e),e}}},function(e){var t=e.exports={version:'2.6.5'};'number'==typeof __e&&(__e=t)},function(e){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e){var t=0,r=Math.random();e.exports=function(e){return'Symbol('.concat(e===void 0?'':e,')_',(++t+r).toString(36))}},function(e){e.exports=!1},function(e){e.exports=function(e){if('function'!=typeof e)throw TypeError(e+' is not a function!');return e}},function(e){e.exports=function(e){if(e==void 0)throw TypeError('Can\\\\'t call method on  '+e);return e}},function(e,t,r){var n=r(73),o=r(57);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){var n=r(1);e.exports=function(e,t){if(!n(e)||e._t!==t)throw TypeError('Incompatible receiver, '+t+' required!');return e}},function(e,t,r){var n=r(17);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},function(e){e.exports=function(e,t,r,n){if(!(e instanceof t)||n!==void 0&&n in e)throw TypeError(r+': incorrect invocation!');return e}},function(e){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},function(e,t,r){var n=r(18);e.exports=function(e,t){return e=n(e),0>e?i(e+t,0):d(e,t)}},function(e,t,r){var n=r(7).f,o=r(10),l=r(4)('toStringTag');e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,l)&&n(e,l,{configurable:!0,value:t})}},function(e){e.exports={}},function(e,t,r){var n=r(10),o=r(12),l=r(56)('IE_PROTO'),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,l)?e[l]:'function'==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,r){var n=r(4)('unscopables'),o=Array.prototype;o[n]==void 0&&r(9)(o,n,{}),e.exports=function(e){o[n][e]=!0}},function(e,t,r){var n=r(1);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&'function'==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if('function'==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&'function'==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError('Can\\\\'t convert object to primitive value')}},function(e,t,r){var n=r(73),o=r(57).concat('length','prototype');t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t,r){var n=r(2),o=r(104),l=r(57),a=r(56)('IE_PROTO'),s=function(){},c='prototype',p=function(){var e,t=r(52)('iframe'),n=l.length,o='<',a='>';for(t.style.display='none',r(74).appendChild(t),t.src='javascript:',e=t.contentWindow.document,e.open(),e.write(o+'script'+a+'document.F=Object'+o+'/script'+a),e.close(),p=e.F;n--;)delete p[c][l[n]];return p()};e.exports=Object.create||function(e,t){var r;return null===e?r=p():(s[c]=n(e),r=new s,s[c]=null,r[a]=e),void 0===t?r:o(r,t)}},function(e,t,r){var n=r(14),o=r(54),l=r(12),a=r(6),s=r(105);e.exports=function(e,t){var r=1==e,i=4==e,c=6==e,p=t||s;return function(t,s,d){for(var u,g,h=l(t),y=o(h),m=n(s,d,3),f=a(y.length),E=0,x=r?p(t,f):2==e?p(t,0):void 0;f>E;E++)if((5==e||c||E in y)&&(u=y[E],g=m(u,E,h),e))if(r)x[E]=g;else if(g)switch(e){case 3:return!0;case 5:return u;case 6:return E;case 2:x.push(u);}else if(i)return!1;return c?-1:3==e||i?i:x}}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,r){var n=r(20),o=r(3),l='__core-js_shared__',a=o[l]||(o[l]={});(e.exports=function(e,t){return a[e]||(a[e]=t===void 0?{}:t)})('versions',[]).push({version:n.version,mode:r(23)?'pure':'global',copyright:'\\\\xA9 2019 Denis Pushkarev (zloirock.ru)'})},function(e,t,r){var n=r(2),o=r(24),l=r(4)('species');e.exports=function(e,t){var r,a=n(e).constructor;return a===void 0||(r=n(a)[l])==void 0?t:o(r)}},function(e,t,r){'use strict';var n=r(3),o=r(7),l=r(8),a=r(4)('species');e.exports=function(e){var t=n[e];l&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,r){var n=r(30),o=r(4)('toStringTag'),l='Arguments'==n(function(){return arguments}()),a=function(e,t){try{return e[t]}catch(t){}};e.exports=function(e){var t,r,s;return e===void 0?'Undefined':null===e?'Null':'string'==typeof(r=a(t=Object(e),o))?r:l?n(t):'Object'==(s=n(t))&&'function'==typeof t.callee?'Arguments':s}},function(e,t,r){var n=r(4)('iterator'),o=!1;try{var l=[7][n]();l['return']=function(){o=!0},Array.from(l,function(){throw 2})}catch(t){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var l=[7],a=l[n]();a.next=function(){return{done:r=!0}},l[n]=function(){return a},e(l)}catch(t){}return r}},function(e,t,r){var n=r(14),o=r(80),l=r(59),a=r(2),s=r(6),i=r(60),c={},p={},t=e.exports=function(e,t,r,d,u){var g,h,y,m,E=u?function(){return e}:i(e),x=n(r,d,t?2:1),f=0;if('function'!=typeof E)throw TypeError(e+' is not iterable!');if(l(E)){for(g=s(e.length);g>f;f++)if(m=t?x(a(h=e[f])[0],h[1]):x(e[f]),m===c||m===p)return m;}else for(y=E.call(e);!(h=y.next()).done;)if(m=o(y,x,h.value,t),m===c||m===p)return m};t.BREAK=c,t.RETURN=p},function(e,t,r){'use strict';var n=r(3),o=r(0),l=r(17),a=r(28),s=r(19),i=r(46),c=r(29),p=r(1),d=r(5),u=r(45),g=r(32),h=r(117);e.exports=function(e,t,r,y,f,m){var E=n[e],x=E,_=f?'set':'add',S=x&&x.prototype,T={},b=function(e){var t=S[e];l(S,e,'delete'==e?function(e){return m&&!p(e)?!1:t.call(this,0===e?0:e)}:'has'==e?function(e){return m&&!p(e)?!1:t.call(this,0===e?0:e)}:'get'==e?function(e){return m&&!p(e)?void 0:t.call(this,0===e?0:e)}:'add'==e?function(e){return t.call(this,0===e?0:e),this}:function(e,r){return t.call(this,0===e?0:e,r),this})};if('function'!=typeof x||!(m||S.forEach&&!d(function(){new x().entries().next()})))x=y.getConstructor(t,e,f,_),a(x.prototype,r),s.NEED=!0;else{var P=new x,O=P[_](m?{}:-0,1)!=P,v=d(function(){P.has(1)}),I=u(function(e){new x(e)}),A=!m&&d(function(){for(var e=new x,t=5;t--;)e[_](t,t);return!e.has(-0)});I||(x=t(function(t,r){c(t,x,e);var n=h(new E,t,x);return void 0!=r&&i(r,f,n[_],n),n}),x.prototype=S,S.constructor=x),(v||A)&&(b('delete'),b('has'),f&&b('get')),(A||O)&&b(_),m&&S.clear&&delete S.clear}return g(x,e),T[e]=x,o(o.G+o.W+o.F*(x!=E),T),m||y.setStrong(x,e,f),x}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(3),o=n.navigator;e.exports=o&&o.userAgent||''},function(e,t,r){'use strict';var n=r(44),o=RegExp.prototype.exec;e.exports=function(e,t){var r=e.exec;if('function'==typeof r){var l=r.call(e,t);if('object'!=typeof l)throw new TypeError('RegExp exec method returned something other than an Object or null');return l}if('RegExp'!==n(e))throw new TypeError('RegExp#exec called on incompatible receiver');return o.call(e,t)}},function(e,t,r){'use strict';r(164);var n=r(17),o=r(9),l=r(5),a=r(25),s=r(4),i=r(66),c=s('species'),p=!l(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:'7'},e},'7'!==''.replace(e,'$<a>')}),d=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r='ab'.split(e);return 2===r.length&&'a'===r[0]&&'b'===r[1]}();e.exports=function(e,t,r){var u=s(e),g=!l(function(){var t={};return t[u]=function(){return 7},7!=''[e](t)}),h=g?!l(function(){var t=!1,r=/a/;return r.exec=function(){return t=!0,null},'split'===e&&(r.constructor={},r.constructor[c]=function(){return r}),r[u](''),!t}):void 0;if(!g||!h||'replace'===e&&!p||'split'===e&&!d){var y=/./[u],f=r(a,u,''[e],function(e,t,r,n,o){return t.exec===i?g&&!o?{done:!0,value:y.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}}),m=f[0],E=f[1];n(String.prototype,e,m),o(RegExp.prototype,u,2==t?function(e,t){return E.call(e,this,t)}:function(e){return E.call(e,this)})}}},function(e,t,r){var n=r(1),o=r(3).document,l=n(o)&&n(o.createElement);e.exports=function(e){return l?o.createElement(e):{}}},function(e,t,r){for(var n,o=r(3),l=r(9),a=r(22),s=a('typed_array'),c=a('view'),p=!!(o.ArrayBuffer&&o.DataView),d=p,u=0,i=['Int8Array','Uint8Array','Uint8ClampedArray','Int16Array','Uint16Array','Int32Array','Uint32Array','Float32Array','Float64Array'];u<9;)(n=o[i[u++]])?(l(n.prototype,s,!0),l(n.prototype,c,!0)):d=!1;e.exports={ABV:p,CONSTR:d,TYPED:s,VIEW:c}},function(e,t,r){var n=r(30);e.exports=Object('z').propertyIsEnumerable(0)?Object:function(e){return'String'==n(e)?e.split(''):Object(e)}},function(e,t,r){var n=r(11),o=r(6),l=r(31);e.exports=function(e){return function(t,r,a){var s,i=n(t),c=o(i.length),p=l(a,c);if(e&&r!=r){for(;c>p;)if(s=i[p++],s!=s)return!0;}else for(;c>p;p++)if((e||p in i)&&i[p]===r)return e||p||0;return!e&&-1}}},function(e,t,r){var n=r(41)('keys'),o=r(22);e.exports=function(e){return n[e]||(n[e]=o(e))}},function(e){e.exports=['constructor','hasOwnProperty','isPrototypeOf','propertyIsEnumerable','toLocaleString','toString','valueOf']},function(e,t,r){'use strict';var n=r(12),o=r(31),l=r(6);e.exports=function(e){for(var t=n(this),r=l(t.length),a=arguments.length,s=o(1<a?arguments[1]:void 0,r),i=2<a?arguments[2]:void 0,c=void 0===i?r:o(i,r);c>s;)t[s++]=e;return t}},function(e,t,r){var n=r(33),o=r(4)('iterator'),l=Array.prototype;e.exports=function(e){return e!==void 0&&(n.Array===e||l[o]===e)}},function(e,t,r){var n=r(44),o=r(4)('iterator'),l=r(33);e.exports=r(20).getIteratorMethod=function(e){if(e!=void 0)return e[o]||e['@@iterator']||l[n(e)]}},function(e,t,r){'use strict';var n=r(35),o=r(76),l=r(33),a=r(11);e.exports=r(77)(Array,'Array',function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):'keys'==t?o(0,r):'values'==t?o(0,e[r]):o(0,[r,e[r]])},'values'),l.Arguments=l.Array,n('keys'),n('values'),n('entries')},function(e,t,r){var n,o,l,a=r(14),s=r(84),i=r(74),c=r(52),p=r(3),d=p.process,u=p.setImmediate,g=p.clearImmediate,h=p.MessageChannel,y=p.Dispatch,f=0,m={},E='onreadystatechange',x=function(){var e=+this;if(m.hasOwnProperty(e)){var t=m[e];delete m[e],t()}},_=function(e){x.call(e.data)};u&&g||(u=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return m[++f]=function(){s('function'==typeof e?e:Function(e),t)},n(f),f},g=function(e){delete m[e]},'process'==r(30)(d)?n=function(e){d.nextTick(a(x,e,1))}:y&&y.now?n=function(e){y.now(a(x,e,1))}:h?(o=new h,l=o.port2,o.port1.onmessage=_,n=a(l.postMessage,l,1)):p.addEventListener&&'function'==typeof postMessage&&!p.importScripts?(n=function(e){p.postMessage(e+'','*')},p.addEventListener('message',_,!1)):E in c('script')?n=function(e){i.appendChild(c('script'))[E]=function(){i.removeChild(this),x.call(e)}}:n=function(e){setTimeout(a(x,e,1),0)}),e.exports={set:u,clear:g}},function(e,t,r){var n=r(92),o=r(25);e.exports=function(e,t,r){if(n(t))throw TypeError('String#'+r+' doesn\\\\'t accept regex!');return o(e)+''}},function(e,t,r){var n=r(4)('match');e.exports=function(e){var t=/./;try{'/./'[e](t)}catch(r){try{return t[n]=!1,!'/./'[e](t)}catch(e){}}return!0}},function(e,t,r){'use strict';var n=r(90)(!0);e.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},function(e,t,r){'use strict';var n=r(93),o=RegExp.prototype.exec,l=String.prototype.replace,a=o,s='lastIndex',c=function(){var e=/a/,t=/b*/g;return o.call(e,'a'),o.call(t,'a'),0!==e[s]||0!==t[s]}(),p=/()??/.exec('')[1]!==void 0;(c||p)&&(a=function(e){var t,r,a,d,i=this;return p&&(r=new RegExp('^'+i.source+'$(?!\\\\\\\\s)',n.call(i))),c&&(t=i[s]),a=o.call(i,e),c&&a&&(i[s]=i.global?a.index+a[0].length:t),p&&a&&1<a.length&&l.call(a[0],r,function(){for(d=1;d<arguments.length-2;d++)void 0===arguments[d]&&(a[d]=void 0)}),a}),e.exports=a},function(e,t,r){'use strict';var n=r(7),o=r(21);e.exports=function(e,t,r){t in e?n.f(e,t,o(0,r)):e[t]=r}},function(e){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:0>e?-1:1}},function(e){var t=s;e.exports=!t||22025.465794806718<t(10)||22025.465794806718>t(10)||-2e-17!=t(-2e-17)?function(e){return 0==(e=+e)?e:-1e-6<e&&1e-6>e?e+e*e/2:a(e)-1}:t},function(e,t,r){e.exports=!r(8)&&!r(5)(function(){return 7!=Object.defineProperty(r(52)('div'),'a',{get:function(){return 7}}).a})},function(e,t,a){'use strict';function s(t,r,n){var o,l,a,c=Array(n),p=8*n-r-1,d=(1<<p)-1,u=d>>1,g=23===r?z(2,-24)-z(2,-77):0,h=0,i=0>t||0===t&&0>1/t?1:0;for(t=V(t),t!=t||t===H?(l=t==t?0:1,o=d):(o=$(K(t)/q),1>t*(a=z(2,-o))&&(o--,a*=2),t+=1<=o+u?g/a:g*z(2,1-u),2<=t*a&&(o++,a/=2),o+u>=d?(l=0,o=d):1<=o+u?(l=(t*a-1)*z(2,r),o+=u):(l=t*z(2,u-1)*z(2,r),o=0));8<=r;c[h++]=255&l,l/=256,r-=8);for(o=o<<r|l,p+=r;0<p;c[h++]=255&o,o/=256,p-=8);return c[--h]|=128*i,c}function i(t,r,n){var o,l=8*n-r-1,a=(1<<l)-1,c=a>>1,p=l-7,d=n-1,i=t[d--],s=127&i;for(i>>=7;0<p;s=256*s+t[d],d--,p-=8);for(o=s&(1<<-p)-1,s>>=-p,p+=r;0<p;o=256*o+t[d],d--,p-=8);if(0===s)s=1-c;else{if(s===a)return o?NaN:i?-H:H;o+=z(2,r),s-=c}return(i?-1:1)*o*z(2,s-r)}function c(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function d(e){return[255&e]}function u(e){return[255&e,255&e>>8]}function g(e){return[255&e,255&e>>8,255&e>>16,255&e>>24]}function h(e){return s(e,52,8)}function y(e){return s(e,23,4)}function f(e,t,r){L(e[D],t,{get:function(){return this[r]}})}function m(e,t,r,n){var o=R(+r);if(o+t>e[ee])throw U(C);var l=e[Q]._b,a=o+e[te],s=l.slice(a,a+t);return n?s:s.reverse()}function E(e,t,r,n,o,l){var a=R(+r);if(a+t>e[ee])throw U(C);for(var s=e[Q]._b,c=a+e[te],p=n(+o),d=0;d<t;d++)s[c+d]=p[l?d:t-d-1]}var x=a(3),_=a(8),S=a(23),T=a(53),b=a(9),P=a(28),O=a(5),v=a(29),I=a(18),A=a(6),R=a(72),k=a(37).f,L=a(7).f,F=a(58),N=a(32),M='ArrayBuffer',w='DataView',D='prototype',C='Wrong index!',Y=x[M],B=x[w],G=x.Math,U=x.RangeError,H=x.Infinity,W=Y,V=l,z=o,$=p,K=n,q=r,X='buffer',Z='byteLength',J='byteOffset',Q=_?'_b':X,ee=_?'_l':Z,te=_?'_o':J;if(!T.ABV)Y=function(e){v(this,Y,M);var t=R(e);this._b=F.call(Array(t),0),this[ee]=t},B=function(e,t,r){v(this,B,w),v(e,Y,w);var n=e[ee],o=I(t);if(0>o||o>n)throw U('Wrong offset!');if(r=void 0===r?n-o:A(r),o+r>n)throw U('Wrong length!');this[Q]=e,this[te]=o,this[ee]=r},_&&(f(Y,Z,'_l'),f(B,X,'_b'),f(B,Z,'_l'),f(B,J,'_o')),P(B[D],{getInt8:function(e){return m(this,1,e)[0]<<24>>24},getUint8:function(e){return m(this,1,e)[0]},getInt16:function(e){var t=m(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=m(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return c(m(this,4,e,arguments[1]))},getUint32:function(e){return c(m(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return i(m(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return i(m(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){E(this,1,e,d,t)},setUint8:function(e,t){E(this,1,e,d,t)},setInt16:function(e,t){E(this,2,e,u,t,arguments[2])},setUint16:function(e,t){E(this,2,e,u,t,arguments[2])},setInt32:function(e,t){E(this,4,e,g,t,arguments[2])},setUint32:function(e,t){E(this,4,e,g,t,arguments[2])},setFloat32:function(e,t){E(this,4,e,y,t,arguments[2])},setFloat64:function(e,t){E(this,8,e,h,t,arguments[2])}});else{if(!O(function(){Y(1)})||!O(function(){new Y(-1)})||O(function(){return new Y,new Y(1.5),new Y(NaN),Y.name!=M})){Y=function(e){return v(this,Y),new W(R(e))};for(var re,ne=Y[D]=W[D],oe=k(W),le=0;oe.length>le;)(re=oe[le++])in Y||b(Y,re,W[re]);S||(ne.constructor=Y)}var j=new B(new Y(2)),ae=B[D].setInt8;j.setInt8(0,2147483648),j.setInt8(1,2147483649),(j.getInt8(0)||!j.getInt8(1))&&P(B[D],{setInt8:function(e,t){ae.call(this,e,t<<24>>24)},setUint8:function(e,t){ae.call(this,e,t<<24>>24)}},!0)}N(Y,M),N(B,w),b(B[D],T.VIEW,!0),t[M]=Y,t[w]=B},function(e,t,r){var n=r(18),o=r(6);e.exports=function(e){if(e===void 0)return 0;var t=n(e),r=o(t);if(t!==r)throw RangeError('Wrong length!');return r}},function(e,t,r){var n=r(10),o=r(11),l=r(55)(!1),a=r(56)('IE_PROTO');e.exports=function(e,t){var r,s=o(e),c=0,i=[];for(r in s)r!=a&&n(s,r)&&i.push(r);for(;t.length>c;)n(s,r=t[c++])&&(~l(i,r)||i.push(r));return i}},function(e,t,r){var n=r(3).document;e.exports=n&&n.documentElement},function(e,t,r){var n=r(30);e.exports=Array.isArray||function(e){return'Array'==n(e)}},function(e){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,r){'use strict';var n=r(23),o=r(0),l=r(17),a=r(9),s=r(33),i=r(107),c=r(32),p=r(34),d=r(4)('iterator'),u=!([].keys&&'next'in[].keys()),g='keys',h='values',y=function(){return this};e.exports=function(e,t,r,f,m,E,x){i(r,t,f);var _,S,T,b=function(e){return!u&&e in I?I[e]:e===g?function(){return new r(this,e)}:e===h?function(){return new r(this,e)}:function(){return new r(this,e)}},P=t+' Iterator',O=m==h,v=!1,I=e.prototype,A=I[d]||I['@@iterator']||m&&I[m],R=A||b(m),k=m?O?b('entries'):R:void 0,L='Array'==t?I.entries||A:A;if(L&&(T=p(L.call(new e)),T!==Object.prototype&&T.next&&(c(T,P,!0),!n&&'function'!=typeof T[d]&&a(T,d,y))),O&&A&&A.name!==h&&(v=!0,R=function(){return A.call(this)}),(!n||x)&&(u||v||!I[d])&&a(I,d,R),s[t]=R,s[P]=y,m)if(_={values:O?R:b(h),keys:E?R:b(g),entries:k},x)for(S in _)S in I||l(I,S,_[S]);else o(o.P+o.F*(u||v),t,_);return _}},function(e,t,r){'use strict';var n=r(12),o=r(31),l=r(6);e.exports=[].copyWithin||function(e,t){var r=n(this),a=l(r.length),s=o(e,a),i=o(t,a),c=2<arguments.length?arguments[2]:void 0,p=d((c===void 0?a:o(c,a))-i,a-s),u=1;for(i<s&&s<i+p&&(u=-1,i+=p-1,s+=p-1);0<p--;)i in r?r[s]=r[i]:delete r[s],s+=u,i+=u;return r}},function(e,t,r){'use strict';var n=r(7).f,o=r(38),l=r(28),a=r(14),s=r(29),i=r(46),c=r(77),p=r(76),d=r(43),u=r(8),g=r(19).fastKey,h=r(27),y=u?'_s':'size',f=function(e,t){var r,n=g(t);if('F'!==n)return e._i[n];for(r=e._f;r;r=r.n)if(r.k==t)return r};e.exports={getConstructor:function(e,t,r,c){var p=e(function(e,n){s(e,p,t,'_i'),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[y]=0,void 0!=n&&i(n,r,e[c],e)});return l(p.prototype,{clear:function(){for(var e=h(this,t),r=e._i,n=e._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];e._f=e._l=void 0,e[y]=0},delete:function(e){var r=h(this,t),n=f(r,e);if(n){var o=n.n,l=n.p;delete r._i[n.i],n.r=!0,l&&(l.n=o),o&&(o.p=l),r._f==n&&(r._f=o),r._l==n&&(r._l=l),r[y]--}return!!n},forEach:function(e){h(this,t);for(var r,n=a(e,1<arguments.length?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(e){return!!f(h(this,t),e)}}),u&&n(p.prototype,'size',{get:function(){return h(this,t)[y]}}),p},def:function(e,t,r){var n,o,l=f(e,t);return l?l.v=r:(e._l=l={i:o=g(t,!0),k:t,v:r,p:n=e._l,n:void 0,r:!1},!e._f&&(e._f=l),n&&(n.n=l),e[y]++,'F'!==o&&(e._i[o]=l)),e},getEntry:f,setStrong:function(e,t,r){c(e,t,function(e,r){this._t=h(e,t),this._k=r,this._l=void 0},function(){for(var e=this,t=e._k,r=e._l;r&&r.r;)r=r.p;return e._t&&(e._l=r=r?r.n:e._t._f)?'keys'==t?p(0,r.k):'values'==t?p(0,r.v):p(0,[r.k,r.v]):(e._t=void 0,p(1))},r?'entries':'values',!r,!0),d(t)}}},function(e,t,r){var n=r(2);e.exports=function(t,e,r,o){try{return o?e(n(r)[0],r[1]):e(r)}catch(r){var l=t['return'];throw void 0!==l&&n(l.call(t)),r}}},function(e,t,r){var n=r(1),o=r(2),l=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+': can\\\\'t set as prototype!')};e.exports={set:Object.setPrototypeOf||('__proto__'in{}?function(e,t,n){try{n=r(14)(Function.call,r(16).f(Object.prototype,'__proto__').set,2),n(e,[]),t=!(e instanceof Array)}catch(r){t=!0}return function(e,r){return l(e,r),t?e.__proto__=r:n(e,r),e}}({},!1):void 0),check:l}},function(e,t,r){'use strict';var n=r(26),o=r(48),l=r(40),a=r(12),s=r(54),i=Object.assign;e.exports=!i||r(5)(function(){var e={},t={},r=Symbol(),n='abcdefghijklmnopqrst';return e[r]=7,n.split('').forEach(function(e){t[e]=e}),7!=i({},e)[r]||Object.keys(i({},t)).join('')!=n})?function(e){for(var t=a(e),r=arguments.length,i=1,c=o.f,p=l.f;r>i;)for(var d,u=s(arguments[i++]),g=c?n(u).concat(c(u)):n(u),h=g.length,y=0;h>y;)p.call(u,d=g[y++])&&(t[d]=u[d]);return t}:i},function(e,t,r){'use strict';var n=r(28),o=r(19).getWeak,l=r(2),a=r(1),s=r(29),i=r(46),c=r(39),p=r(10),d=r(27),u=c(5),g=c(6),h=0,y=function(e){return e._l||(e._l=new f)},f=function(){this.a=[]},m=function(e,t){return u(e.a,function(e){return e[0]===t})};f.prototype={get:function(e){var t=m(this,e);if(t)return t[1]},has:function(e){return!!m(this,e)},set:function(e,t){var r=m(this,e);r?r[1]=t:this.a.push([e,t])},delete:function(e){var t=g(this.a,function(t){return t[0]===e});return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,r,l){var c=e(function(e,n){s(e,c,t,'_i'),e._t=t,e._i=h++,e._l=void 0,void 0!=n&&i(n,r,e[l],e)});return n(c.prototype,{delete:function(e){if(!a(e))return!1;var r=o(e);return!0===r?y(d(this,t))['delete'](e):r&&p(r,this._i)&&delete r[this._i]},has:function(e){if(!a(e))return!1;var r=o(e);return!0===r?y(d(this,t)).has(e):r&&p(r,this._i)}}),c},def:function(e,t,r){var n=o(l(t),!0);return!0===n?y(e).set(t,r):n[e._i]=r,e},ufstore:y}},function(e){e.exports=function(e,t,r){var n=r===void 0;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3]);}return e.apply(r,t)}},function(e,t,r){var n=r(37),o=r(48),l=r(2),a=r(3).Reflect;e.exports=a&&a.ownKeys||function(e){var t=n.f(l(e)),r=o.f;return r?t.concat(r(e)):t}},function(e,t,r){'use strict';function n(e){var t,r;this.promise=new e(function(e,n){if(t!=void 0||r!=void 0)throw TypeError('Bad Promise constructor');t=e,r=n}),this.resolve=o(t),this.reject=o(r)}var o=r(24);e.exports.f=function(e){return new n(e)}},function(e,t,r){t.f=r(4)},function(e,t,r){var n=r(11),o=r(37).f,l={}.toString,a='object'==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(t){return a.slice()}};e.exports.f=function(e){return a&&'[object Window]'==l.call(e)?s(e):o(n(e))}},function(e){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,r){var n=r(18),o=r(25);e.exports=function(e){return function(t,r){var c,a,p=o(t)+'',s=n(r),i=p.length;return 0>s||s>=i?e?'':void 0:(c=p.charCodeAt(s),55296>c||56319<c||s+1===i||56320>(a=p.charCodeAt(s+1))||57343<a?e?p.charAt(s):c:e?p.slice(s,s+2):(c-55296<<10)+(a-56320)+65536)}}},function(e,t,r){'use strict';var o=r(18),l=r(25);e.exports=function(e){var t=l(this)+'',r='',a=o(e);if(0>a||a==Infinity)throw RangeError('Count can\\\\'t be negative');for(;0<a;(a>>>=1)&&(t+=t))1&a&&(r+=t);return r}},function(e,t,r){var n=r(1),o=r(30),l=r(4)('match');e.exports=function(e){var t;return n(e)&&((t=e[l])===void 0?'RegExp'==o(e):!!t)}},function(e,t,r){'use strict';var n=r(2);e.exports=function(){var e=n(this),t='';return e.global&&(t+='g'),e.ignoreCase&&(t+='i'),e.multiline&&(t+='m'),e.unicode&&(t+='u'),e.sticky&&(t+='y'),t}},function(e,t,r){var n=r(1);e.exports=function(e){return!n(e)&&isFinite(e)&&p(e)===e}},function(e){e.exports=Math.log1p||function(e){return-1e-8<(e=+e)&&1e-8>e?e-e*e/2:n(1+e)}},function(e,t,r){var n=r(26),o=r(11),l=r(40).f;e.exports=function(e){return function(t){for(var r,a=o(t),s=n(a),c=s.length,p=0,i=[];c>p;)l.call(a,r=s[p++])&&i.push(e?[r,a[r]]:a[r]);return i}}},function(e,t,r){var n=r(6),o=r(91),l=r(25);e.exports=function(e,t,r,a){var s=l(e)+'',i=s.length,p=void 0===r?' ':r+'',d=n(t);if(d<=i||''==p)return s;var u=d-i,g=o.call(p,c(u/p.length));return g.length>u&&(g=g.slice(0,u)),a?g+s:s+g}},function(e,t){'use strict';function r(e,t,r){var n=new Error(t.message||t.message_to_client||t);return n.name=t.code||e,n.passthrough=r,n}function n(e,t){for(var r=new Uint8Array(e.length+t.length),n=0;n<e.length;n++)r[n]=e[n];for(var o=0;o<t.length;o++)r[o+e.length]=t[o];return r}function o(e){var t=new Uint8Array(l),r=new DataView(t.buffer);return r.setUint32(0,e),t}Object.defineProperty(t,'__esModule',{value:!0}),t.addMetadata=function(e,t){for(var r=t.uploadId,l=t.callType,a=o(r),s=o(l),i=e,c=function(e){var t=o(e.length),r=new Uint8Array([]);return r=n(r,s),r=n(r,a),r=n(r,t),r=n(r,e),r},p=[],d=0;d<i.length;d++)p.push(c(i[d],d,i));return p},t.log=function(e){var t;if(e){for(var r=arguments.length,n=Array(1<r?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];(t=console).log.apply(t,[new Date+':'].concat(n))}},t.createError=r,t.pushToBuffer=n,t.getFile=function(e){var t=Object.assign({},e);return t.buffer=new Uint8Array(e.buffer),t},t.checkOptions=function(e){if(!e)throw Error('Options is required');for(var t=['filename','buffer','documentType','documentFormat'],n=t,o=function(t){if(!(t in e))throw r('InvocationError','Required option <'+t+'> is not found in the given options')},l=0;l<n.length;l++)o(n[l],l,n);if(e.buffer.length>a)throw r('FileSizeError','The maximum acceptable file size is '+s)};var l=4,a=t.MAX_SIZE=8388608,s=t.HUMAN_READABLE_MAX_SIZE='8 MB',i=t.generateChunks=function(e,t){for(var r,n=t.chunkSize,o=n===void 0?16384:n,l=[],a=0;a<e.length;a++)r=e[a],0==a%o?l.push([r]):l[l.length-1].push(r);for(var s=l,i=function(e){return new Uint8Array(e)},c=[],p=0;p<s.length;p++)c.push(i(s[p],p,s));return c.concat(new Uint8Array([]))}},function(e){var r={utf8:{stringToBytes:function(e){return r.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(r.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],r=0;r<e.length;r++)t.push(255&e.charCodeAt(r));return t},bytesToString:function(e){for(var r=[],n=0;n<e.length;n++)r.push(t(e[n]));return r.join('')}}};e.exports=r},function(e,t,r){'use strict';function n(e,t){if(!(e instanceof t))throw new TypeError('Cannot call a class as a function')}Object.defineProperty(t,'__esModule',{value:!0});var o=function(){function e(e,t){for(var r,n=0;n<t.length;n++)r=t[n],r.enumerable=r.enumerable||!1,r.configurable=!0,'value'in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();r(101),r(103),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(116),r(118),r(119),r(120),r(121),r(122),r(124),r(125),r(126),r(127),r(128),r(129),r(130),r(131),r(132),r(133),r(134),r(135),r(139),r(142),r(143),r(144),r(145),r(146),r(147),r(148),r(149),r(150),r(151),r(152),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(61),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208);var l=r(98),a=r(209),s=function(e){return e&&e.__esModule?e:{default:e}}(a),i=0,c=function(){function e(t){n(this,e),this.config=t,this.clients={},this.wrapConnection()}return o(e,[{key:'upload',value:function(e){var t=this,r=this.config.debug,n=(0,l.getFile)(e);(0,l.checkOptions)(n),i+=1;var o=new s.default({send:this.send,file:n,reqId:i});return this.clients[i]={client:o},new Promise(function(e,a){t.clients[i].promise={resolve:e,reject:a},(0,l.log)(void 0!==r&&r,'Uploading started, File options:',n),o.requestUpload()})}},{key:'wrapConnection',value:function(){var e=this,t=this.config,r=t.connection,n=t.debug,o=void 0!==n&&n;if(!r||1!==r.readyState)throw(0,l.createError)('ConnectionError','Connection is not ready!');this.connection=r,this.send=function(e){(0,l.log)(o,'<Sent>:',e),r.send(e)};var a=r.onmessage;r.onmessage=function(t){var n=t.data;(0,l.log)(o,'<Received>:',n);var s=JSON.parse(n);if(a&&(!s.passthrough||!s.passthrough.document_upload))return void a.call(r,t);var i=s.passthrough.document_upload;if(a&&!i)return void a.call(r,t);if(s.req_id in e.clients){var c=e.clients[s.req_id],p=c.client,d=c.promise;try{var u=p.handleMessage(s);u&&((0,l.log)(o,'Upload successful, upload info:',u),d.resolve(u))}catch(t){d.reject(t),(0,l.log)(o,t)}}}}}]),e}();t.default=c},function(e,t,r){'use strict';var n=r(0),o=r(53),l=r(71),a=r(2),s=r(31),i=r(6),c=r(1),p=r(3).ArrayBuffer,d=r(42),u=l.ArrayBuffer,g=l.DataView,h=o.ABV&&p.isView,y=u.prototype.slice,f=o.VIEW,m='ArrayBuffer';n(n.G+n.W+n.F*(p!==u),{ArrayBuffer:u}),n(n.S+n.F*!o.CONSTR,m,{isView:function(e){return h&&h(e)||c(e)&&f in e}}),n(n.P+n.U+n.F*r(5)(function(){return!new u(2).slice(1,void 0).byteLength}),m,{slice:function(e,t){if(y!==void 0&&t===void 0)return y.call(a(this),e);for(var r=a(this).byteLength,n=s(e,r),o=s(void 0===t?r:t,r),l=new(d(this,u))(i(o-n)),c=new g(this),p=new g(l),h=0;n<o;)p.setUint8(h++,c.getUint8(n++));return l}}),r(43)(m)},function(e,t,r){e.exports=r(41)('native-function-to-string',Function.toString)},function(e,t,r){r(15)('Int8',1,function(e){return function(t,r,n){return e(this,t,r,n)}})},function(e,t,r){var n=r(7),o=r(2),l=r(26);e.exports=r(8)?Object.defineProperties:function(e,t){o(e);for(var r,a=l(t),s=a.length,c=0;s>c;)n.f(e,r=a[c++],t[r]);return e}},function(e,t,r){var n=r(106);e.exports=function(e,t){return new(n(e))(t)}},function(e,t,r){var n=r(1),o=r(75),l=r(4)('species');e.exports=function(e){var t;return o(e)&&(t=e.constructor,'function'==typeof t&&(t===Array||o(t.prototype))&&(t=void 0),n(t)&&(t=t[l],null===t&&(t=void 0))),void 0===t?Array:t}},function(e,t,r){'use strict';var n=r(38),o=r(21),l=r(32),a={};r(9)(a,r(4)('iterator'),function(){return this}),e.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),l(e,t+' Iterator')}},function(e,t,r){r(15)('Uint8',1,function(e){return function(t,r,n){return e(this,t,r,n)}})},function(e,t,r){r(15)('Uint8',1,function(e){return function(t,r,n){return e(this,t,r,n)}},!0)},function(e,t,r){r(15)('Int16',2,function(e){return function(t,r,n){return e(this,t,r,n)}})},function(e,t,r){r(15)('Uint16',2,function(e){return function(t,r,n){return e(this,t,r,n)}})},function(e,t,r){r(15)('Int32',4,function(e){return function(t,r,n){return e(this,t,r,n)}})},function(e,t,r){r(15)('Uint32',4,function(e){return function(t,r,n){return e(this,t,r,n)}})},function(e,t,r){r(15)('Float32',4,function(e){return function(t,r,n){return e(this,t,r,n)}})},function(e,t,r){r(15)('Float64',8,function(e){return function(t,r,n){return e(this,t,r,n)}})},function(e,t,r){'use strict';var n=r(79),o=r(27),l='Map';e.exports=r(47)(l,function(e){return function(){return e(this,0<arguments.length?arguments[0]:void 0)}},{get:function(e){var t=n.getEntry(o(this,l),e);return t&&t.v},set:function(e,t){return n.def(o(this,l),0===e?0:e,t)}},n,!0)},function(e,t,r){var n=r(1),o=r(81).set;e.exports=function(e,t,r){var l,a=t.constructor;return a!==r&&'function'==typeof a&&(l=a.prototype)!==r.prototype&&n(l)&&o&&o(e,l),e}},function(e,t,r){'use strict';var n=r(79),o=r(27),l='Set';e.exports=r(47)(l,function(e){return function(){return e(this,0<arguments.length?arguments[0]:void 0)}},{add:function(e){return n.def(o(this,l),e=0===e?0:e,e)}},n)},function(e,t,r){'use strict';var n,o=r(3),l=r(39)(0),a=r(17),s=r(19),i=r(82),c=r(83),p=r(1),d=r(27),u=r(27),g=!o.ActiveXObject&&'ActiveXObject'in o,h='WeakMap',y=s.getWeak,f=Object.isExtensible,m=c.ufstore,E=function(e){return function(){return e(this,0<arguments.length?arguments[0]:void 0)}},x={get:function(e){if(p(e)){var t=y(e);return!0===t?m(d(this,h)).get(e):t?t[this._i]:void 0}},set:function(e,t){return c.def(d(this,h),e,t)}},_=e.exports=r(47)(h,E,x,c,!0,!0);u&&g&&(n=c.getConstructor(E,h),i(n.prototype,x),s.NEED=!0,l(['delete','has','get','set'],function(e){var t=_.prototype,r=t[e];a(t,e,function(t,o){if(p(t)&&!f(t)){this._f||(this._f=new n);var l=this._f[e](t,o);return'set'==e?this:l}return r.call(this,t,o)})}))},function(e,t,r){'use strict';var n=r(83),o=r(27),l='WeakSet';r(47)(l,function(e){return function(){return e(this,0<arguments.length?arguments[0]:void 0)}},{add:function(e){return n.def(o(this,l),e,!0)}},n,!1,!0)},function(e,t,r){var n=r(0),o=r(24),l=r(2),a=(r(3).Reflect||{}).apply,s=Function.apply;n(n.S+n.F*!r(5)(function(){a(function(){})}),'Reflect',{apply:function(e,t,r){var n=o(e),i=l(r);return a?a(n,t,i):s.call(n,t,i)}})},function(e,t,r){var n=r(0),o=r(38),l=r(24),a=r(2),s=r(1),i=r(5),c=r(123),p=(r(3).Reflect||{}).construct,d=i(function(){function e(){}return!(p(function(){},[],e)instanceof e)}),u=!i(function(){p(function(){})});n(n.S+n.F*(d||u),'Reflect',{construct:function(e,t){l(e),a(t);var r=3>arguments.length?e:l(arguments[2]);if(u&&!d)return p(e,t,r);if(e==r){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);}var n=[null];return n.push.apply(n,t),new(c.apply(e,n))}var i=r.prototype,g=o(s(i)?i:Object.prototype),h=Function.apply.call(e,g,t);return s(h)?h:g}})},function(e,t,r){'use strict';var n=r(24),o=r(1),l=r(84),a=[].slice,s={},i=function(e,t,r){if(!(t in s)){for(var o=[],n=0;n<t;n++)o[n]='a['+n+']';s[t]=Function('F,a','return new F('+o.join(',')+')')}return s[t](e,r)};e.exports=Function.bind||function(e){var t=n(this),r=a.call(arguments,1),s=function(){var n=r.concat(a.call(arguments));return this instanceof s?i(t,n.length,n):l(t,n,e)};return o(t.prototype)&&(s.prototype=t.prototype),s}},function(e,t,r){var n=r(7),o=r(0),l=r(2),a=r(36);o(o.S+o.F*r(5)(function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})}),'Reflect',{defineProperty:function(e,t,r){l(e),t=a(t,!0),l(r);try{return n.f(e,t,r),!0}catch(t){return!1}}})},function(e,t,r){var n=r(0),o=r(16).f,l=r(2);n(n.S,'Reflect',{deleteProperty:function(e,t){var r=o(l(e),t);return r&&!r.configurable?!1:delete e[t]}})},function(e,t,r){function n(e,t){var r,s,p=3>arguments.length?e:arguments[2];return c(e)===p?e[t]:(r=o.f(e,t))?a(r,'value')?r.value:void 0===r.get?void 0:r.get.call(p):i(s=l(e))?n(s,t,p):void 0}var o=r(16),l=r(34),a=r(10),s=r(0),i=r(1),c=r(2);s(s.S,'Reflect',{get:n})},function(e,t,r){var n=r(16),o=r(0),l=r(2);o(o.S,'Reflect',{getOwnPropertyDescriptor:function(e,t){return n.f(l(e),t)}})},function(e,t,r){var n=r(0),o=r(34),l=r(2);n(n.S,'Reflect',{getPrototypeOf:function(e){return o(l(e))}})},function(e,t,r){var n=r(0);n(n.S,'Reflect',{has:function(e,t){return t in e}})},function(e,t,r){var n=r(0),o=r(2),l=Object.isExtensible;n(n.S,'Reflect',{isExtensible:function(e){return o(e),!l||l(e)}})},function(e,t,r){var n=r(0);n(n.S,'Reflect',{ownKeys:r(85)})},function(e,t,r){var n=r(0),o=r(2),l=Object.preventExtensions;n(n.S,'Reflect',{preventExtensions:function(e){o(e);try{return l&&l(e),!0}catch(t){return!1}}})},function(e,t,r){function n(e,t,r){var i,u,g=4>arguments.length?e:arguments[3],h=l.f(p(e),t);if(!h){if(d(u=a(e)))return n(u,t,r,g);h=c(0)}if(s(h,'value')){if(!1===h.writable||!d(g))return!1;if(i=l.f(g,t)){if(i.get||i.set||!1===i.writable)return!1;i.value=r,o.f(g,t,i)}else o.f(g,t,c(0,r));return!0}return h.set!==void 0&&(h.set.call(g,r),!0)}var o=r(7),l=r(16),a=r(34),s=r(10),i=r(0),c=r(21),p=r(2),d=r(1);i(i.S,'Reflect',{set:n})},function(e,t,r){var n=r(0),o=r(81);o&&n(n.S,'Reflect',{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(t){return!1}}})},function(e,t,r){'use strict';var n,o,l,a,s=r(23),i=r(3),c=r(14),p=r(44),d=r(0),u=r(1),g=r(24),h=r(29),y=r(46),f=r(42),m=r(62).set,E=r(136)(),x=r(86),_=r(137),S=r(49),T=r(138),b='Promise',P=i.TypeError,O=i.process,v=O&&O.versions,I=v&&v.v8||'',A=i[b],R='process'==p(O),k=function(){},L=o=x.f,F=!!function(){try{var e=A.resolve(1),t=(e.constructor={})[r(4)('species')]=function(e){e(k,k)};return(R||'function'==typeof PromiseRejectionEvent)&&e.then(k)instanceof t&&0!==I.indexOf('6.6')&&-1===S.indexOf('Chrome/66')}catch(t){}}(),N=function(e){var t;return u(e)&&'function'==typeof(t=e.then)&&t},M=function(e,t){if(!e._n){e._n=!0;var r=e._c;E(function(){for(var n=e._v,o=1==e._s,l=0,a=function(t){var r,l,a,s=o?t.ok:t.fail,i=t.resolve,c=t.reject,p=t.domain;try{s?(!o&&(2==e._h&&C(e),e._h=1),!0===s?r=n:(p&&p.enter(),r=s(n),p&&(p.exit(),a=!0)),r===t.promise?c(P('Promise-chain cycle')):(l=N(r))?l.call(r,i,c):i(r)):c(n)}catch(t){p&&!a&&p.exit(),c(t)}};r.length>l;)a(r[l++]);e._c=[],e._n=!1,t&&!e._h&&w(e)})}},w=function(e){m.call(i,function(){var t,r,n,o=e._v,l=D(e);if(l&&(t=_(function(){R?O.emit('unhandledRejection',o,e):(r=i.onunhandledrejection)?r({promise:e,reason:o}):(n=i.console)&&n.error&&n.error('Unhandled promise rejection',o)}),e._h=R||D(e)?2:1),e._a=void 0,l&&t.e)throw t.v})},D=function(e){return 1!==e._h&&0===(e._a||e._c).length},C=function(e){m.call(i,function(){var t;R?O.emit('rejectionHandled',e):(t=i.onrejectionhandled)&&t({promise:e,reason:e._v})})},j=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=e,t._s=2,!t._a&&(t._a=t._c.slice()),M(t,!0))},Y=function(e){var t,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===e)throw P('Promise can\\\\'t be resolved itself');(t=N(e))?E(function(){var n={_w:r,_d:!1};try{t.call(e,c(Y,n,1),c(j,n,1))}catch(t){j.call(n,t)}}):(r._v=e,r._s=1,M(r,!1))}catch(t){j.call({_w:r,_d:!1},t)}}};F||(A=function(e){h(this,A,b,'_h'),g(e),n.call(this);try{e(c(Y,this,1),c(j,this,1))}catch(e){j.call(this,e)}},n=function(){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},n.prototype=r(28)(A.prototype,{then:function(e,t){var r=L(f(this,A));return r.ok='function'!=typeof e||e,r.fail='function'==typeof t&&t,r.domain=R?O.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&M(this,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),l=function(){var e=new n;this.promise=e,this.resolve=c(Y,e,1),this.reject=c(j,e,1)},x.f=L=function(e){return e===A||e===a?new l(e):o(e)}),d(d.G+d.W+d.F*!F,{Promise:A}),r(32)(A,b),r(43)(b),a=r(20)[b],d(d.S+d.F*!F,b,{reject:function(e){var t=L(this),r=t.reject;return r(e),t.promise}}),d(d.S+d.F*(s||!F),b,{resolve:function(e){return T(s&&this===a?A:this,e)}}),d(d.S+d.F*!(F&&r(45)(function(e){A.all(e)['catch'](k)})),b,{all:function(e){var t=this,r=L(t),n=r.resolve,o=r.reject,l=_(function(){var r=[],l=0,a=1;y(e,!1,function(e){var s=l++,i=!1;r.push(void 0),a++,t.resolve(e).then(function(e){i||(i=!0,r[s]=e,--a||n(r))},o)}),--a||n(r)});return l.e&&o(l.v),r.promise},race:function(e){var t=this,r=L(t),n=r.reject,o=_(function(){y(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o.e&&n(o.v),r.promise}})},function(e,t,r){var n=r(3),o=r(62).set,l=n.MutationObserver||n.WebKitMutationObserver,a=n.process,s=n.Promise,i='process'==r(30)(a);e.exports=function(){var t,r,c,e=function(){var e,n;for(i&&(e=a.domain)&&e.exit();t;){n=t.fn,t=t.next;try{n()}catch(n){throw t?c():r=void 0,n}}r=void 0,e&&e.enter()};if(i)c=function(){a.nextTick(e)};else if(l&&!(n.navigator&&n.navigator.standalone)){var p=!0,d=document.createTextNode('');new l(e).observe(d,{characterData:!0}),c=function(){d.data=p=!p}}else if(s&&s.resolve){var u=s.resolve(void 0);c=function(){u.then(e)}}else c=function(){o.call(n,e)};return function(e){var n={fn:e,next:void 0};r&&(r.next=n),t||(t=n,c()),r=n}}},function(e){e.exports=function(e){try{return{e:!1,v:e()}}catch(t){return{e:!0,v:t}}}},function(e,t,r){var n=r(2),o=r(1),l=r(86);e.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=l.f(e),a=r.resolve;return a(t),r.promise}},function(e,t,r){'use strict';var n=r(3),o=r(10),l=r(8),a=r(0),s=r(17),c=r(19).KEY,i=r(5),p=r(41),d=r(32),u=r(22),g=r(4),h=r(87),y=r(140),f=r(141),m=r(75),E=r(2),x=r(1),_=r(11),S=r(36),T=r(21),b=r(38),P=r(88),O=r(16),v=r(7),I=r(26),A=O.f,R=v.f,L=P.f,F=n.Symbol,N=n.JSON,M=N&&N.stringify,w='prototype',C=g('_hidden'),D=g('toPrimitive'),Y={}.propertyIsEnumerable,B=p('symbol-registry'),G=p('symbols'),U=p('op-symbols'),H=Object[w],W='function'==typeof F,V=n.QObject,z=!V||!V[w]||!V[w].findChild,$=l&&i(function(){return 7!=b(R({},'a',{get:function(){return R(this,'a',{value:7}).a}})).a})?function(e,t,r){var n=A(H,t);n&&delete H[t],R(e,t,r),n&&e!==H&&R(H,t,n)}:R,K=function(e){var t=G[e]=b(F[w]);return t._k=e,t},q=W&&'symbol'==typeof F.iterator?function(e){return'symbol'==typeof e}:function(e){return e instanceof F},X=function(e,t,r){return e===H&&X(U,t,r),E(e),t=S(t,!0),E(r),o(G,t)?(r.enumerable?(o(e,C)&&e[C][t]&&(e[C][t]=!1),r=b(r,{enumerable:T(0,!1)})):(!o(e,C)&&R(e,C,T(1,{})),e[C][t]=!0),$(e,t,r)):R(e,t,r)},Z=function(e,t){E(e);for(var r,n=f(t=_(t)),o=0,a=n.length;a>o;)X(e,r=n[o++],t[r]);return e},J=function(e){var t=Y.call(this,e=S(e,!0));return this===H&&o(G,e)&&!o(U,e)?!1:t||!o(this,e)||!o(G,e)||o(this,C)&&this[C][e]?t:!0},Q=function(e,t){if(e=_(e),t=S(t,!0),e!==H||!o(G,t)||o(U,t)){var r=A(e,t);return r&&o(G,t)&&!(o(e,C)&&e[C][t])&&(r.enumerable=!0),r}},ee=function(e){for(var t,r=L(_(e)),n=[],l=0;r.length>l;)o(G,t=r[l++])||t==C||t==c||n.push(t);return n},te=function(e){for(var t,r=e===H,n=L(r?U:_(e)),l=[],a=0;n.length>a;)o(G,t=n[a++])&&(!r||o(H,t))&&l.push(G[t]);return l};W||(F=function(){if(this instanceof F)throw TypeError('Symbol is not a constructor!');var e=u(0<arguments.length?arguments[0]:void 0),t=function(r){this===H&&t.call(U,r),o(this,C)&&o(this[C],e)&&(this[C][e]=!1),$(this,e,T(1,r))};return l&&z&&$(H,e,{configurable:!0,set:t}),K(e)},s(F[w],'toString',function(){return this._k}),O.f=Q,v.f=X,r(37).f=P.f=ee,r(40).f=J,r(48).f=te,l&&!r(23)&&s(H,'propertyIsEnumerable',J,!0),h.f=function(e){return K(g(e))}),a(a.G+a.W+a.F*!W,{Symbol:F});for(var re=['hasInstance','isConcatSpreadable','iterator','match','replace','search','species','split','toPrimitive','toStringTag','unscopables'],ne=0;re.length>ne;)g(re[ne++]);for(var j=I(g.store),oe=0;j.length>oe;)y(j[oe++]);a(a.S+a.F*!W,'Symbol',{for:function(e){return o(B,e+='')?B[e]:B[e]=F(e)},keyFor:function(e){if(!q(e))throw TypeError(e+' is not a symbol!');for(var t in B)if(B[t]===e)return t},useSetter:function(){z=!0},useSimple:function(){z=!1}}),a(a.S+a.F*!W,'Object',{create:function(e,t){return t===void 0?b(e):Z(b(e),t)},defineProperty:X,defineProperties:Z,getOwnPropertyDescriptor:Q,getOwnPropertyNames:ee,getOwnPropertySymbols:te}),N&&a(a.S+a.F*(!W||i(function(){var e=F();return'[null]'!=M([e])||'{}'!=M({a:e})||'{}'!=M(Object(e))})),'JSON',{stringify:function(e){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);if(r=t=n[1],(x(t)||void 0!==e)&&!q(e))return m(t)||(t=function(e,t){if('function'==typeof r&&(t=r.call(this,e,t)),!q(t))return t}),n[1]=t,M.apply(N,n)}}),F[w][D]||r(9)(F[w],D,F[w].valueOf),d(F,'Symbol'),d(Math,'Math',!0),d(n.JSON,'JSON',!0)},function(e,t,r){var n=r(3),o=r(20),l=r(23),a=r(87),s=r(7).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=l?{}:n.Symbol||{});'_'==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t,r){var n=r(26),o=r(48),l=r(40);e.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,s=r(e),c=l.f,p=0;s.length>p;)c.call(e,a=s[p++])&&t.push(a);return t}},function(e,t,r){var n=r(1),o=r(19).onFreeze;r(13)('freeze',function(e){return function(t){return e&&n(t)?e(o(t)):t}})},function(e,t,r){var n=r(1),o=r(19).onFreeze;r(13)('seal',function(e){return function(t){return e&&n(t)?e(o(t)):t}})},function(e,t,r){var n=r(1),o=r(19).onFreeze;r(13)('preventExtensions',function(e){return function(t){return e&&n(t)?e(o(t)):t}})},function(e,t,r){var n=r(1);r(13)('isFrozen',function(e){return function(t){return!n(t)||!!e&&e(t)}})},function(e,t,r){var n=r(1);r(13)('isSealed',function(e){return function(t){return!n(t)||!!e&&e(t)}})},function(e,t,r){var n=r(1);r(13)('isExtensible',function(e){return function(t){return!!n(t)&&(!e||e(t))}})},function(e,t,r){var n=r(11),o=r(16).f;r(13)('getOwnPropertyDescriptor',function(){return function(e,t){return o(n(e),t)}})},function(e,t,r){var n=r(12),o=r(34);r(13)('getPrototypeOf',function(){return function(e){return o(n(e))}})},function(e,t,r){var n=r(12),o=r(26);r(13)('keys',function(){return function(e){return o(n(e))}})},function(e,t,r){r(13)('getOwnPropertyNames',function(){return r(88).f})},function(e,t,r){var n=r(0);n(n.S+n.F,'Object',{assign:r(82)})},function(e,t,r){var n=r(0);n(n.S,'Object',{is:r(89)})},function(e,t,r){var n=r(7).f,o=Function.prototype,l=/^\\\\s*function ([^ (]*)/,a='name';a in o||r(8)&&n(o,a,{configurable:!0,get:function(){try{return(''+this).match(l)[1]}catch(t){return''}}})},function(e,t,r){var n=r(0),o=r(11),l=r(6);n(n.S,'String',{raw:function(e){for(var t=o(e.raw),r=l(t.length),n=arguments.length,a=[],s=0;r>s;)a.push(t[s++]+''),s<n&&a.push(arguments[s]+'');return a.join('')}})},function(e,r,n){var o=n(0),l=n(31),a=t,s=String.fromCodePoint;o(o.S+o.F*(!!s&&1!=s.length),'String',{fromCodePoint:function(){for(var e,t=[],r=arguments.length,n=0;r>n;){if(e=+arguments[n++],l(e,1114111)!==e)throw RangeError(e+' is not a valid code point');t.push(65536>e?a(e):a(((e-=65536)>>10)+55296,e%1024+56320))}return t.join('')}})},function(e,t,r){'use strict';var n=r(0),o=r(90)(!1);n(n.P,'String',{codePointAt:function(e){return o(this,e)}})},function(e,t,r){var n=r(0);n(n.P,'String',{repeat:r(91)})},function(e,t,r){'use strict';var n=r(0),o=r(6),l=r(63),a='startsWith',s=''[a];n(n.P+n.F*r(64)(a),'String',{startsWith:function(e){var t=l(this,e,a),r=o(d(1<arguments.length?arguments[1]:void 0,t.length)),n=e+'';return t.slice(r,r+n.length)===n}})},function(e,t,r){'use strict';var n=r(0),o=r(6),l=r(63),a='endsWith',s=''[a];n(n.P+n.F*r(64)(a),'String',{endsWith:function(e){var t=l(this,e,a),r=1<arguments.length?arguments[1]:void 0,n=o(t.length),s=r===void 0?n:d(o(r),n),i=e+'';return t.slice(s-i.length,s)===i}})},function(e,t,r){'use strict';var n=r(0),o=r(63),l='includes';n(n.P+n.F*r(64)(l),'String',{includes:function(e){return!!~o(this,e,l).indexOf(e,1<arguments.length?arguments[1]:void 0)}})},function(e,t,r){r(8)&&'g'!=/./g.flags&&r(7).f(RegExp.prototype,'flags',{configurable:!0,get:r(93)})},function(e,t,r){'use strict';var o=r(2),l=r(6),a=r(65),s=r(50);r(51)('match',1,function(e,t,r,i){return[function(r){var n=e(this),o=r==void 0?void 0:r[t];return o===void 0?new RegExp(r)[t](n+''):o.call(r,n)},function(e){var t=i(r,e,this);if(t.done)return t.value;var c=o(e),p=this+'';if(!c.global)return s(c,p);var d=c.unicode;c.lastIndex=0;for(var u,g=[],h=0;null!==(u=s(c,p));){var n=u[0]+'';g[h]=n,''===n&&(c.lastIndex=a(p,l(c.lastIndex),d)),h++}return 0==h?null:g}]})},function(e,t,r){'use strict';var n=r(66);r(0)({target:'RegExp',proto:!0,forced:n!==/./.exec},{exec:n})},function(e,t,r){'use strict';var n=r(2),o=r(12),l=r(6),a=r(18),s=r(65),c=r(50),u=/\\\\$([$&`']|\\\\d\\\\d?|<[^>]*>)/g,g=/\\\\$([$&`']|\\\\d\\\\d?)/g,h=function(e){return e===void 0?e:e+''};r(51)('replace',2,function(e,t,r,y){function f(e,t,l,a,s,n){var i=l+e.length,c=a.length,d=g;return void 0!==s&&(s=o(s),d=u),r.call(n,d,function(r,o){var d;switch(o.charAt(0)){case'$':return'$';case'&':return e;case'`':return t.slice(0,l);case'\\\\'':return t.slice(i);case'<':d=s[o.slice(1,-1)];break;default:var u=+o;if(0==u)return r;if(u>c){var n=p(u/10);return 0===n?r:n<=c?void 0===a[n-1]?o.charAt(1):a[n-1]+o.charAt(1):r}d=a[u-1];}return void 0===d?'':d})}return[function(n,o){var l=e(this),a=n==void 0?void 0:n[t];return a===void 0?r.call(l+'',n,o):a.call(n,l,o)},function(e,t){var o=y(r,e,this,t);if(o.done)return o.value;var p=n(e),u=this+'',g='function'==typeof t;g||(t=t+'');var m=p.global;if(m){var E=p.unicode;p.lastIndex=0}for(var x,_=[];(x=c(p,u),null!==x)&&!(_.push(x),!m);){var S=x[0]+'';''===S&&(p.lastIndex=s(u,l(p.lastIndex),E))}for(var T='',b=0,P=0;P<_.length;P++){x=_[P];for(var O=x[0]+'',v=i(d(a(x.index),u.length),0),I=[],A=1;A<x.length;A++)I.push(h(x[A]));var R=x.groups;if(g){var k=[O].concat(I,v,u);R!==void 0&&k.push(R);var L=t.apply(void 0,k)+''}else L=f(O,u,v,I,R,t);v>=b&&(T+=u.slice(b,v)+L,b=v+O.length)}return T+u.slice(b)}]})},function(e,t,r){'use strict';var n=r(92),o=r(2),l=r(42),a=r(65),s=r(6),c=r(50),i=r(66),p=r(5),u=[].push,g='split',h='length',y='lastIndex',f=4294967295,m=!p(function(){RegExp(f,'y')});r(51)('split',2,function(e,t,r,E){var x;return x='c'=='abbc'[g](/(b)*/)[1]||4!='test'[g](/(?:)/,-1)[h]||2!='ab'[g](/(?:ab)*/)[h]||4!='.'[g](/(.?)(.?)/)[h]||1<'.'[g](/()()/)[h]||''[g](/.?/)[h]?function(e,t){var o=this+'';if(void 0===e&&0===t)return[];if(!n(e))return r.call(o,e,t);for(var l,a,s,c=[],p=(e.ignoreCase?'i':'')+(e.multiline?'m':'')+(e.unicode?'u':'')+(e.sticky?'y':''),d=0,g=void 0===t?f:t>>>0,m=new RegExp(e.source,p+'g');(l=i.call(m,o))&&(a=m[y],!(a>d&&(c.push(o.slice(d,l.index)),1<l[h]&&l.index<o[h]&&u.apply(c,l.slice(1)),s=l[0][h],d=a,c[h]>=g)));)m[y]===l.index&&m[y]++;return d===o[h]?(s||!m.test(''))&&c.push(''):c.push(o.slice(d)),c[h]>g?c.slice(0,g):c}:'0'[g](void 0,0)[h]?function(e,t){return void 0===e&&0===t?[]:r.call(this,e,t)}:r,[function(r,n){var o=e(this),l=void 0==r?void 0:r[t];return void 0===l?x.call(o+'',r,n):l.call(r,o,n)},function(t,n){var u=E(x,t,this,n,x!==r);if(u.done)return u.value;var g=o(t),h=this+'',y=l(g,RegExp),_=g.unicode,S=(g.ignoreCase?'i':'')+(g.multiline?'m':'')+(g.unicode?'u':'')+(m?'y':'g'),T=new y(m?g:'^(?:'+g.source+')',S),b=void 0===n?f:n>>>0;if(0==b)return[];if(0===h.length)return null===c(T,h)?[h]:[];for(var P=0,p=0,O=[];p<h.length;){T.lastIndex=m?p:0;var v,e=c(T,m?h:h.slice(p));if(null===e||(v=d(s(T.lastIndex+(m?0:p)),h.length))===P)p=a(h,p,_);else{if(O.push(h.slice(P,p)),O.length===b)return O;for(var I=1;I<=e.length-1;I++)if(O.push(e[I]),O.length===b)return O;p=P=v}}return O.push(h.slice(P)),O}]})},function(e,t,r){'use strict';var n=r(2),o=r(89),l=r(50);r(51)('search',1,function(e,t,r,a){return[function(r){var n=e(this),o=r==void 0?void 0:r[t];return o===void 0?new RegExp(r)[t](n+''):o.call(r,n)},function(e){var t=a(r,e,this);if(t.done)return t.value;var s=n(e),i=this+'',c=s.lastIndex;o(c,0)||(s.lastIndex=0);var p=l(s,i);return o(s.lastIndex,c)||(s.lastIndex=c),null===p?-1:p.index}]})},function(e,t,r){'use strict';var n=r(14),o=r(0),l=r(12),a=r(80),s=r(59),i=r(6),c=r(67),p=r(60);o(o.S+o.F*!r(45)(function(e){Array.from(e)}),'Array',{from:function(e){var t,r,o,d,u=l(e),g='function'==typeof this?this:Array,h=arguments.length,y=1<h?arguments[1]:void 0,f=void 0!==y,m=0,E=p(u);if(f&&(y=n(y,2<h?arguments[2]:void 0,2)),void 0!=E&&!(g==Array&&s(E)))for(d=E.call(u),r=new g;!(o=d.next()).done;m++)c(r,m,f?a(d,y,[o.value,m],!0):o.value);else for(t=i(u.length),r=new g(t);t>m;m++)c(r,m,f?y(u[m],m):u[m]);return r.length=m,r}})},function(e,t,r){'use strict';var n=r(0),o=r(67);n(n.S+n.F*r(5)(function(){function e(){}return!(Array.of.call(e)instanceof e)}),'Array',{of:function(){for(var e=0,t=arguments.length,r=new('function'==typeof this?this:Array)(t);t>e;)o(r,e,arguments[e++]);return r.length=t,r}})},function(e,t,r){var n=r(0);n(n.P,'Array',{copyWithin:r(78)}),r(35)('copyWithin')},function(e,t,r){'use strict';var n=r(0),o=r(39)(5),l='find',a=!0;l in[]&&[,][l](function(){a=!1}),n(n.P+n.F*a,'Array',{find:function(e){return o(this,e,1<arguments.length?arguments[1]:void 0)}}),r(35)(l)},function(e,t,r){'use strict';var n=r(0),o=r(39)(6),l='findIndex',a=!0;l in[]&&[,][l](function(){a=!1}),n(n.P+n.F*a,'Array',{findIndex:function(e){return o(this,e,1<arguments.length?arguments[1]:void 0)}}),r(35)(l)},function(e,t,r){var n=r(0);n(n.P,'Array',{fill:r(58)}),r(35)('fill')},function(e,t,r){var n=r(0),o=r(3).isFinite;n(n.S,'Number',{isFinite:function(e){return'number'==typeof e&&o(e)}})},function(e,t,r){var n=r(0);n(n.S,'Number',{isInteger:r(94)})},function(e,t,r){var n=r(0),o=r(94);n(n.S,'Number',{isSafeInteger:function(e){return o(e)&&9007199254740991>=l(e)}})},function(e,t,r){var n=r(0);n(n.S,'Number',{isNaN:function(e){return e!=e}})},function(e,t,r){var n=r(0);n(n.S,'Number',{EPSILON:2.220446049250313e-16})},function(e,t,r){var n=r(0);n(n.S,'Number',{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,r){var n=r(0);n(n.S,'Number',{MAX_SAFE_INTEGER:9007199254740991})},function(t,o,l){var a=l(0),s=l(95),i=e,c=Math.acosh;a(a.S+a.F*!(c&&710==p(c(Number.MAX_VALUE))&&c(Infinity)==Infinity),'Math',{acosh:function(e){return 1>(e=+e)?NaN:94906265.62425156<e?n(e)+r:s(e-1+i(e-1)*i(e+1))}})},function(t,r,o){function l(t){return isFinite(t=+t)&&0!=t?0>t?-l(-t):n(t+e(t*t+1)):t}var a=o(0),s=Math.asinh;a(a.S+a.F*!(s&&0<1/s(0)),'Math',{asinh:l})},function(e,t,r){var o=r(0),l=Math.atanh;o(o.S+o.F*!(l&&0>1/l(-0)),'Math',{atanh:function(e){return 0==(e=+e)?e:n((1+e)/(1-e))/2}})},function(e,t,r){var n=r(0),a=r(68);n(n.S,'Math',{cbrt:function(e){return a(e=+e)*o(l(e),1/3)}})},function(e,t,r){var o=r(0);o(o.S,'Math',{clz32:function(e){return(e>>>=0)?31-p(n(e+0.5)*Math.LOG2E):32}})},function(e,t,r){var n=r(0),o=a;n(n.S,'Math',{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,r){var n=r(0),o=r(69);n(n.S+n.F*(o!=s),'Math',{expm1:o})},function(e,t,r){var n=r(0);n(n.S,'Math',{fround:r(189)})},function(e,t,r){var n=r(68),a=o,s=a(2,-52),i=a(2,-23),c=a(2,127)*(2-i),p=a(2,-126),d=function(e){return e+1/s-1/s};e.exports=Math.fround||function(e){var t,r,o=l(e),a=n(e);return o<p?a*d(o/p/i)*p*i:(t=(1+i/s)*o,r=t-(t-o),r>c||r!=r?a*Infinity:a*r)}},function(t,r,n){var o=n(0);o(o.S,'Math',{hypot:function(){for(var t,r,n=0,o=0,a=arguments.length,s=0;o<a;)t=l(arguments[o++]),s<t?(r=s/t,n=n*r*r+1,s=t):0<t?(r=t/s,n+=r*r):n+=t;return s==Infinity?Infinity:s*e(n)}})},function(e,t,r){var n=r(0),o=Math.imul;n(n.S+n.F*r(5)(function(){return-5!=o(4294967295,5)||2!=o.length}),'Math',{imul:function(e,t){var r=65535,n=+e,o=+t,l=r&n,a=r&o;return 0|l*a+((r&n>>>16)*a+l*(r&o>>>16)<<16>>>0)}})},function(e,t,r){var n=r(0);n(n.S,'Math',{log1p:r(95)})},function(e,t,r){var o=r(0);o(o.S,'Math',{log10:function(e){return n(e)*Math.LOG10E}})},function(e,t,o){var l=o(0);l(l.S,'Math',{log2:function(e){return n(e)/r}})},function(e,t,r){var n=r(0);n(n.S,'Math',{sign:r(68)})},function(e,t,r){var n=r(0),o=r(69),s=a;n(n.S+n.F*r(5)(function(){return!0}),'Math',{sinh:function(e){return 1>l(e=+e)?(o(e)-o(-e))/2:(s(e-1)-s(-e-1))*(Math.E/2)}})},function(e,t,r){var n=r(0),o=r(69),l=a;n(n.S,'Math',{tanh:function(e){var t=o(e=+e),r=o(-e);return t==Infinity?1:r==Infinity?-1:(t-r)/(l(e)+l(-e))}})},function(e,t,r){var n=r(0);n(n.S,'Math',{trunc:function(e){return(0<e?p:c)(e)}})},function(e,t,r){'use strict';var n=r(0),o=r(55)(!0);n(n.P,'Array',{includes:function(e){return o(this,e,1<arguments.length?arguments[1]:void 0)}}),r(35)('includes')},function(e,t,r){var n=r(0),o=r(96)(!1);n(n.S,'Object',{values:function(e){return o(e)}})},function(e,t,r){var n=r(0),o=r(96)(!0);n(n.S,'Object',{entries:function(e){return o(e)}})},function(e,t,r){var n=r(0),o=r(85),l=r(11),a=r(16),s=r(67);n(n.S,'Object',{getOwnPropertyDescriptors:function(e){for(var t,r,n=l(e),c=a.f,p=o(n),d={},u=0;p.length>u;)r=c(n,t=p[u++]),void 0!==r&&s(d,t,r);return d}})},function(e,t,r){'use strict';var n=r(0),o=r(97),l=r(49),a=/Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(l);n(n.P+n.F*a,'String',{padStart:function(e){return o(this,e,1<arguments.length?arguments[1]:void 0,!0)}})},function(e,t,r){'use strict';var n=r(0),o=r(97),l=r(49),a=/Version\\\\/10\\\\.\\\\d+(\\\\.\\\\d+)?( Mobile\\\\/\\\\w+)? Safari\\\\//.test(l);n(n.P+n.F*a,'String',{padEnd:function(e){return o(this,e,1<arguments.length?arguments[1]:void 0,!1)}})},function(e,t,r){var n=r(3),o=r(0),l=r(49),a=[].slice,s=/MSIE .\\\\./.test(l),i=function(e){return function(t,r){var n=2<arguments.length,o=!!n&&a.call(arguments,2);return e(n?function(){('function'==typeof t?t:Function(t)).apply(this,o)}:t,r)}};o(o.G+o.B+o.F*s,{setTimeout:i(n.setTimeout),setInterval:i(n.setInterval)})},function(e,t,r){var n=r(0),o=r(62);n(n.G+n.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,r){for(var n=r(61),o=r(26),l=r(17),a=r(3),s=r(9),c=r(33),p=r(4),d=p('iterator'),u=p('toStringTag'),g=c.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},y=o(h),f=0;f<y.length;f++){var i,m=y[f],E=h[m],x=a[m],_=x&&x.prototype;if(_&&(_[d]||s(_,d,g),_[u]||s(_,u,m),c[m]=g,E))for(i in n)_[i]||l(_,i,n[i],!0)}},function(e){!function(t){'use strict';function r(e,t,r,n){var l=t&&t.prototype instanceof o?t:o,a=Object.create(l.prototype),s=new g(n||[]);return a._invoke=c(e,r,s),a}function n(e,t,r){try{return{type:'normal',arg:e.call(t,r)}}catch(e){return{type:'throw',arg:e}}}function o(){}function l(){}function a(){}function s(e){['next','throw','return'].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function i(e){function t(r,o,l,a){var s=n(e[r],e,o);if('throw'===s.type)a(s.arg);else{var i=s.arg,c=i.value;return c&&'object'==typeof c&&m.call(c,'__await')?Promise.resolve(c.__await).then(function(e){t('next',e,l,a)},function(e){t('throw',e,l,a)}):Promise.resolve(c).then(function(e){i.value=e,l(i)},a)}}var r;this._invoke=function(e,n){function o(){return new Promise(function(r,o){t(e,n,r,o)})}return r=r?r.then(o,o):o()}}function c(e,t,r){var o=P;return function(l,a){if(o==v)throw new Error('Generator is already running');if(o==I){if('throw'===l)throw a;return y()}for(r.method=l,r.arg=a;;){var s=r.delegate;if(s){var i=p(s,r);if(i){if(i===A)continue;return i}}if('next'===r.method)r.sent=r._sent=r.arg;else if('throw'===r.method){if(o==P)throw o=I,r.arg;r.dispatchException(r.arg)}else'return'===r.method&&r.abrupt('return',r.arg);o=v;var c=n(e,t,r);if('normal'===c.type){if(o=r.done?I:O,c.arg===A)continue;return{value:c.arg,done:r.done}}'throw'===c.type&&(o=I,r.method='throw',r.arg=c.arg)}}}function p(e,t){var r=e.iterator[t.method];if(void 0===r){if(t.delegate=null,'throw'===t.method){if(e.iterator.return&&(t.method='return',t.arg=void 0,p(e,t),'throw'===t.method))return A;t.method='throw',t.arg=new TypeError('The iterator does not provide a \\\\'throw\\\\' method')}return A}var o=n(r,e.iterator,t.arg);if('throw'===o.type)return t.method='throw',t.arg=o.arg,t.delegate=null,A;var l=o.arg;if(!l)return t.method='throw',t.arg=new TypeError('iterator result is not an object'),t.delegate=null,A;if(l.done)t[e.resultName]=l.value,t.next=e.nextLoc,'return'!==t.method&&(t.method='next',t.arg=void 0);else return l;return t.delegate=null,A}function d(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function u(e){var t=e.completion||{};t.type='normal',delete t.arg,e.completion=t}function g(e){this.tryEntries=[{tryLoc:'root'}],e.forEach(d,this),this.reset(!0)}function h(e){if(e){var t=e[x];if(t)return t.call(e);if('function'==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function t(){for(;++r<e.length;)if(m.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return n.next=n}}return{next:y}}function y(){return{value:void 0,done:!0}}var f=Object.prototype,m=f.hasOwnProperty,E='function'==typeof Symbol?Symbol:{},x=E.iterator||'@@iterator',_=E.asyncIterator||'@@asyncIterator',S=E.toStringTag||'@@toStringTag',T='object'==typeof e,b=t.regeneratorRuntime;if(b)return void(T&&(e.exports=b));b=t.regeneratorRuntime=T?e.exports:{},b.wrap=r;var P='suspendedStart',O='suspendedYield',v='executing',I='completed',A={},R={};R[x]=function(){return this};var k=Object.getPrototypeOf,L=k&&k(k(h([])));L&&L!==f&&m.call(L,x)&&(R=L);var F=a.prototype=o.prototype=Object.create(R);l.prototype=F.constructor=a,a.constructor=l,a[S]=l.displayName='GeneratorFunction',b.isGeneratorFunction=function(e){var t='function'==typeof e&&e.constructor;return!!t&&(t===l||'GeneratorFunction'===(t.displayName||t.name))},b.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,a):(e.__proto__=a,!(S in e)&&(e[S]='GeneratorFunction')),e.prototype=Object.create(F),e},b.awrap=function(e){return{__await:e}},s(i.prototype),i.prototype[_]=function(){return this},b.AsyncIterator=i,b.async=function(e,t,n,o){var l=new i(r(e,t,n,o));return b.isGeneratorFunction(t)?l:l.next().then(function(e){return e.done?e.value:l.next()})},s(F),F[S]='Generator',F[x]=function(){return this},F.toString=function(){return'[object Generator]'},b.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},b.values=h,g.prototype={constructor:g,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method='next',this.arg=void 0,this.tryEntries.forEach(u),!e)for(var t in this)'t'===t.charAt(0)&&m.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if('throw'===t.type)throw t.arg;return this.rval},dispatchException:function(e){function t(t,n){return l.type='throw',l.arg=e,r.next=t,n&&(r.method='next',r.arg=void 0),!!n}if(this.done)throw e;for(var r=this,n=this.tryEntries.length-1;0<=n;--n){var o=this.tryEntries[n],l=o.completion;if('root'===o.tryLoc)return t('end');if(o.tryLoc<=this.prev){var a=m.call(o,'catchLoc'),s=m.call(o,'finallyLoc');if(a&&s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);}else if(!s)throw new Error('try statement without catch or finally');else if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}},abrupt:function(e,t){for(var r,n=this.tryEntries.length-1;0<=n;--n)if(r=this.tryEntries[n],r.tryLoc<=this.prev&&m.call(r,'finallyLoc')&&this.prev<r.finallyLoc){var o=r;break}o&&('break'===e||'continue'===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var l=o?o.completion:{};return l.type=e,l.arg=t,o?(this.method='next',this.next=o.finallyLoc,A):this.complete(l)},complete:function(e,t){if('throw'===e.type)throw e.arg;return'break'===e.type||'continue'===e.type?this.next=e.arg:'return'===e.type?(this.rval=this.arg=e.arg,this.method='return',this.next='end'):'normal'===e.type&&t&&(this.next=t),A},finish:function(e){for(var t,r=this.tryEntries.length-1;0<=r;--r)if(t=this.tryEntries[r],t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),u(t),A},catch:function(e){for(var t,r=this.tryEntries.length-1;0<=r;--r)if(t=this.tryEntries[r],t.tryLoc===e){var n=t.completion;if('throw'===n.type){var o=n.arg;u(t)}return o}throw new Error('illegal catch attempt')},delegateYield:function(e,t,r){return this.delegate={iterator:h(e),resultName:t,nextLoc:r},'next'===this.method&&(this.arg=void 0),A}}}(function(){return this}()||Function('return this')())},function(e,t,r){'use strict';function n(e,t){if(!(e instanceof t))throw new TypeError('Cannot call a class as a function')}Object.defineProperty(t,'__esModule',{value:!0});var o=function(){function e(e,t){for(var r,n=0;n<t.length;n++)r=t[n],r.enumerable=r.enumerable||!1,r.configurable=!0,'value'in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),l=r(210),a=function(e){return e&&e.__esModule?e:{default:e}}(l),s=r(98),i=function(){function e(t){var r=t.send,o=t.file,l=t.reqId;n(this,e),this.send=r,this.file=o,this.reqId=l;var s=o.buffer;this.checksum=(0,a.default)(Array.from(s)),this.size=s.length}return o(e,[{key:'requestUpload',value:function(){var e=this.file,t=e.documentType,r=e.documentFormat,n=e.documentId,o=e.expirationDate,l=e.lifetimeValid,a=e.pageType,s=e.buffer,i=Object.assign(this.file.passthrough||{},{document_upload:!0}),c={req_id:this.reqId,passthrough:i,document_upload:1,document_type:t,document_format:r.toUpperCase(),expiration_date:o,document_id:n,file_size:s.length,expected_checksum:this.checksum};a&&(c.page_type=a),l&&(c.lifetime_valid=l),this.send(JSON.stringify(c))}},{key:'handleMessage',value:function(e){var t=e.error,r=e.document_upload,n=e.passthrough;if(t)return{warning:t.code,message:t.message,passthrough:n};var o=r.checksum,l=r.size,a=r.upload_id,i=r.call_type;if(!o)return void this.startBinaryUpload(Object.assign({},this.file,{uploadId:a,callType:i}));if(l!==this.size)throw(0,s.createError)('SizeMismatch','File size does not match',n);if(o!==this.checksum)throw(0,s.createError)('ChecksumMismatch','Checksum does not match',n);return{document_upload:r,passthrough:n}}},{key:'startBinaryUpload',value:function(e){for(var t=this,r=(0,s.addMetadata)((0,s.generateChunks)(e.buffer,e),e),n=function(e){return t.send(e)},o=0;o<r.length;o++)n(r[o],o,r)}}]),e}();t.default=i},function(e,t,r){(function(){var t=r(211),n=r(99).utf8,o=r(212),s=r(99).bin,l=function(e,r){e.constructor==String?r&&'binary'===r.encoding?e=s.stringToBytes(e):e=n.stringToBytes(e):o(e)?e=Array.prototype.slice.call(e,0):!Array.isArray(e)&&(e=e.toString());for(var p=t.bytesToWords(e),u=8*e.length,g=1732584193,a=-271733879,h=-1732584194,c=271733878,d=0;d<p.length;d++)p[d]=16711935&(p[d]<<8|p[d]>>>24)|4278255360&(p[d]<<24|p[d]>>>8);p[u>>>5]|=128<<u%32,p[(u+64>>>9<<4)+14]=u;for(var i=l._ff,y=l._gg,f=l._hh,m=l._ii,d=0;d<p.length;d+=16){var E=g,x=a,_=h,S=c;g=i(g,a,h,c,p[d+0],7,-680876936),c=i(c,g,a,h,p[d+1],12,-389564586),h=i(h,c,g,a,p[d+2],17,606105819),a=i(a,h,c,g,p[d+3],22,-1044525330),g=i(g,a,h,c,p[d+4],7,-176418897),c=i(c,g,a,h,p[d+5],12,1200080426),h=i(h,c,g,a,p[d+6],17,-1473231341),a=i(a,h,c,g,p[d+7],22,-45705983),g=i(g,a,h,c,p[d+8],7,1770035416),c=i(c,g,a,h,p[d+9],12,-1958414417),h=i(h,c,g,a,p[d+10],17,-42063),a=i(a,h,c,g,p[d+11],22,-1990404162),g=i(g,a,h,c,p[d+12],7,1804603682),c=i(c,g,a,h,p[d+13],12,-40341101),h=i(h,c,g,a,p[d+14],17,-1502002290),a=i(a,h,c,g,p[d+15],22,1236535329),g=y(g,a,h,c,p[d+1],5,-165796510),c=y(c,g,a,h,p[d+6],9,-1069501632),h=y(h,c,g,a,p[d+11],14,643717713),a=y(a,h,c,g,p[d+0],20,-373897302),g=y(g,a,h,c,p[d+5],5,-701558691),c=y(c,g,a,h,p[d+10],9,38016083),h=y(h,c,g,a,p[d+15],14,-660478335),a=y(a,h,c,g,p[d+4],20,-405537848),g=y(g,a,h,c,p[d+9],5,568446438),c=y(c,g,a,h,p[d+14],9,-1019803690),h=y(h,c,g,a,p[d+3],14,-187363961),a=y(a,h,c,g,p[d+8],20,1163531501),g=y(g,a,h,c,p[d+13],5,-1444681467),c=y(c,g,a,h,p[d+2],9,-51403784),h=y(h,c,g,a,p[d+7],14,1735328473),a=y(a,h,c,g,p[d+12],20,-1926607734),g=f(g,a,h,c,p[d+5],4,-378558),c=f(c,g,a,h,p[d+8],11,-2022574463),h=f(h,c,g,a,p[d+11],16,1839030562),a=f(a,h,c,g,p[d+14],23,-35309556),g=f(g,a,h,c,p[d+1],4,-1530992060),c=f(c,g,a,h,p[d+4],11,1272893353),h=f(h,c,g,a,p[d+7],16,-155497632),a=f(a,h,c,g,p[d+10],23,-1094730640),g=f(g,a,h,c,p[d+13],4,681279174),c=f(c,g,a,h,p[d+0],11,-358537222),h=f(h,c,g,a,p[d+3],16,-722521979),a=f(a,h,c,g,p[d+6],23,76029189),g=f(g,a,h,c,p[d+9],4,-640364487),c=f(c,g,a,h,p[d+12],11,-421815835),h=f(h,c,g,a,p[d+15],16,530742520),a=f(a,h,c,g,p[d+2],23,-995338651),g=m(g,a,h,c,p[d+0],6,-198630844),c=m(c,g,a,h,p[d+7],10,1126891415),h=m(h,c,g,a,p[d+14],15,-1416354905),a=m(a,h,c,g,p[d+5],21,-57434055),g=m(g,a,h,c,p[d+12],6,1700485571),c=m(c,g,a,h,p[d+3],10,-1894986606),h=m(h,c,g,a,p[d+10],15,-1051523),a=m(a,h,c,g,p[d+1],21,-2054922799),g=m(g,a,h,c,p[d+8],6,1873313359),c=m(c,g,a,h,p[d+15],10,-30611744),h=m(h,c,g,a,p[d+6],15,-1560198380),a=m(a,h,c,g,p[d+13],21,1309151649),g=m(g,a,h,c,p[d+4],6,-145523070),c=m(c,g,a,h,p[d+11],10,-1120210379),h=m(h,c,g,a,p[d+2],15,718787259),a=m(a,h,c,g,p[d+9],21,-343485551),g=g+E>>>0,a=a+x>>>0,h=h+_>>>0,c=c+S>>>0}return t.endian([g,a,h,c])};l._ff=function(e,r,o,l,a,i,s){var t=e+(r&o|~r&l)+(a>>>0)+s;return(t<<i|t>>>32-i)+r},l._gg=function(e,r,o,l,a,i,s){var t=e+(r&l|o&~l)+(a>>>0)+s;return(t<<i|t>>>32-i)+r},l._hh=function(e,r,o,l,a,i,s){var t=e+(r^o^l)+(a>>>0)+s;return(t<<i|t>>>32-i)+r},l._ii=function(e,r,o,l,a,i,s){var t=e+(o^(r|~l))+(a>>>0)+s;return(t<<i|t>>>32-i)+r},l._blocksize=16,l._digestsize=16,e.exports=function(e,r){if(e===void 0||null===e)throw new Error('Illegal argument '+e);var n=t.wordsToBytes(l(e,r));return r&&r.asBytes?n:r&&r.asString?s.bytesToString(n):t.bytesToHex(n)}})()},function(e){(function(){var t='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',r={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&r.rotl(e,8)|4278255360&r.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=r.endian(e[t]);return e},randomBytes:function(e){for(var t=[];0<e;e--)t.push(p(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],r=0,n=0;r<e.length;r++,n+=8)t[n>>>5]|=e[r]<<24-n%32;return t},wordsToBytes:function(e){for(var t=[],r=0;r<32*e.length;r+=8)t.push(255&e[r>>>5]>>>24-r%32);return t},bytesToHex:function(e){for(var t=[],r=0;r<e.length;r++)t.push((e[r]>>>4).toString(16)),t.push((15&e[r]).toString(16));return t.join('')},hexToBytes:function(e){for(var t=[],r=0;r<e.length;r+=2)t.push(parseInt(e.substr(r,2),16));return t},bytesToBase64:function(e){for(var r,n=[],o=0;o<e.length;o+=3){r=e[o]<<16|e[o+1]<<8|e[o+2];for(var l=0;4>l;l++)8*o+6*l<=8*e.length?n.push(t.charAt(63&r>>>6*(3-l))):n.push('=')}return n.join('')},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\\\\/]/ig,'');for(var r=[],n=0,l=0;n<e.length;l=++n%4)0!=l&&r.push((t.indexOf(e.charAt(n-1))&o(2,-2*l+8)-1)<<2*l|t.indexOf(e.charAt(n))>>>6-2*l);return r}};e.exports=r})()},function(e){function t(e){return!!e.constructor&&'function'==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function r(e){return'function'==typeof e.readFloatLE&&'function'==typeof e.slice&&t(e.slice(0,0))}e.exports=function(e){return null!=e&&(t(e)||r(e)||!!e._isBuffer)}}])['default']});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///../../../node_modules/@binary-com/binary-document-uploader/DocumentUploader.js\\n\");\n\n/***/ }),\n\n/***/ \"./Components/file-uploader-container/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ Components_file_uploader_container)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n// EXTERNAL MODULE: ../../../node_modules/@binary-com/binary-document-uploader/DocumentUploader.js\\nvar DocumentUploader = __webpack_require__(\\\"../../../node_modules/@binary-com/binary-document-uploader/DocumentUploader.js\\\");\\nvar DocumentUploader_default = /*#__PURE__*/__webpack_require__.n(DocumentUploader);\\n;// CONCATENATED MODULE: ./Components/file-uploader-container/file-uploader.jsx\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \\\"undefined\\\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar UploadMessage = function UploadMessage() {\\n  var _React$useContext = external_react_default().useContext(shared_.PlatformContext),\\n      is_dashboard = _React$useContext.is_dashboard;\\n\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcCloudUpload\\\",\\n    className: \\\"dc-file-dropzone__message-icon\\\",\\n    size: 50\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"dc-file-dropzone__message-subtitle\\\"\\n  }, is_dashboard && (0,shared_.isMobile)() ? (0,translations_.localize)('Tap here to upload (JPEG  JPG  PNG  PDF  GIF)') : (0,translations_.localize)('Drop file (JPEG  JPG  PNG  PDF  GIF) or click here to upload')));\\n};\\n\\nvar fileReadErrorMessage = function fileReadErrorMessage(filename) {\\n  return (0,translations_.localize)('Unable to read file {{name}}', {\\n    name: filename\\n  });\\n};\\n\\nvar FileUploader = /*#__PURE__*/external_react_default().forwardRef(function (_ref, ref) {\\n  var onFileDrop = _ref.onFileDrop,\\n      getSocket = _ref.getSocket;\\n\\n  var _useStateCallback = (0,components_.useStateCallback)({\\n    files: [],\\n    error_message: null\\n  }),\\n      _useStateCallback2 = _slicedToArray(_useStateCallback, 2),\\n      document_file = _useStateCallback2[0],\\n      setDocumentFile = _useStateCallback2[1];\\n\\n  var handleAcceptedFiles = function handleAcceptedFiles(files) {\\n    if (files.length > 0) {\\n      setDocumentFile({\\n        files: files,\\n        error_message: null\\n      }, function (file) {\\n        onFileDrop(file);\\n      });\\n    }\\n  };\\n\\n  var handleRejectedFiles = function handleRejectedFiles(files) {\\n    var is_file_too_large = files.length > 0 && files[0].file.size > shared_.max_document_size;\\n    var supported_files = files.filter(function (each_file) {\\n      return (0,shared_.getSupportedFiles)(each_file.file.name);\\n    });\\n    var error_message = is_file_too_large && supported_files.length > 0 ? (0,translations_.localize)('File size should be 8MB or less') : (0,translations_.localize)('File uploaded is not supported');\\n    setDocumentFile({\\n      files: files,\\n      error_message: error_message\\n    }, function (file) {\\n      return onFileDrop(file);\\n    });\\n  };\\n\\n  var removeFile = function removeFile() {\\n    setDocumentFile({\\n      files: [],\\n      error_message: null\\n    }, function (file) {\\n      return onFileDrop(file);\\n    });\\n  };\\n\\n  var upload = function upload() {\\n    if (!!document_file.error_message || document_file.files.length < 1) return 0; // File uploader instance connected to binary_socket\\n\\n    var uploader = new (DocumentUploader_default())({\\n      connection: getSocket()\\n    });\\n    var is_any_file_error = false;\\n    return new Promise(function (resolve, reject) {\\n      (0,shared_.compressImageFiles)(document_file.files).then(function (files_to_process) {\\n        (0,shared_.readFiles)(files_to_process, fileReadErrorMessage).then(function (processed_files) {\\n          processed_files.forEach(function (file) {\\n            if (file.message) {\\n              is_any_file_error = true;\\n              reject(file);\\n            }\\n          });\\n          var total_to_upload = processed_files.length;\\n\\n          if (is_any_file_error || !total_to_upload) {\\n            onFileDrop(undefined);\\n            return; // don't start submitting files until all front-end validation checks pass\\n          } // send files\\n\\n\\n          var uploader_promise = uploader.upload(processed_files[0]).then(function (api_response) {\\n            return api_response;\\n          });\\n          resolve(uploader_promise);\\n        });\\n      });\\n    });\\n  };\\n\\n  external_react_default().useImperativeHandle(ref, function () {\\n    return {\\n      upload: upload\\n    };\\n  });\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.FileDropzone, {\\n    accept: shared_.supported_filetypes,\\n    error_message: (0,translations_.localize)('Please upload supported file type.'),\\n    filename_limit: 26,\\n    hover_message: (0,translations_.localize)('Drop files here..'),\\n    max_size: shared_.max_document_size,\\n    message: /*#__PURE__*/external_react_default().createElement(UploadMessage, null),\\n    multiple: false,\\n    onDropAccepted: handleAcceptedFiles,\\n    onDropRejected: handleRejectedFiles,\\n    validation_error_message: document_file.error_message,\\n    value: document_file.files\\n  }), (document_file.files.length > 0 || !!document_file.error_message) && /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-remove-btn-container\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcCloseCircle\\\",\\n    className: classnames_default()('account-poa__upload-remove-btn', {\\n      'account-poa__upload-remove-btn--error': !!document_file.error_message\\n    }),\\n    onClick: removeFile,\\n    color: \\\"secondary\\\"\\n  })));\\n});\\nFileUploader.propTypes = {\\n  onFileDrop: (prop_types_default()).func,\\n  getSocket: (prop_types_default()).func\\n};\\n/* harmony default export */ const file_uploader = (FileUploader);\\n;// CONCATENATED MODULE: ./Components/file-uploader-container/file-uploader-container.jsx\\n\\n\\n\\n\\n\\n\\n\\n\\nvar FileProperties = function FileProperties() {\\n  var properties = [{\\n    name: 'size',\\n    icon: 'IcPoaFileEightMb',\\n    text: (0,translations_.localize)('Less than 8MB')\\n  }, {\\n    name: 'format',\\n    icon: 'IcPoaFileFormat',\\n    text: (0,translations_.localize)('JPEG  JPG  PNG  PDF  GIF')\\n  }, {\\n    name: 'time',\\n    icon: 'IcPoaFileTime',\\n    text: (0,translations_.localize)('1 - 6 months old')\\n  }, {\\n    name: 'clear',\\n    icon: 'IcPoaFileClear',\\n    text: (0,translations_.localize)('A clear colour photo or scanned image')\\n  }, {\\n    name: 'with-address',\\n    icon: 'IcPoaFileWithAddress',\\n    text: (0,translations_.localize)('Issued under your name with your current address')\\n  }];\\n  return /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-property\\\"\\n  }, properties.map(function (item) {\\n    return /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n      className: \\\"account-poa__upload-property-item account-poa__upload-property-\\\".concat(item.name),\\n      key: item.name\\n    }, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n      className: \\\"account-poa__upload-property-wrapper\\\"\\n    }, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n      icon: item.icon,\\n      className: \\\"account-poa__upload-icon-dashboard\\\",\\n      size: 40\\n    }), /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n      size: \\\"xxxs\\\",\\n      weight: \\\"bold\\\",\\n      align: \\\"center\\\"\\n    }, item.text)));\\n  }));\\n};\\n\\nvar FileUploaderContainer = function FileUploaderContainer(_ref) {\\n  var _ref$is_description_e = _ref.is_description_enabled,\\n      is_description_enabled = _ref$is_description_e === void 0 ? true : _ref$is_description_e,\\n      getSocket = _ref.getSocket,\\n      onFileDrop = _ref.onFileDrop,\\n      onRef = _ref.onRef;\\n\\n  var _React$useContext = external_react_default().useContext(shared_.PlatformContext),\\n      is_dashboard = _React$useContext.is_dashboard;\\n\\n  var ref = external_react_default().useRef();\\n  var getSocketFunc = getSocket !== null && getSocket !== void 0 ? getSocket : shared_.WS.getSocket;\\n  external_react_default().useEffect(function () {\\n    if (ref) {\\n      if (typeof onRef === 'function') onRef(ref);\\n    }\\n\\n    return function () {\\n      return onRef(undefined);\\n    };\\n  }, [onRef, ref]);\\n\\n  if (is_dashboard && (0,shared_.isDesktop)()) {\\n    return /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n      className: \\\"account-poa__upload-section account-poa__upload-section-dashboard\\\"\\n    }, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n      className: \\\"account-poa__upload-file account-poa__upload-file-dashboard\\\"\\n    }, /*#__PURE__*/external_react_default().createElement(FileProperties, null), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n      className: \\\"account-poa__upload-file-zone\\\"\\n    }, /*#__PURE__*/external_react_default().createElement(file_uploader, {\\n      getSocket: getSocketFunc,\\n      ref: ref,\\n      onFileDrop: onFileDrop\\n    }))));\\n  }\\n\\n  return /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-section\\\"\\n  }, is_description_enabled && /*#__PURE__*/external_react_default().createElement(\\\"ul\\\", {\\n    className: \\\"account-poa__upload-list\\\"\\n  }, !is_dashboard && /*#__PURE__*/external_react_default().createElement(\\\"li\\\", {\\n    className: \\\"account-poa__upload-box\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcUtility\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 20\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-item\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"A recent utility bill (e.g. electricity, water, gas, phone or internet)\\\"\\n  }))), /*#__PURE__*/external_react_default().createElement(\\\"li\\\", {\\n    className: \\\"account-poa__upload-box\\\"\\n  }, is_dashboard ? /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcBankDashboard\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 24\\n  }) : /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcBank\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 20\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-item\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"A recent bank statement or government-issued letter with your name and address\\\"\\n  }))), /*#__PURE__*/external_react_default().createElement(\\\"li\\\", {\\n    className: \\\"account-poa__upload-box\\\"\\n  }, is_dashboard ? /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcPoaFileWithAddress\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 24\\n  }) : /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcUser\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 20\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-item\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Issued under your name with your current address\\\"\\n  }))), /*#__PURE__*/external_react_default().createElement(\\\"li\\\", {\\n    className: \\\"account-poa__upload-box\\\"\\n  }, is_dashboard ? /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcPoaFileEightMb\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 24\\n  }) : /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcLessThanEight\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 20\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-item\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Less than 8MB\\\"\\n  }))), /*#__PURE__*/external_react_default().createElement(\\\"li\\\", {\\n    className: \\\"account-poa__upload-box\\\"\\n  }, is_dashboard ? /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcPoaFileTime\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 24\\n  }) : /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcClock\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 20\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-item\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"1 - 6 months old\\\"\\n  }))), /*#__PURE__*/external_react_default().createElement(\\\"li\\\", {\\n    className: \\\"account-poa__upload-box\\\"\\n  }, is_dashboard ? /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcPoaFileClear\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 24\\n  }) : /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcEye\\\",\\n    className: \\\"account-poa__upload-icon\\\",\\n    size: 20\\n  }), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-poa__upload-item\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"A clear colour photo or scanned image\\\"\\n  })))), /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: classnames_default()('account-poa__upload-file', {\\n      'account-poa__upload-file--dashboard': (0,shared_.isDesktop)() && is_dashboard\\n    })\\n  }, /*#__PURE__*/external_react_default().createElement(file_uploader, {\\n    getSocket: getSocketFunc,\\n    ref: ref,\\n    onFileDrop: onFileDrop\\n  })));\\n};\\n\\nFileUploaderContainer.propTypes = {\\n  is_description_enabled: (prop_types_default()).bool,\\n  getSocket: (prop_types_default()).func,\\n  onFileDrop: (prop_types_default()).func,\\n  onRef: (prop_types_default()).func\\n};\\n/* harmony default export */ const file_uploader_container = (FileUploaderContainer);\\n;// CONCATENATED MODULE: ./Components/file-uploader-container/index.js\\n\\n/* harmony default export */ const Components_file_uploader_container = (file_uploader_container);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Components/file-uploader-container/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/classnames/index.js\":\n/***/ ((module, exports) => {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n  Copyright (c) 2017 Jed Watson.\\n  Licensed under the MIT License (MIT), see\\n  http://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\n\\tfunction classNames () {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg) && arg.length) {\\n\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcz8zZGNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQSxVQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/factoryWithThrowingShims.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = __webpack_require__(\\\"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\\");\\n\\nfunction emptyFunction() {}\\nfunction emptyFunctionWithReset() {}\\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\\n\\nmodule.exports = function() {\\n  function shim(props, propName, componentName, location, propFullName, secret) {\\n    if (secret === ReactPropTypesSecret) {\\n      // It is still safe when called from React.\\n      return;\\n    }\\n    var err = new Error(\\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\\n      'Use PropTypes.checkPropTypes() to call them. ' +\\n      'Read more at http://fb.me/use-check-prop-types'\\n    );\\n    err.name = 'Invariant Violation';\\n    throw err;\\n  };\\n  shim.isRequired = shim;\\n  function getShim() {\\n    return shim;\\n  };\\n  // Important!\\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\\n  var ReactPropTypes = {\\n    array: shim,\\n    bool: shim,\\n    func: shim,\\n    number: shim,\\n    object: shim,\\n    string: shim,\\n    symbol: shim,\\n\\n    any: shim,\\n    arrayOf: getShim,\\n    element: shim,\\n    elementType: shim,\\n    instanceOf: getShim,\\n    node: shim,\\n    objectOf: getShim,\\n    oneOf: getShim,\\n    oneOfType: getShim,\\n    shape: getShim,\\n    exact: getShim,\\n\\n    checkPropTypes: emptyFunctionWithReset,\\n    resetWarningCache: emptyFunction\\n  };\\n\\n  ReactPropTypes.PropTypes = ReactPropTypes;\\n\\n  return ReactPropTypes;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzP2RjMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/factoryWithThrowingShims.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nif (false) { var throwOnDirectAccess, ReactIs; } else {\\n  // By explicitly using `prop-types` you are opting into new production behavior.\\n  // http://fb.me/prop-types-in-prod\\n  module.exports = __webpack_require__(\\\"../../../node_modules/prop-types/factoryWithThrowingShims.js\\\")();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcz83MGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\\n\\nmodule.exports = ReactPropTypesSecret;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzP2FkODMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_237143__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_237143__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_237143__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_237143__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_237143__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_237143__.o(definition, key) && !__nested_webpack_require_237143__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_237143__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_237143__(\"./Components/file-uploader-container/index.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vYWNjb3VudC9kaXN0L2FjY291bnQvanMvZmlsZS11cGxvYWRlci1jb250YWluZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vYWNjb3VudC9kaXN0L2FjY291bnQvanMvZmlsZS11cGxvYWRlci1jb250YWluZXIuanM/YWQwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQVRURU5USU9OOiBBbiBcImV2YWwtc291cmNlLW1hcFwiIGRldnRvb2wgaGFzIGJlZW4gdXNlZC5cbiAqIFRoaXMgZGV2dG9vbCBpcyBuZWl0aGVyIG1hZGUgZm9yIHByb2R1Y3Rpb24gbm9yIGZvciByZWFkYWJsZSBvdXRwdXQgZmlsZXMuXG4gKiBJdCB1c2VzIFwiZXZhbCgpXCIgY2FsbHMgdG8gY3JlYXRlIGEgc2VwYXJhdGUgc291cmNlIGZpbGUgd2l0aCBhdHRhY2hlZCBTb3VyY2VNYXBzIGluIHRoZSBicm93c2VyIGRldnRvb2xzLlxuICogSWYgeW91IGFyZSB0cnlpbmcgdG8gcmVhZCB0aGUgb3V0cHV0IGZpbGUsIHNlbGVjdCBhIGRpZmZlcmVudCBkZXZ0b29sIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vZGV2dG9vbC8pXG4gKiBvciBkaXNhYmxlIHRoZSBkZWZhdWx0IGRldnRvb2wgd2l0aCBcImRldnRvb2w6IGZhbHNlXCIuXG4gKiBJZiB5b3UgYXJlIGxvb2tpbmcgZm9yIHByb2R1Y3Rpb24tcmVhZHkgb3V0cHV0IGZpbGVzLCBzZWUgbW9kZTogXCJwcm9kdWN0aW9uXCIgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9tb2RlLykuXG4gKi9cbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIkBkZXJpdi9jb21wb25lbnRzXCIpLCByZXF1aXJlKFwiQGRlcml2L3NoYXJlZFwiKSwgcmVxdWlyZShcIkBkZXJpdi90cmFuc2xhdGlvbnNcIiksIHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJAZGVyaXYvY29tcG9uZW50c1wiLCBcIkBkZXJpdi9zaGFyZWRcIiwgXCJAZGVyaXYvdHJhbnNsYXRpb25zXCIsIFwicmVhY3RcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQGRlcml2L2FjY291bnRcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJAZGVyaXYvY29tcG9uZW50c1wiKSwgcmVxdWlyZShcIkBkZXJpdi9zaGFyZWRcIiksIHJlcXVpcmUoXCJAZGVyaXYvdHJhbnNsYXRpb25zXCIpLCByZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkBkZXJpdi9hY2NvdW50XCJdID0gZmFjdG9yeShyb290W1wiQGRlcml2L2NvbXBvbmVudHNcIl0sIHJvb3RbXCJAZGVyaXYvc2hhcmVkXCJdLCByb290W1wiQGRlcml2L3RyYW5zbGF0aW9uc1wiXSwgcm9vdFtcInJlYWN0XCJdKTtcbn0pKHNlbGYsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X2NvbXBvbmVudHNfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fZGVyaXZfc2hhcmVkX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3RyYW5zbGF0aW9uc19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlYWN0X18pIHtcbnJldHVybiAvKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJpbmFyeS1jb20vYmluYXJ5LWRvY3VtZW50LXVwbG9hZGVyL0RvY3VtZW50VXBsb2FkZXIuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxuZXZhbChcIihmdW5jdGlvbihlLHQpeyB0cnVlP21vZHVsZS5leHBvcnRzPXQoKTowfSkodGhpcyxmdW5jdGlvbigpe3ZhciBlPU1hdGguc3FydCx0PVN0cmluZy5mcm9tQ2hhckNvZGUscj1NYXRoLkxOMixuPU1hdGgubG9nLG89TWF0aC5wb3csbD1NYXRoLmFicyxhPU1hdGguZXhwLHM9TWF0aC5leHBtMSxpPU1hdGgubWF4LGM9TWF0aC5jZWlsLHA9TWF0aC5mbG9vcixkPU1hdGgubWluO3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KG4pe2lmKHJbbl0pcmV0dXJuIHJbbl0uZXhwb3J0czt2YXIgbz1yW25dPXtpOm4sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtuXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyx0KSxvLmw9ITAsby5leHBvcnRzfXZhciByPXt9O3JldHVybiB0Lm09ZSx0LmM9cix0LmQ9ZnVuY3Rpb24oZSxyLG4pe3QubyhlLHIpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6bn0pfSx0Lm49ZnVuY3Rpb24oZSl7dmFyIHI9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGVbJ2RlZmF1bHQnXX06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIHQuZChyLCdhJyxyKSxyfSx0Lm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LHQucD0nJyx0KHQucz0xMDApfShbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMyksbz1yKDIwKSxsPXIoOSksYT1yKDE3KSxzPXIoMTQpLGk9J3Byb3RvdHlwZScsYz1mdW5jdGlvbihlLHQscil7dmFyIHAsZCx1LGcsaD1lJmMuRix5PWUmYy5HLGY9ZSZjLlMsbT1lJmMuUCxFPWUmYy5CLHg9eT9uOmY/blt0XXx8KG5bdF09e30pOihuW3RdfHx7fSlbaV0sXz15P286b1t0XXx8KG9bdF09e30pLFM9X1tpXXx8KF9baV09e30pO2ZvcihwIGluIHkmJihyPXQpLHIpZD0haCYmeCYmdm9pZCAwIT09eFtwXSx1PShkP3g6cilbcF0sZz1FJiZkP3ModSxuKTptJiYnZnVuY3Rpb24nPT10eXBlb2YgdT9zKEZ1bmN0aW9uLmNhbGwsdSk6dSx4JiZhKHgscCx1LGUmYy5VKSxfW3BdIT11JiZsKF8scCxnKSxtJiZTW3BdIT11JiYoU1twXT11KX07bi5jb3JlPW8sYy5GPTEsYy5HPTIsYy5TPTQsYy5QPTgsYy5CPTE2LGMuVz0zMixjLlU9NjQsYy5SPTEyOCxlLmV4cG9ydHM9Y30sZnVuY3Rpb24oZSl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybidvYmplY3QnPT10eXBlb2YgZT9udWxsIT09ZTonZnVuY3Rpb24nPT10eXBlb2YgZX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighbihlKSl0aHJvdyBUeXBlRXJyb3IoZSsnIGlzIG5vdCBhbiBvYmplY3QhJyk7cmV0dXJuIGV9fSxmdW5jdGlvbihlKXt2YXIgdD1lLmV4cG9ydHM9J3VuZGVmaW5lZCchPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzondW5kZWZpbmVkJyE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7J251bWJlcic9PXR5cGVvZiBfX2cmJihfX2c9dCl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQxKSgnd2tzJyksbz1yKDIyKSxsPXIoMykuU3ltYm9sLGE9J2Z1bmN0aW9uJz09dHlwZW9mIGwscz1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV18fChuW2VdPWEmJmxbZV18fChhP2w6bykoJ1N5bWJvbC4nK2UpKX07cy5zdG9yZT1ufSxmdW5jdGlvbihlKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiEhZSgpfWNhdGNoKHQpe3JldHVybiEwfX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE4KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIDA8ZT9kKG4oZSksOTAwNzE5OTI1NDc0MDk5MSk6MH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDIpLG89cig3MCksbD1yKDM2KSxhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt0LmY9cig4KT9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdD1sKHQsITApLG4ociksbyl0cnl7cmV0dXJuIGEoZSx0LHIpfWNhdGNoKHQpe31pZignZ2V0J2luIHJ8fCdzZXQnaW4gcil0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO3JldHVybid2YWx1ZSdpbiByJiYoZVt0XT1yLnZhbHVlKSxlfX0sZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz0hcig1KShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sJ2EnLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDcpLG89cigyMSk7ZS5leHBvcnRzPXIoOCk/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLmYoZSx0LG8oMSxyKSl9OmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZVt0XT1yLGV9fSxmdW5jdGlvbihlKXt2YXIgdD17fS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKGUscil9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig1NCksbz1yKDI1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4obyhlKSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigyNSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QobihlKSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxvPXIoMjApLGw9cig1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0oby5PYmplY3R8fHt9KVtlXXx8T2JqZWN0W2VdLGE9e307YVtlXT10KHIpLG4obi5TK24uRipsKGZ1bmN0aW9uKCl7cigxKX0pLCdPYmplY3QnLGEpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjQpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7cmV0dXJuKG4oZSksdm9pZCAwPT09dCk/ZToxPT09cj9mdW5jdGlvbihyKXtyZXR1cm4gZS5jYWxsKHQscil9OjI9PT1yP2Z1bmN0aW9uKHIsbil7cmV0dXJuIGUuY2FsbCh0LHIsbil9OjM9PT1yP2Z1bmN0aW9uKHIsbixvKXtyZXR1cm4gZS5jYWxsKHQscixuLG8pfTpmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHQsYXJndW1lbnRzKX19fSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO2lmKHIoOCkpe3ZhciBuPXIoMjMpLG89cigzKSxsPXIoNSksYT1yKDApLHM9cig1MyksaT1yKDcxKSxjPXIoMTQpLGQ9cigyOSksdT1yKDIxKSxnPXIoOSksaD1yKDI4KSx5PXIoMTgpLGY9cig2KSxtPXIoNzIpLEU9cigzMSkseD1yKDM2KSxfPXIoMTApLFM9cig0NCksVD1yKDEpLGI9cigxMiksUD1yKDU5KSx2PXIoMzgpLEk9cigzNCksQT1yKDM3KS5mLFI9cig2MCksTz1yKDIyKSxrPXIoNCksTD1yKDM5KSxGPXIoNTUpLE49cig0MiksTT1yKDYxKSx3PXIoMzMpLEQ9cig0NSksQz1yKDQzKSxqPXIoNTgpLFk9cig3OCksQj1yKDcpLEc9cigxNiksVT1CLmYsSD1HLmYsVz1vLlJhbmdlRXJyb3IsVj1vLlR5cGVFcnJvcix6PW8uVWludDhBcnJheSwkPSdBcnJheUJ1ZmZlcicsSz0nU2hhcmVkJyskLHE9J0JZVEVTX1BFUl9FTEVNRU5UJyxYPSdwcm90b3R5cGUnLFo9QXJyYXlbWF0sSj1pLkFycmF5QnVmZmVyLFE9aS5EYXRhVmlldyxlZT1MKDApLHRlPUwoMikscmU9TCgzKSxuZT1MKDQpLG9lPUwoNSksbGU9TCg2KSxhZT1GKCEwKSxzZT1GKCExKSxpZT1NLnZhbHVlcyxjZT1NLmtleXMscGU9TS5lbnRyaWVzLGRlPVoubGFzdEluZGV4T2YsdWU9Wi5yZWR1Y2UsZ2U9Wi5yZWR1Y2VSaWdodCxoZT1aLmpvaW4seWU9Wi5zb3J0LGZlPVouc2xpY2UsbWU9Wi50b1N0cmluZyxFZT1aLnRvTG9jYWxlU3RyaW5nLHhlPWsoJ2l0ZXJhdG9yJyksX2U9aygndG9TdHJpbmdUYWcnKSxTZT1PKCd0eXBlZF9jb25zdHJ1Y3RvcicpLFRlPU8oJ2RlZl9jb25zdHJ1Y3RvcicpLGJlPXMuQ09OU1RSLFBlPXMuVFlQRUQsT2U9cy5WSUVXLHZlPSdXcm9uZyBsZW5ndGghJyxJZT1MKDEsZnVuY3Rpb24oZSx0KXtyZXR1cm4gRmUoTihlLGVbVGVdKSx0KX0pLEFlPWwoZnVuY3Rpb24oKXtyZXR1cm4gMT09PW5ldyB6KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF19KSxSZT0hIXomJiEheltYXS5zZXQmJmwoZnVuY3Rpb24oKXtuZXcgeigxKS5zZXQoe30pfSksa2U9ZnVuY3Rpb24oZSx0KXt2YXIgcj15KGUpO2lmKDA+cnx8ciV0KXRocm93IFcoJ1dyb25nIG9mZnNldCEnKTtyZXR1cm4gcn0sTGU9ZnVuY3Rpb24oZSl7aWYoVChlKSYmUGUgaW4gZSlyZXR1cm4gZTt0aHJvdyBWKGUrJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKX0sRmU9ZnVuY3Rpb24oZSx0KXtpZighKFQoZSkmJlNlIGluIGUpKXRocm93IFYoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO3JldHVybiBuZXcgZSh0KX0sTmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTWUoTihlLGVbVGVdKSx0KX0sTWU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MCxuPXQubGVuZ3RoLG89RmUoZSxuKTtuPnI7KW9bcl09dFtyKytdO3JldHVybiBvfSx3ZT1mdW5jdGlvbihlLHQscil7VShlLHQse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kW3JdfX0pfSxEZT1mdW5jdGlvbihlKXt2YXIgdCxyLG4sbyxsLGEscz1iKGUpLGk9YXJndW1lbnRzLmxlbmd0aCxwPTE8aT9hcmd1bWVudHNbMV06dm9pZCAwLGQ9cCE9PXZvaWQgMCx1PVIocyk7aWYodSE9dm9pZCAwJiYhUCh1KSl7Zm9yKGE9dS5jYWxsKHMpLG49W10sdD0wOyEobD1hLm5leHQoKSkuZG9uZTt0Kyspbi5wdXNoKGwudmFsdWUpO3M9bn1mb3IoZCYmMjxpJiYocD1jKHAsYXJndW1lbnRzWzJdLDIpKSx0PTAscj1mKHMubGVuZ3RoKSxvPUZlKHRoaXMscik7cj50O3QrKylvW3RdPWQ/cChzW3RdLHQpOnNbdF07cmV0dXJuIG99LENlPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPTAsdD1hcmd1bWVudHMubGVuZ3RoLHI9RmUodGhpcyx0KTt0PmU7KXJbZV09YXJndW1lbnRzW2UrK107cmV0dXJuIHJ9LGplPSEheiYmbChmdW5jdGlvbigpe0VlLmNhbGwobmV3IHooMSkpfSksWWU9ZnVuY3Rpb24oKXtyZXR1cm4gRWUuYXBwbHkoamU/ZmUuY2FsbChMZSh0aGlzKSk6TGUodGhpcyksYXJndW1lbnRzKX0sQmU9e2NvcHlXaXRoaW46ZnVuY3Rpb24oZSx0KXtyZXR1cm4gWS5jYWxsKExlKHRoaXMpLGUsdCwyPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzJdOnZvaWQgMCl9LGV2ZXJ5OmZ1bmN0aW9uKGUpe3JldHVybiBuZShMZSh0aGlzKSxlLDE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwKX0sZmlsbDpmdW5jdGlvbigpe3JldHVybiBqLmFwcGx5KExlKHRoaXMpLGFyZ3VtZW50cyl9LGZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gTmUodGhpcyx0ZShMZSh0aGlzKSxlLDE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwKSl9LGZpbmQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG9lKExlKHRoaXMpLGUsMTxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxmaW5kSW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGxlKExlKHRoaXMpLGUsMTxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxmb3JFYWNoOmZ1bmN0aW9uKGUpe2VlKExlKHRoaXMpLGUsMTxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxpbmRleE9mOmZ1bmN0aW9uKGUpe3JldHVybiBzZShMZSh0aGlzKSxlLDE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwKX0saW5jbHVkZXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGFlKExlKHRoaXMpLGUsMTxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxqb2luOmZ1bmN0aW9uKCl7cmV0dXJuIGhlLmFwcGx5KExlKHRoaXMpLGFyZ3VtZW50cyl9LGxhc3RJbmRleE9mOmZ1bmN0aW9uKCl7cmV0dXJuIGRlLmFwcGx5KExlKHRoaXMpLGFyZ3VtZW50cyl9LG1hcDpmdW5jdGlvbihlKXtyZXR1cm4gSWUoTGUodGhpcyksZSwxPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzFdOnZvaWQgMCl9LHJlZHVjZTpmdW5jdGlvbigpe3JldHVybiB1ZS5hcHBseShMZSh0aGlzKSxhcmd1bWVudHMpfSxyZWR1Y2VSaWdodDpmdW5jdGlvbigpe3JldHVybiBnZS5hcHBseShMZSh0aGlzKSxhcmd1bWVudHMpfSxyZXZlcnNlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9dGhpcyxyPUxlKHQpLmxlbmd0aCxuPXAoci8yKSxvPTA7bzxuOyllPXRbb10sdFtvKytdPXRbLS1yXSx0W3JdPWU7cmV0dXJuIHR9LHNvbWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHJlKExlKHRoaXMpLGUsMTxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxzb3J0OmZ1bmN0aW9uKGUpe3JldHVybiB5ZS5jYWxsKExlKHRoaXMpLGUpfSxzdWJhcnJheTpmdW5jdGlvbihlLHQpe3ZhciByPUxlKHRoaXMpLG49ci5sZW5ndGgsbz1FKGUsbik7cmV0dXJuIG5ldyhOKHIscltUZV0pKShyLmJ1ZmZlcixyLmJ5dGVPZmZzZXQrbypyLkJZVEVTX1BFUl9FTEVNRU5ULGYoKHQ9PT12b2lkIDA/bjpFKHQsbikpLW8pKX19LEdlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE5lKHRoaXMsZmUuY2FsbChMZSh0aGlzKSxlLHQpKX0sVWU9ZnVuY3Rpb24oZSl7TGUodGhpcyk7dmFyIHQ9a2UoYXJndW1lbnRzWzFdLDEpLHI9dGhpcy5sZW5ndGgsbj1iKGUpLG89ZihuLmxlbmd0aCksbD0wO2lmKG8rdD5yKXRocm93IFcodmUpO2Zvcig7bDxvOyl0aGlzW3QrbF09bltsKytdfSxIZT17ZW50cmllczpmdW5jdGlvbigpe3JldHVybiBwZS5jYWxsKExlKHRoaXMpKX0sa2V5czpmdW5jdGlvbigpe3JldHVybiBjZS5jYWxsKExlKHRoaXMpKX0sdmFsdWVzOmZ1bmN0aW9uKCl7cmV0dXJuIGllLmNhbGwoTGUodGhpcykpfX0sV2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gVChlKSYmZVtQZV0mJidzeW1ib2wnIT10eXBlb2YgdCYmdCBpbiBlJiYrdCsnJz09dCsnJ30sVmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gV2UoZSx0PXgodCwhMCkpP3UoMixlW3RdKTpIKGUsdCl9LHplPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gV2UoZSx0PXgodCwhMCkpJiZUKHIpJiZfKHIsJ3ZhbHVlJykmJiFfKHIsJ2dldCcpJiYhXyhyLCdzZXQnKSYmIXIuY29uZmlndXJhYmxlJiYoIV8ociwnd3JpdGFibGUnKXx8ci53cml0YWJsZSkmJighXyhyLCdlbnVtZXJhYmxlJyl8fHIuZW51bWVyYWJsZSk/KGVbdF09ci52YWx1ZSxlKTpVKGUsdCxyKX07YmV8fChHLmY9VmUsQi5mPXplKSxhKGEuUythLkYqIWJlLCdPYmplY3QnLHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6VmUsZGVmaW5lUHJvcGVydHk6emV9KSxsKGZ1bmN0aW9uKCl7bWUuY2FsbCh7fSl9KSYmKG1lPUVlPWZ1bmN0aW9uKCl7cmV0dXJuIGhlLmNhbGwodGhpcyl9KTt2YXIgJGU9aCh7fSxCZSk7aCgkZSxIZSksZygkZSx4ZSxIZS52YWx1ZXMpLGgoJGUse3NsaWNlOkdlLHNldDpVZSxjb25zdHJ1Y3RvcjpmdW5jdGlvbigpe30sdG9TdHJpbmc6bWUsdG9Mb2NhbGVTdHJpbmc6WWV9KSx3ZSgkZSwnYnVmZmVyJywnYicpLHdlKCRlLCdieXRlT2Zmc2V0JywnbycpLHdlKCRlLCdieXRlTGVuZ3RoJywnbCcpLHdlKCRlLCdsZW5ndGgnLCdlJyksVSgkZSxfZSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbUGVdfX0pLGUuZXhwb3J0cz1mdW5jdGlvbihlLHQscixpKXtpPSEhaTt2YXIgYz1lKyhpPydDbGFtcGVkJzonJykrJ0FycmF5JyxwPW9bY10sdT1wfHx7fSxoPXAmJkkocCkseT0hcHx8IXMuQUJWLEU9e30seD1wJiZwW1hdLF89ZnVuY3Rpb24ocixuKXt2YXIgbz1yLl9kO3JldHVybiBvLnZbJ2dldCcrZV0obip0K28ubyxBZSl9LGI9ZnVuY3Rpb24ocixuLG8pe3ZhciBsPXIuX2Q7aSYmKG89MD4obz1NYXRoLnJvdW5kKG8pKT8wOjI1NTxvPzI1NToyNTUmbyksbC52WydzZXQnK2VdKG4qdCtsLm8sbyxBZSl9LFA9ZnVuY3Rpb24oZSx0KXtVKGUsdCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF8odGhpcyx0KX0sc2V0OmZ1bmN0aW9uKGUpe3JldHVybiBiKHRoaXMsdCxlKX0sZW51bWVyYWJsZTohMH0pfTt5PyhwPXIoZnVuY3Rpb24oZSxyLG4sbyl7ZChlLHAsYywnX2QnKTt2YXIgbCxhLHMsaSx1PTAsaD0wO2lmKCFUKHIpKXM9bShyKSxhPXMqdCxsPW5ldyBKKGEpO2Vsc2UgaWYociBpbnN0YW5jZW9mIEp8fChpPVMocikpPT0kfHxpPT1LKXtsPXIsaD1rZShuLHQpO3ZhciB5PXIuYnl0ZUxlbmd0aDtpZih2b2lkIDA9PT1vKXtpZih5JXQpdGhyb3cgVyh2ZSk7aWYoYT15LWgsMD5hKXRocm93IFcodmUpfWVsc2UgaWYoYT1mKG8pKnQsYStoPnkpdGhyb3cgVyh2ZSk7cz1hL3R9ZWxzZSByZXR1cm4gUGUgaW4gcj9NZShwLHIpOkRlLmNhbGwocCxyKTtmb3IoZyhlLCdfZCcse2I6bCxvOmgsbDphLGU6cyx2Om5ldyBRKGwpfSk7dTxzOylQKGUsdSsrKX0pLHg9cFtYXT12KCRlKSxnKHgsJ2NvbnN0cnVjdG9yJyxwKSk6KCFsKGZ1bmN0aW9uKCl7cCgxKX0pfHwhbChmdW5jdGlvbigpe25ldyBwKC0xKX0pfHwhRChmdW5jdGlvbihlKXtuZXcgcCxuZXcgcChudWxsKSxuZXcgcCgxLjUpLG5ldyBwKGUpfSwhMCkpJiYocD1yKGZ1bmN0aW9uKGUscixuLG8pe2QoZSxwLGMpO3ZhciBsO3JldHVybiBUKHIpP3IgaW5zdGFuY2VvZiBKfHwobD1TKHIpKT09JHx8bD09Sz92b2lkIDA9PT1vP3ZvaWQgMD09PW4/bmV3IHUocik6bmV3IHUocixrZShuLHQpKTpuZXcgdShyLGtlKG4sdCksbyk6UGUgaW4gcj9NZShwLHIpOkRlLmNhbGwocCxyKTpuZXcgdShtKHIpKX0pLGVlKGg9PT1GdW5jdGlvbi5wcm90b3R5cGU/QSh1KTpBKHUpLmNvbmNhdChBKGgpKSxmdW5jdGlvbihlKXtlIGluIHB8fGcocCxlLHVbZV0pfSkscFtYXT14LCFuJiYoeC5jb25zdHJ1Y3Rvcj1wKSk7dmFyIE89eFt4ZV0sUj0hIU8mJigndmFsdWVzJz09Ty5uYW1lfHxPLm5hbWU9PXZvaWQgMCksaz1IZS52YWx1ZXM7ZyhwLFNlLCEwKSxnKHgsUGUsYyksZyh4LE9lLCEwKSxnKHgsVGUscCksKGk/bmV3IHAoMSlbX2VdIT1jOiEoX2UgaW4geCkpJiZVKHgsX2Use2dldDpmdW5jdGlvbigpe3JldHVybiBjfX0pLEVbY109cCxhKGEuRythLlcrYS5GKihwIT11KSxFKSxhKGEuUyxjLHtCWVRFU19QRVJfRUxFTUVOVDp0fSksYShhLlMrYS5GKmwoZnVuY3Rpb24oKXt1Lm9mLmNhbGwocCwxKX0pLGMse2Zyb206RGUsb2Y6Q2V9KSxxIGluIHh8fGcoeCxxLHQpLGEoYS5QLGMsQmUpLEMoYyksYShhLlArYS5GKlJlLGMse3NldDpVZX0pLGEoYS5QK2EuRiohUixjLEhlKSxufHx4LnRvU3RyaW5nPT1tZXx8KHgudG9TdHJpbmc9bWUpLGEoYS5QK2EuRipsKGZ1bmN0aW9uKCl7bmV3IHAoMSkuc2xpY2UoKX0pLGMse3NsaWNlOkdlfSksYShhLlArYS5GKihsKGZ1bmN0aW9uKCl7cmV0dXJuWzEsMl0udG9Mb2NhbGVTdHJpbmcoKSE9bmV3IHAoWzEsMl0pLnRvTG9jYWxlU3RyaW5nKCl9KXx8IWwoZnVuY3Rpb24oKXt4LnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsMl0pfSkpLGMse3RvTG9jYWxlU3RyaW5nOlllfSksd1tjXT1SP086ayxufHxSfHxnKHgseGUsayl9fWVsc2UgZS5leHBvcnRzPWZ1bmN0aW9uKCl7fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDApLG89cigyMSksbD1yKDExKSxhPXIoMzYpLHM9cigxMCksaT1yKDcwKSxjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dC5mPXIoOCk/YzpmdW5jdGlvbihlLHQpe2lmKGU9bChlKSx0PWEodCwhMCksaSl0cnl7cmV0dXJuIGMoZSx0KX1jYXRjaCh0KXt9cmV0dXJuIHMoZSx0KT9vKCFuLmYuY2FsbChlLHQpLGVbdF0pOnZvaWQgMH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDMpLG89cig5KSxsPXIoMTApLGE9cigyMikoJ3NyYycpLHM9cigxMDIpLGk9J3RvU3RyaW5nJyxjPSgnJytzKS5zcGxpdChpKTtyKDIwKS5pbnNwZWN0U291cmNlPWZ1bmN0aW9uKGUpe3JldHVybiBzLmNhbGwoZSl9LChlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIscyl7dmFyIGk9J2Z1bmN0aW9uJz09dHlwZW9mIHI7aSYmKGwociwnbmFtZScpfHxvKHIsJ25hbWUnLHQpKTtlW3RdPT09cnx8KGkmJihsKHIsYSl8fG8ocixhLGVbdF0/JycrZVt0XTpjLmpvaW4odCsnJykpKSxlPT09bj9lW3RdPXI6cz9lW3RdP2VbdF09cjpvKGUsdCxyKTooZGVsZXRlIGVbdF0sbyhlLHQscikpKX0pKEZ1bmN0aW9uLnByb3RvdHlwZSxpLGZ1bmN0aW9uKCl7cmV0dXJuJ2Z1bmN0aW9uJz09dHlwZW9mIHRoaXMmJnRoaXNbYV18fHMuY2FsbCh0aGlzKX0pfSxmdW5jdGlvbihlKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlzTmFOKGU9K2UpPzA6KDA8ZT9wOmMpKGUpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjIpKCdtZXRhJyksbz1yKDEpLGw9cigxMCksYT1yKDcpLmYscz0wLGk9T2JqZWN0LmlzRXh0ZW5zaWJsZXx8ZnVuY3Rpb24oKXtyZXR1cm4hMH0sYz0hcig1KShmdW5jdGlvbigpe3JldHVybiBpKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpfSkscD1mdW5jdGlvbihlKXthKGUsbix7dmFsdWU6e2k6J08nKyArK3Msdzp7fX19KX0sZD1lLmV4cG9ydHM9e0tFWTpuLE5FRUQ6ITEsZmFzdEtleTpmdW5jdGlvbihlLHQpe2lmKCFvKGUpKXJldHVybidzeW1ib2wnPT10eXBlb2YgZT9lOignc3RyaW5nJz09dHlwZW9mIGU/J1MnOidQJykrZTtpZighbChlLG4pKXtpZighaShlKSlyZXR1cm4nRic7aWYoIXQpcmV0dXJuJ0UnO3AoZSl9cmV0dXJuIGVbbl0uaX0sZ2V0V2VhazpmdW5jdGlvbihlLHQpe2lmKCFsKGUsbikpe2lmKCFpKGUpKXJldHVybiEwO2lmKCF0KXJldHVybiExO3AoZSl9cmV0dXJuIGVbbl0ud30sb25GcmVlemU6ZnVuY3Rpb24oZSl7cmV0dXJuIGMmJmQuTkVFRCYmaShlKSYmIWwoZSxuKSYmcChlKSxlfX19LGZ1bmN0aW9uKGUpe3ZhciB0PWUuZXhwb3J0cz17dmVyc2lvbjonMi42LjUnfTsnbnVtYmVyJz09dHlwZW9mIF9fZSYmKF9fZT10KX0sZnVuY3Rpb24oZSl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fX0sZnVuY3Rpb24oZSl7dmFyIHQ9MCxyPU1hdGgucmFuZG9tKCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybidTeW1ib2woJy5jb25jYXQoZT09PXZvaWQgMD8nJzplLCcpXycsKCsrdCtyKS50b1N0cmluZygzNikpfX0sZnVuY3Rpb24oZSl7ZS5leHBvcnRzPSExfSxmdW5jdGlvbihlKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoJ2Z1bmN0aW9uJyE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKGUrJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtyZXR1cm4gZX19LGZ1bmN0aW9uKGUpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZihlPT12b2lkIDApdGhyb3cgVHlwZUVycm9yKCdDYW5cXFxcJ3QgY2FsbCBtZXRob2Qgb24gICcrZSk7cmV0dXJuIGV9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig3Myksbz1yKDU3KTtlLmV4cG9ydHM9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsbyl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighbihlKXx8ZS5fdCE9PXQpdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcrdCsnIHJlcXVpcmVkIScpO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTcpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBvIGluIHQpbihlLG8sdFtvXSxyKTtyZXR1cm4gZX19LGZ1bmN0aW9uKGUpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscixuKXtpZighKGUgaW5zdGFuY2VvZiB0KXx8biE9PXZvaWQgMCYmbiBpbiBlKXRocm93IFR5cGVFcnJvcihyKyc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO3JldHVybiBlfX0sZnVuY3Rpb24oZSl7dmFyIHQ9e30udG9TdHJpbmc7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiB0LmNhbGwoZSkuc2xpY2UoOCwtMSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxOCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bihlKSwwPmU/aShlK3QsMCk6ZChlLHQpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNykuZixvPXIoMTApLGw9cig0KSgndG9TdHJpbmdUYWcnKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UmJiFvKGU9cj9lOmUucHJvdG90eXBlLGwpJiZuKGUsbCx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnR9KX19LGZ1bmN0aW9uKGUpe2UuZXhwb3J0cz17fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTApLG89cigxMiksbD1yKDU2KSgnSUVfUFJPVE8nKSxhPU9iamVjdC5wcm90b3R5cGU7ZS5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGU9byhlKSxuKGUsbCk/ZVtsXTonZnVuY3Rpb24nPT10eXBlb2YgZS5jb25zdHJ1Y3RvciYmZSBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU6ZSBpbnN0YW5jZW9mIE9iamVjdD9hOm51bGx9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0KSgndW5zY29wYWJsZXMnKSxvPUFycmF5LnByb3RvdHlwZTtvW25dPT12b2lkIDAmJnIoOSkobyxuLHt9KSxlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7b1tuXVtlXT0hMH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKCFuKGUpKXJldHVybiBlO3ZhciByLG87aWYodCYmJ2Z1bmN0aW9uJz09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbztpZignZnVuY3Rpb24nPT10eXBlb2Yocj1lLnZhbHVlT2YpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87aWYoIXQmJidmdW5jdGlvbic9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87dGhyb3cgVHlwZUVycm9yKCdDYW5cXFxcJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlJyl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig3Myksbz1yKDU3KS5jb25jYXQoJ2xlbmd0aCcsJ3Byb3RvdHlwZScpO3QuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc3x8ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxvKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDIpLG89cigxMDQpLGw9cig1NyksYT1yKDU2KSgnSUVfUFJPVE8nKSxzPWZ1bmN0aW9uKCl7fSxjPSdwcm90b3R5cGUnLHA9ZnVuY3Rpb24oKXt2YXIgZSx0PXIoNTIpKCdpZnJhbWUnKSxuPWwubGVuZ3RoLG89JzwnLGE9Jz4nO2Zvcih0LnN0eWxlLmRpc3BsYXk9J25vbmUnLHIoNzQpLmFwcGVuZENoaWxkKHQpLHQuc3JjPSdqYXZhc2NyaXB0OicsZT10LmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsZS5vcGVuKCksZS53cml0ZShvKydzY3JpcHQnK2ErJ2RvY3VtZW50LkY9T2JqZWN0JytvKycvc2NyaXB0JythKSxlLmNsb3NlKCkscD1lLkY7bi0tOylkZWxldGUgcFtjXVtsW25dXTtyZXR1cm4gcCgpfTtlLmV4cG9ydHM9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gbnVsbD09PWU/cj1wKCk6KHNbY109bihlKSxyPW5ldyBzLHNbY109bnVsbCxyW2FdPWUpLHZvaWQgMD09PXQ/cjpvKHIsdCl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNCksbz1yKDU0KSxsPXIoMTIpLGE9cig2KSxzPXIoMTA1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0xPT1lLGk9ND09ZSxjPTY9PWUscD10fHxzO3JldHVybiBmdW5jdGlvbih0LHMsZCl7Zm9yKHZhciB1LGcsaD1sKHQpLHk9byhoKSxtPW4ocyxkLDMpLGY9YSh5Lmxlbmd0aCksRT0wLHg9cj9wKHQsZik6Mj09ZT9wKHQsMCk6dm9pZCAwO2Y+RTtFKyspaWYoKDU9PWV8fGN8fEUgaW4geSkmJih1PXlbRV0sZz1tKHUsRSxoKSxlKSlpZihyKXhbRV09ZztlbHNlIGlmKGcpc3dpdGNoKGUpe2Nhc2UgMzpyZXR1cm4hMDtjYXNlIDU6cmV0dXJuIHU7Y2FzZSA2OnJldHVybiBFO2Nhc2UgMjp4LnB1c2godSk7fWVsc2UgaWYoaSlyZXR1cm4hMTtyZXR1cm4gYz8tMTozPT1lfHxpP2k6eH19fSxmdW5jdGlvbihlLHQpe3QuZj17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjApLG89cigzKSxsPSdfX2NvcmUtanNfc2hhcmVkX18nLGE9b1tsXXx8KG9bbF09e30pOyhlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYVtlXXx8KGFbZV09dD09PXZvaWQgMD97fTp0KX0pKCd2ZXJzaW9ucycsW10pLnB1c2goe3ZlcnNpb246bi52ZXJzaW9uLG1vZGU6cigyMyk/J3B1cmUnOidnbG9iYWwnLGNvcHlyaWdodDonXFxcXHhBOSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ30pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigyKSxvPXIoMjQpLGw9cig0KSgnc3BlY2llcycpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLGE9bihlKS5jb25zdHJ1Y3RvcjtyZXR1cm4gYT09PXZvaWQgMHx8KHI9bihhKVtsXSk9PXZvaWQgMD90Om8ocil9fSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoMyksbz1yKDcpLGw9cig4KSxhPXIoNCkoJ3NwZWNpZXMnKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bltlXTtsJiZ0JiYhdFthXSYmby5mKHQsYSx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzfX0pfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMzApLG89cig0KSgndG9TdHJpbmdUYWcnKSxsPSdBcmd1bWVudHMnPT1uKGZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c30oKSksYT1mdW5jdGlvbihlLHQpe3RyeXtyZXR1cm4gZVt0XX1jYXRjaCh0KXt9fTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQscixzO3JldHVybiBlPT09dm9pZCAwPydVbmRlZmluZWQnOm51bGw9PT1lPydOdWxsJzonc3RyaW5nJz09dHlwZW9mKHI9YSh0PU9iamVjdChlKSxvKSk/cjpsP24odCk6J09iamVjdCc9PShzPW4odCkpJiYnZnVuY3Rpb24nPT10eXBlb2YgdC5jYWxsZWU/J0FyZ3VtZW50cyc6c319LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQpKCdpdGVyYXRvcicpLG89ITE7dHJ5e3ZhciBsPVs3XVtuXSgpO2xbJ3JldHVybiddPWZ1bmN0aW9uKCl7bz0hMH0sQXJyYXkuZnJvbShsLGZ1bmN0aW9uKCl7dGhyb3cgMn0pfWNhdGNoKHQpe31lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighdCYmIW8pcmV0dXJuITE7dmFyIHI9ITE7dHJ5e3ZhciBsPVs3XSxhPWxbbl0oKTthLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm57ZG9uZTpyPSEwfX0sbFtuXT1mdW5jdGlvbigpe3JldHVybiBhfSxlKGwpfWNhdGNoKHQpe31yZXR1cm4gcn19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE0KSxvPXIoODApLGw9cig1OSksYT1yKDIpLHM9cig2KSxpPXIoNjApLGM9e30scD17fSx0PWUuZXhwb3J0cz1mdW5jdGlvbihlLHQscixkLHUpe3ZhciBnLGgseSxtLEU9dT9mdW5jdGlvbigpe3JldHVybiBlfTppKGUpLHg9bihyLGQsdD8yOjEpLGY9MDtpZignZnVuY3Rpb24nIT10eXBlb2YgRSl0aHJvdyBUeXBlRXJyb3IoZSsnIGlzIG5vdCBpdGVyYWJsZSEnKTtpZihsKEUpKXtmb3IoZz1zKGUubGVuZ3RoKTtnPmY7ZisrKWlmKG09dD94KGEoaD1lW2ZdKVswXSxoWzFdKTp4KGVbZl0pLG09PT1jfHxtPT09cClyZXR1cm4gbTt9ZWxzZSBmb3IoeT1FLmNhbGwoZSk7IShoPXkubmV4dCgpKS5kb25lOylpZihtPW8oeSx4LGgudmFsdWUsdCksbT09PWN8fG09PT1wKXJldHVybiBtfTt0LkJSRUFLPWMsdC5SRVRVUk49cH0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDMpLG89cigwKSxsPXIoMTcpLGE9cigyOCkscz1yKDE5KSxpPXIoNDYpLGM9cigyOSkscD1yKDEpLGQ9cig1KSx1PXIoNDUpLGc9cigzMiksaD1yKDExNyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLHksZixtKXt2YXIgRT1uW2VdLHg9RSxfPWY/J3NldCc6J2FkZCcsUz14JiZ4LnByb3RvdHlwZSxUPXt9LGI9ZnVuY3Rpb24oZSl7dmFyIHQ9U1tlXTtsKFMsZSwnZGVsZXRlJz09ZT9mdW5jdGlvbihlKXtyZXR1cm4gbSYmIXAoZSk/ITE6dC5jYWxsKHRoaXMsMD09PWU/MDplKX06J2hhcyc9PWU/ZnVuY3Rpb24oZSl7cmV0dXJuIG0mJiFwKGUpPyExOnQuY2FsbCh0aGlzLDA9PT1lPzA6ZSl9OidnZXQnPT1lP2Z1bmN0aW9uKGUpe3JldHVybiBtJiYhcChlKT92b2lkIDA6dC5jYWxsKHRoaXMsMD09PWU/MDplKX06J2FkZCc9PWU/ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2FsbCh0aGlzLDA9PT1lPzA6ZSksdGhpc306ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKHRoaXMsMD09PWU/MDplLHIpLHRoaXN9KX07aWYoJ2Z1bmN0aW9uJyE9dHlwZW9mIHh8fCEobXx8Uy5mb3JFYWNoJiYhZChmdW5jdGlvbigpe25ldyB4KCkuZW50cmllcygpLm5leHQoKX0pKSl4PXkuZ2V0Q29uc3RydWN0b3IodCxlLGYsXyksYSh4LnByb3RvdHlwZSxyKSxzLk5FRUQ9ITA7ZWxzZXt2YXIgUD1uZXcgeCxPPVBbX10obT97fTotMCwxKSE9UCx2PWQoZnVuY3Rpb24oKXtQLmhhcygxKX0pLEk9dShmdW5jdGlvbihlKXtuZXcgeChlKX0pLEE9IW0mJmQoZnVuY3Rpb24oKXtmb3IodmFyIGU9bmV3IHgsdD01O3QtLTspZVtfXSh0LHQpO3JldHVybiFlLmhhcygtMCl9KTtJfHwoeD10KGZ1bmN0aW9uKHQscil7Yyh0LHgsZSk7dmFyIG49aChuZXcgRSx0LHgpO3JldHVybiB2b2lkIDAhPXImJmkocixmLG5bX10sbiksbn0pLHgucHJvdG90eXBlPVMsUy5jb25zdHJ1Y3Rvcj14KSwodnx8QSkmJihiKCdkZWxldGUnKSxiKCdoYXMnKSxmJiZiKCdnZXQnKSksKEF8fE8pJiZiKF8pLG0mJlMuY2xlYXImJmRlbGV0ZSBTLmNsZWFyfXJldHVybiBnKHgsZSksVFtlXT14LG8oby5HK28uVytvLkYqKHghPUUpLFQpLG18fHkuc2V0U3Ryb25nKHgsZSxmKSx4fX0sZnVuY3Rpb24oZSx0KXt0LmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc30sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMyksbz1uLm5hdmlnYXRvcjtlLmV4cG9ydHM9byYmby51c2VyQWdlbnR8fCcnfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoNDQpLG89UmVnRXhwLnByb3RvdHlwZS5leGVjO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByPWUuZXhlYztpZignZnVuY3Rpb24nPT10eXBlb2Ygcil7dmFyIGw9ci5jYWxsKGUsdCk7aWYoJ29iamVjdCchPXR5cGVvZiBsKXRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO3JldHVybiBsfWlmKCdSZWdFeHAnIT09bihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7cmV0dXJuIG8uY2FsbChlLHQpfX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0JztyKDE2NCk7dmFyIG49cigxNyksbz1yKDkpLGw9cig1KSxhPXIoMjUpLHM9cig0KSxpPXIoNjYpLGM9cygnc3BlY2llcycpLHA9IWwoZnVuY3Rpb24oKXt2YXIgZT0vLi87cmV0dXJuIGUuZXhlYz1mdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBlLmdyb3Vwcz17YTonNyd9LGV9LCc3JyE9PScnLnJlcGxhY2UoZSwnJDxhPicpfSksZD1mdW5jdGlvbigpe3ZhciBlPS8oPzopLyx0PWUuZXhlYztlLmV4ZWM9ZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3ZhciByPSdhYicuc3BsaXQoZSk7cmV0dXJuIDI9PT1yLmxlbmd0aCYmJ2EnPT09clswXSYmJ2InPT09clsxXX0oKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciB1PXMoZSksZz0hbChmdW5jdGlvbigpe3ZhciB0PXt9O3JldHVybiB0W3VdPWZ1bmN0aW9uKCl7cmV0dXJuIDd9LDchPScnW2VdKHQpfSksaD1nPyFsKGZ1bmN0aW9uKCl7dmFyIHQ9ITEscj0vYS87cmV0dXJuIHIuZXhlYz1mdW5jdGlvbigpe3JldHVybiB0PSEwLG51bGx9LCdzcGxpdCc9PT1lJiYoci5jb25zdHJ1Y3Rvcj17fSxyLmNvbnN0cnVjdG9yW2NdPWZ1bmN0aW9uKCl7cmV0dXJuIHJ9KSxyW3VdKCcnKSwhdH0pOnZvaWQgMDtpZighZ3x8IWh8fCdyZXBsYWNlJz09PWUmJiFwfHwnc3BsaXQnPT09ZSYmIWQpe3ZhciB5PS8uL1t1XSxmPXIoYSx1LCcnW2VdLGZ1bmN0aW9uKGUsdCxyLG4sbyl7cmV0dXJuIHQuZXhlYz09PWk/ZyYmIW8/e2RvbmU6ITAsdmFsdWU6eS5jYWxsKHQscixuKX06e2RvbmU6ITAsdmFsdWU6ZS5jYWxsKHIsdCxuKX06e2RvbmU6ITF9fSksbT1mWzBdLEU9ZlsxXTtuKFN0cmluZy5wcm90b3R5cGUsZSxtKSxvKFJlZ0V4cC5wcm90b3R5cGUsdSwyPT10P2Z1bmN0aW9uKGUsdCl7cmV0dXJuIEUuY2FsbChlLHRoaXMsdCl9OmZ1bmN0aW9uKGUpe3JldHVybiBFLmNhbGwoZSx0aGlzKX0pfX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpLG89cigzKS5kb2N1bWVudCxsPW4obykmJm4oby5jcmVhdGVFbGVtZW50KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGw/by5jcmVhdGVFbGVtZW50KGUpOnt9fX0sZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbixvPXIoMyksbD1yKDkpLGE9cigyMikscz1hKCd0eXBlZF9hcnJheScpLGM9YSgndmlldycpLHA9ISEoby5BcnJheUJ1ZmZlciYmby5EYXRhVmlldyksZD1wLHU9MCxpPVsnSW50OEFycmF5JywnVWludDhBcnJheScsJ1VpbnQ4Q2xhbXBlZEFycmF5JywnSW50MTZBcnJheScsJ1VpbnQxNkFycmF5JywnSW50MzJBcnJheScsJ1VpbnQzMkFycmF5JywnRmxvYXQzMkFycmF5JywnRmxvYXQ2NEFycmF5J107dTw5Oykobj1vW2lbdSsrXV0pPyhsKG4ucHJvdG90eXBlLHMsITApLGwobi5wcm90b3R5cGUsYywhMCkpOmQ9ITE7ZS5leHBvcnRzPXtBQlY6cCxDT05TVFI6ZCxUWVBFRDpzLFZJRVc6Y319LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDMwKTtlLmV4cG9ydHM9T2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk/T2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVybidTdHJpbmcnPT1uKGUpP2Uuc3BsaXQoJycpOk9iamVjdChlKX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDExKSxvPXIoNiksbD1yKDMxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixhKXt2YXIgcyxpPW4odCksYz1vKGkubGVuZ3RoKSxwPWwoYSxjKTtpZihlJiZyIT1yKXtmb3IoO2M+cDspaWYocz1pW3ArK10scyE9cylyZXR1cm4hMDt9ZWxzZSBmb3IoO2M+cDtwKyspaWYoKGV8fHAgaW4gaSkmJmlbcF09PT1yKXJldHVybiBlfHxwfHwwO3JldHVybiFlJiYtMX19fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0MSkoJ2tleXMnKSxvPXIoMjIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbltlXXx8KG5bZV09byhlKSl9fSxmdW5jdGlvbihlKXtlLmV4cG9ydHM9Wydjb25zdHJ1Y3RvcicsJ2hhc093blByb3BlcnR5JywnaXNQcm90b3R5cGVPZicsJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywndG9Mb2NhbGVTdHJpbmcnLCd0b1N0cmluZycsJ3ZhbHVlT2YnXX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDEyKSxvPXIoMzEpLGw9cig2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW4odGhpcykscj1sKHQubGVuZ3RoKSxhPWFyZ3VtZW50cy5sZW5ndGgscz1vKDE8YT9hcmd1bWVudHNbMV06dm9pZCAwLHIpLGk9MjxhP2FyZ3VtZW50c1syXTp2b2lkIDAsYz12b2lkIDA9PT1pP3I6byhpLHIpO2M+czspdFtzKytdPWU7cmV0dXJuIHR9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigzMyksbz1yKDQpKCdpdGVyYXRvcicpLGw9QXJyYXkucHJvdG90eXBlO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZSE9PXZvaWQgMCYmKG4uQXJyYXk9PT1lfHxsW29dPT09ZSl9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0NCksbz1yKDQpKCdpdGVyYXRvcicpLGw9cigzMyk7ZS5leHBvcnRzPXIoMjApLmdldEl0ZXJhdG9yTWV0aG9kPWZ1bmN0aW9uKGUpe2lmKGUhPXZvaWQgMClyZXR1cm4gZVtvXXx8ZVsnQEBpdGVyYXRvciddfHxsW24oZSldfX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDM1KSxvPXIoNzYpLGw9cigzMyksYT1yKDExKTtlLmV4cG9ydHM9cig3NykoQXJyYXksJ0FycmF5JyxmdW5jdGlvbihlLHQpe3RoaXMuX3Q9YShlKSx0aGlzLl9pPTAsdGhpcy5faz10fSxmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3QsdD10aGlzLl9rLHI9dGhpcy5faSsrO3JldHVybiFlfHxyPj1lLmxlbmd0aD8odGhpcy5fdD12b2lkIDAsbygxKSk6J2tleXMnPT10P28oMCxyKTondmFsdWVzJz09dD9vKDAsZVtyXSk6bygwLFtyLGVbcl1dKX0sJ3ZhbHVlcycpLGwuQXJndW1lbnRzPWwuQXJyYXksbigna2V5cycpLG4oJ3ZhbHVlcycpLG4oJ2VudHJpZXMnKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuLG8sbCxhPXIoMTQpLHM9cig4NCksaT1yKDc0KSxjPXIoNTIpLHA9cigzKSxkPXAucHJvY2Vzcyx1PXAuc2V0SW1tZWRpYXRlLGc9cC5jbGVhckltbWVkaWF0ZSxoPXAuTWVzc2FnZUNoYW5uZWwseT1wLkRpc3BhdGNoLGY9MCxtPXt9LEU9J29ucmVhZHlzdGF0ZWNoYW5nZScseD1mdW5jdGlvbigpe3ZhciBlPSt0aGlzO2lmKG0uaGFzT3duUHJvcGVydHkoZSkpe3ZhciB0PW1bZV07ZGVsZXRlIG1bZV0sdCgpfX0sXz1mdW5jdGlvbihlKXt4LmNhbGwoZS5kYXRhKX07dSYmZ3x8KHU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLHI9MTthcmd1bWVudHMubGVuZ3RoPnI7KXQucHVzaChhcmd1bWVudHNbcisrXSk7cmV0dXJuIG1bKytmXT1mdW5jdGlvbigpe3MoJ2Z1bmN0aW9uJz09dHlwZW9mIGU/ZTpGdW5jdGlvbihlKSx0KX0sbihmKSxmfSxnPWZ1bmN0aW9uKGUpe2RlbGV0ZSBtW2VdfSwncHJvY2Vzcyc9PXIoMzApKGQpP249ZnVuY3Rpb24oZSl7ZC5uZXh0VGljayhhKHgsZSwxKSl9OnkmJnkubm93P249ZnVuY3Rpb24oZSl7eS5ub3coYSh4LGUsMSkpfTpoPyhvPW5ldyBoLGw9by5wb3J0MixvLnBvcnQxLm9ubWVzc2FnZT1fLG49YShsLnBvc3RNZXNzYWdlLGwsMSkpOnAuYWRkRXZlbnRMaXN0ZW5lciYmJ2Z1bmN0aW9uJz09dHlwZW9mIHBvc3RNZXNzYWdlJiYhcC5pbXBvcnRTY3JpcHRzPyhuPWZ1bmN0aW9uKGUpe3AucG9zdE1lc3NhZ2UoZSsnJywnKicpfSxwLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLF8sITEpKTpFIGluIGMoJ3NjcmlwdCcpP249ZnVuY3Rpb24oZSl7aS5hcHBlbmRDaGlsZChjKCdzY3JpcHQnKSlbRV09ZnVuY3Rpb24oKXtpLnJlbW92ZUNoaWxkKHRoaXMpLHguY2FsbChlKX19Om49ZnVuY3Rpb24oZSl7c2V0VGltZW91dChhKHgsZSwxKSwwKX0pLGUuZXhwb3J0cz17c2V0OnUsY2xlYXI6Z319LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDkyKSxvPXIoMjUpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobih0KSl0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnK3IrJyBkb2VzblxcXFwndCBhY2NlcHQgcmVnZXghJyk7cmV0dXJuIG8oZSkrJyd9fSxmdW5jdGlvbihlLHQscil7dmFyIG49cig0KSgnbWF0Y2gnKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9Ly4vO3RyeXsnLy4vJ1tlXSh0KX1jYXRjaChyKXt0cnl7cmV0dXJuIHRbbl09ITEsIScvLi8nW2VdKHQpfWNhdGNoKGUpe319cmV0dXJuITB9fSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoOTApKCEwKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0KyhyP24oZSx0KS5sZW5ndGg6MSl9fSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoOTMpLG89UmVnRXhwLnByb3RvdHlwZS5leGVjLGw9U3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlLGE9byxzPSdsYXN0SW5kZXgnLGM9ZnVuY3Rpb24oKXt2YXIgZT0vYS8sdD0vYiovZztyZXR1cm4gby5jYWxsKGUsJ2EnKSxvLmNhbGwodCwnYScpLDAhPT1lW3NdfHwwIT09dFtzXX0oKSxwPS8oKT8/Ly5leGVjKCcnKVsxXSE9PXZvaWQgMDsoY3x8cCkmJihhPWZ1bmN0aW9uKGUpe3ZhciB0LHIsYSxkLGk9dGhpcztyZXR1cm4gcCYmKHI9bmV3IFJlZ0V4cCgnXicraS5zb3VyY2UrJyQoPyFcXFxcXFxcXHMpJyxuLmNhbGwoaSkpKSxjJiYodD1pW3NdKSxhPW8uY2FsbChpLGUpLGMmJmEmJihpW3NdPWkuZ2xvYmFsP2EuaW5kZXgrYVswXS5sZW5ndGg6dCkscCYmYSYmMTxhLmxlbmd0aCYmbC5jYWxsKGFbMF0scixmdW5jdGlvbigpe2ZvcihkPTE7ZDxhcmd1bWVudHMubGVuZ3RoLTI7ZCsrKXZvaWQgMD09PWFyZ3VtZW50c1tkXSYmKGFbZF09dm9pZCAwKX0pLGF9KSxlLmV4cG9ydHM9YX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDcpLG89cigyMSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXt0IGluIGU/bi5mKGUsdCxvKDAscikpOmVbdF09cn19LGZ1bmN0aW9uKGUpe2UuZXhwb3J0cz1NYXRoLnNpZ258fGZ1bmN0aW9uKGUpe3JldHVybiAwPT0oZT0rZSl8fGUhPWU/ZTowPmU/LTE6MX19LGZ1bmN0aW9uKGUpe3ZhciB0PXM7ZS5leHBvcnRzPSF0fHwyMjAyNS40NjU3OTQ4MDY3MTg8dCgxMCl8fDIyMDI1LjQ2NTc5NDgwNjcxOD50KDEwKXx8LTJlLTE3IT10KC0yZS0xNyk/ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PShlPStlKT9lOi0xZS02PGUmJjFlLTY+ZT9lK2UqZS8yOmEoZSktMX06dH0sZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz0hcig4KSYmIXIoNSkoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIoNTIpKCdkaXYnKSwnYScse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0sZnVuY3Rpb24oZSx0LGEpeyd1c2Ugc3RyaWN0JztmdW5jdGlvbiBzKHQscixuKXt2YXIgbyxsLGEsYz1BcnJheShuKSxwPTgqbi1yLTEsZD0oMTw8cCktMSx1PWQ+PjEsZz0yMz09PXI/eigyLC0yNCkteigyLC03Nyk6MCxoPTAsaT0wPnR8fDA9PT10JiYwPjEvdD8xOjA7Zm9yKHQ9Vih0KSx0IT10fHx0PT09SD8obD10PT10PzA6MSxvPWQpOihvPSQoSyh0KS9xKSwxPnQqKGE9eigyLC1vKSkmJihvLS0sYSo9MiksdCs9MTw9byt1P2cvYTpnKnooMiwxLXUpLDI8PXQqYSYmKG8rKyxhLz0yKSxvK3U+PWQ/KGw9MCxvPWQpOjE8PW8rdT8obD0odCphLTEpKnooMixyKSxvKz11KToobD10KnooMix1LTEpKnooMixyKSxvPTApKTs4PD1yO2NbaCsrXT0yNTUmbCxsLz0yNTYsci09OCk7Zm9yKG89bzw8cnxsLHArPXI7MDxwO2NbaCsrXT0yNTUmbyxvLz0yNTYscC09OCk7cmV0dXJuIGNbLS1oXXw9MTI4KmksY31mdW5jdGlvbiBpKHQscixuKXt2YXIgbyxsPTgqbi1yLTEsYT0oMTw8bCktMSxjPWE+PjEscD1sLTcsZD1uLTEsaT10W2QtLV0scz0xMjcmaTtmb3IoaT4+PTc7MDxwO3M9MjU2KnMrdFtkXSxkLS0scC09OCk7Zm9yKG89cyYoMTw8LXApLTEscz4+PS1wLHArPXI7MDxwO289MjU2Km8rdFtkXSxkLS0scC09OCk7aWYoMD09PXMpcz0xLWM7ZWxzZXtpZihzPT09YSlyZXR1cm4gbz9OYU46aT8tSDpIO28rPXooMixyKSxzLT1jfXJldHVybihpPy0xOjEpKm8qeigyLHMtcil9ZnVuY3Rpb24gYyhlKXtyZXR1cm4gZVszXTw8MjR8ZVsyXTw8MTZ8ZVsxXTw8OHxlWzBdfWZ1bmN0aW9uIGQoZSl7cmV0dXJuWzI1NSZlXX1mdW5jdGlvbiB1KGUpe3JldHVyblsyNTUmZSwyNTUmZT4+OF19ZnVuY3Rpb24gZyhlKXtyZXR1cm5bMjU1JmUsMjU1JmU+PjgsMjU1JmU+PjE2LDI1NSZlPj4yNF19ZnVuY3Rpb24gaChlKXtyZXR1cm4gcyhlLDUyLDgpfWZ1bmN0aW9uIHkoZSl7cmV0dXJuIHMoZSwyMyw0KX1mdW5jdGlvbiBmKGUsdCxyKXtMKGVbRF0sdCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbcl19fSl9ZnVuY3Rpb24gbShlLHQscixuKXt2YXIgbz1SKCtyKTtpZihvK3Q+ZVtlZV0pdGhyb3cgVShDKTt2YXIgbD1lW1FdLl9iLGE9bytlW3RlXSxzPWwuc2xpY2UoYSxhK3QpO3JldHVybiBuP3M6cy5yZXZlcnNlKCl9ZnVuY3Rpb24gRShlLHQscixuLG8sbCl7dmFyIGE9Uigrcik7aWYoYSt0PmVbZWVdKXRocm93IFUoQyk7Zm9yKHZhciBzPWVbUV0uX2IsYz1hK2VbdGVdLHA9bigrbyksZD0wO2Q8dDtkKyspc1tjK2RdPXBbbD9kOnQtZC0xXX12YXIgeD1hKDMpLF89YSg4KSxTPWEoMjMpLFQ9YSg1MyksYj1hKDkpLFA9YSgyOCksTz1hKDUpLHY9YSgyOSksST1hKDE4KSxBPWEoNiksUj1hKDcyKSxrPWEoMzcpLmYsTD1hKDcpLmYsRj1hKDU4KSxOPWEoMzIpLE09J0FycmF5QnVmZmVyJyx3PSdEYXRhVmlldycsRD0ncHJvdG90eXBlJyxDPSdXcm9uZyBpbmRleCEnLFk9eFtNXSxCPXhbd10sRz14Lk1hdGgsVT14LlJhbmdlRXJyb3IsSD14LkluZmluaXR5LFc9WSxWPWwsej1vLCQ9cCxLPW4scT1yLFg9J2J1ZmZlcicsWj0nYnl0ZUxlbmd0aCcsSj0nYnl0ZU9mZnNldCcsUT1fPydfYic6WCxlZT1fPydfbCc6Wix0ZT1fPydfbyc6SjtpZighVC5BQlYpWT1mdW5jdGlvbihlKXt2KHRoaXMsWSxNKTt2YXIgdD1SKGUpO3RoaXMuX2I9Ri5jYWxsKEFycmF5KHQpLDApLHRoaXNbZWVdPXR9LEI9ZnVuY3Rpb24oZSx0LHIpe3YodGhpcyxCLHcpLHYoZSxZLHcpO3ZhciBuPWVbZWVdLG89SSh0KTtpZigwPm98fG8+bil0aHJvdyBVKCdXcm9uZyBvZmZzZXQhJyk7aWYocj12b2lkIDA9PT1yP24tbzpBKHIpLG8rcj5uKXRocm93IFUoJ1dyb25nIGxlbmd0aCEnKTt0aGlzW1FdPWUsdGhpc1t0ZV09byx0aGlzW2VlXT1yfSxfJiYoZihZLFosJ19sJyksZihCLFgsJ19iJyksZihCLFosJ19sJyksZihCLEosJ19vJykpLFAoQltEXSx7Z2V0SW50ODpmdW5jdGlvbihlKXtyZXR1cm4gbSh0aGlzLDEsZSlbMF08PDI0Pj4yNH0sZ2V0VWludDg6ZnVuY3Rpb24oZSl7cmV0dXJuIG0odGhpcywxLGUpWzBdfSxnZXRJbnQxNjpmdW5jdGlvbihlKXt2YXIgdD1tKHRoaXMsMixlLGFyZ3VtZW50c1sxXSk7cmV0dXJuKHRbMV08PDh8dFswXSk8PDE2Pj4xNn0sZ2V0VWludDE2OmZ1bmN0aW9uKGUpe3ZhciB0PW0odGhpcywyLGUsYXJndW1lbnRzWzFdKTtyZXR1cm4gdFsxXTw8OHx0WzBdfSxnZXRJbnQzMjpmdW5jdGlvbihlKXtyZXR1cm4gYyhtKHRoaXMsNCxlLGFyZ3VtZW50c1sxXSkpfSxnZXRVaW50MzI6ZnVuY3Rpb24oZSl7cmV0dXJuIGMobSh0aGlzLDQsZSxhcmd1bWVudHNbMV0pKT4+PjB9LGdldEZsb2F0MzI6ZnVuY3Rpb24oZSl7cmV0dXJuIGkobSh0aGlzLDQsZSxhcmd1bWVudHNbMV0pLDIzLDQpfSxnZXRGbG9hdDY0OmZ1bmN0aW9uKGUpe3JldHVybiBpKG0odGhpcyw4LGUsYXJndW1lbnRzWzFdKSw1Miw4KX0sc2V0SW50ODpmdW5jdGlvbihlLHQpe0UodGhpcywxLGUsZCx0KX0sc2V0VWludDg6ZnVuY3Rpb24oZSx0KXtFKHRoaXMsMSxlLGQsdCl9LHNldEludDE2OmZ1bmN0aW9uKGUsdCl7RSh0aGlzLDIsZSx1LHQsYXJndW1lbnRzWzJdKX0sc2V0VWludDE2OmZ1bmN0aW9uKGUsdCl7RSh0aGlzLDIsZSx1LHQsYXJndW1lbnRzWzJdKX0sc2V0SW50MzI6ZnVuY3Rpb24oZSx0KXtFKHRoaXMsNCxlLGcsdCxhcmd1bWVudHNbMl0pfSxzZXRVaW50MzI6ZnVuY3Rpb24oZSx0KXtFKHRoaXMsNCxlLGcsdCxhcmd1bWVudHNbMl0pfSxzZXRGbG9hdDMyOmZ1bmN0aW9uKGUsdCl7RSh0aGlzLDQsZSx5LHQsYXJndW1lbnRzWzJdKX0sc2V0RmxvYXQ2NDpmdW5jdGlvbihlLHQpe0UodGhpcyw4LGUsaCx0LGFyZ3VtZW50c1syXSl9fSk7ZWxzZXtpZighTyhmdW5jdGlvbigpe1koMSl9KXx8IU8oZnVuY3Rpb24oKXtuZXcgWSgtMSl9KXx8TyhmdW5jdGlvbigpe3JldHVybiBuZXcgWSxuZXcgWSgxLjUpLG5ldyBZKE5hTiksWS5uYW1lIT1NfSkpe1k9ZnVuY3Rpb24oZSl7cmV0dXJuIHYodGhpcyxZKSxuZXcgVyhSKGUpKX07Zm9yKHZhciByZSxuZT1ZW0RdPVdbRF0sb2U9ayhXKSxsZT0wO29lLmxlbmd0aD5sZTspKHJlPW9lW2xlKytdKWluIFl8fGIoWSxyZSxXW3JlXSk7U3x8KG5lLmNvbnN0cnVjdG9yPVkpfXZhciBqPW5ldyBCKG5ldyBZKDIpKSxhZT1CW0RdLnNldEludDg7ai5zZXRJbnQ4KDAsMjE0NzQ4MzY0OCksai5zZXRJbnQ4KDEsMjE0NzQ4MzY0OSksKGouZ2V0SW50OCgwKXx8IWouZ2V0SW50OCgxKSkmJlAoQltEXSx7c2V0SW50ODpmdW5jdGlvbihlLHQpe2FlLmNhbGwodGhpcyxlLHQ8PDI0Pj4yNCl9LHNldFVpbnQ4OmZ1bmN0aW9uKGUsdCl7YWUuY2FsbCh0aGlzLGUsdDw8MjQ+PjI0KX19LCEwKX1OKFksTSksTihCLHcpLGIoQltEXSxULlZJRVcsITApLHRbTV09WSx0W3ddPUJ9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE4KSxvPXIoNik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKGU9PT12b2lkIDApcmV0dXJuIDA7dmFyIHQ9bihlKSxyPW8odCk7aWYodCE9PXIpdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO3JldHVybiByfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTApLG89cigxMSksbD1yKDU1KSghMSksYT1yKDU2KSgnSUVfUFJPVE8nKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcixzPW8oZSksYz0wLGk9W107Zm9yKHIgaW4gcylyIT1hJiZuKHMscikmJmkucHVzaChyKTtmb3IoO3QubGVuZ3RoPmM7KW4ocyxyPXRbYysrXSkmJih+bChpLHIpfHxpLnB1c2gocikpO3JldHVybiBpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMykuZG9jdW1lbnQ7ZS5leHBvcnRzPW4mJm4uZG9jdW1lbnRFbGVtZW50fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigzMCk7ZS5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVybidBcnJheSc9PW4oZSl9fSxmdW5jdGlvbihlKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57dmFsdWU6dCxkb25lOiEhZX19fSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoMjMpLG89cigwKSxsPXIoMTcpLGE9cig5KSxzPXIoMzMpLGk9cigxMDcpLGM9cigzMikscD1yKDM0KSxkPXIoNCkoJ2l0ZXJhdG9yJyksdT0hKFtdLmtleXMmJiduZXh0J2luW10ua2V5cygpKSxnPSdrZXlzJyxoPSd2YWx1ZXMnLHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGYsbSxFLHgpe2kocix0LGYpO3ZhciBfLFMsVCxiPWZ1bmN0aW9uKGUpe3JldHVybiF1JiZlIGluIEk/SVtlXTplPT09Zz9mdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfTplPT09aD9mdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfTpmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfX0sUD10KycgSXRlcmF0b3InLE89bT09aCx2PSExLEk9ZS5wcm90b3R5cGUsQT1JW2RdfHxJWydAQGl0ZXJhdG9yJ118fG0mJklbbV0sUj1BfHxiKG0pLGs9bT9PP2IoJ2VudHJpZXMnKTpSOnZvaWQgMCxMPSdBcnJheSc9PXQ/SS5lbnRyaWVzfHxBOkE7aWYoTCYmKFQ9cChMLmNhbGwobmV3IGUpKSxUIT09T2JqZWN0LnByb3RvdHlwZSYmVC5uZXh0JiYoYyhULFAsITApLCFuJiYnZnVuY3Rpb24nIT10eXBlb2YgVFtkXSYmYShULGQseSkpKSxPJiZBJiZBLm5hbWUhPT1oJiYodj0hMCxSPWZ1bmN0aW9uKCl7cmV0dXJuIEEuY2FsbCh0aGlzKX0pLCghbnx8eCkmJih1fHx2fHwhSVtkXSkmJmEoSSxkLFIpLHNbdF09UixzW1BdPXksbSlpZihfPXt2YWx1ZXM6Tz9SOmIoaCksa2V5czpFP1I6YihnKSxlbnRyaWVzOmt9LHgpZm9yKFMgaW4gXylTIGluIEl8fGwoSSxTLF9bU10pO2Vsc2UgbyhvLlArby5GKih1fHx2KSx0LF8pO3JldHVybiBffX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDEyKSxvPXIoMzEpLGw9cig2KTtlLmV4cG9ydHM9W10uY29weVdpdGhpbnx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1uKHRoaXMpLGE9bChyLmxlbmd0aCkscz1vKGUsYSksaT1vKHQsYSksYz0yPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzJdOnZvaWQgMCxwPWQoKGM9PT12b2lkIDA/YTpvKGMsYSkpLWksYS1zKSx1PTE7Zm9yKGk8cyYmczxpK3AmJih1PS0xLGkrPXAtMSxzKz1wLTEpOzA8cC0tOylpIGluIHI/cltzXT1yW2ldOmRlbGV0ZSByW3NdLHMrPXUsaSs9dTtyZXR1cm4gcn19LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cig3KS5mLG89cigzOCksbD1yKDI4KSxhPXIoMTQpLHM9cigyOSksaT1yKDQ2KSxjPXIoNzcpLHA9cig3NiksZD1yKDQzKSx1PXIoOCksZz1yKDE5KS5mYXN0S2V5LGg9cigyNykseT11Pydfcyc6J3NpemUnLGY9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPWcodCk7aWYoJ0YnIT09bilyZXR1cm4gZS5faVtuXTtmb3Iocj1lLl9mO3I7cj1yLm4paWYoci5rPT10KXJldHVybiByfTtlLmV4cG9ydHM9e2dldENvbnN0cnVjdG9yOmZ1bmN0aW9uKGUsdCxyLGMpe3ZhciBwPWUoZnVuY3Rpb24oZSxuKXtzKGUscCx0LCdfaScpLGUuX3Q9dCxlLl9pPW8obnVsbCksZS5fZj12b2lkIDAsZS5fbD12b2lkIDAsZVt5XT0wLHZvaWQgMCE9biYmaShuLHIsZVtjXSxlKX0pO3JldHVybiBsKHAucHJvdG90eXBlLHtjbGVhcjpmdW5jdGlvbigpe2Zvcih2YXIgZT1oKHRoaXMsdCkscj1lLl9pLG49ZS5fZjtuO249bi5uKW4ucj0hMCxuLnAmJihuLnA9bi5wLm49dm9pZCAwKSxkZWxldGUgcltuLmldO2UuX2Y9ZS5fbD12b2lkIDAsZVt5XT0wfSxkZWxldGU6ZnVuY3Rpb24oZSl7dmFyIHI9aCh0aGlzLHQpLG49ZihyLGUpO2lmKG4pe3ZhciBvPW4ubixsPW4ucDtkZWxldGUgci5faVtuLmldLG4ucj0hMCxsJiYobC5uPW8pLG8mJihvLnA9bCksci5fZj09biYmKHIuX2Y9byksci5fbD09biYmKHIuX2w9bCksclt5XS0tfXJldHVybiEhbn0sZm9yRWFjaDpmdW5jdGlvbihlKXtoKHRoaXMsdCk7Zm9yKHZhciByLG49YShlLDE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwLDMpO3I9cj9yLm46dGhpcy5fZjspZm9yKG4oci52LHIuayx0aGlzKTtyJiZyLnI7KXI9ci5wfSxoYXM6ZnVuY3Rpb24oZSl7cmV0dXJuISFmKGgodGhpcyx0KSxlKX19KSx1JiZuKHAucHJvdG90eXBlLCdzaXplJyx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGgodGhpcyx0KVt5XX19KSxwfSxkZWY6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuLG8sbD1mKGUsdCk7cmV0dXJuIGw/bC52PXI6KGUuX2w9bD17aTpvPWcodCwhMCksazp0LHY6cixwOm49ZS5fbCxuOnZvaWQgMCxyOiExfSwhZS5fZiYmKGUuX2Y9bCksbiYmKG4ubj1sKSxlW3ldKyssJ0YnIT09byYmKGUuX2lbb109bCkpLGV9LGdldEVudHJ5OmYsc2V0U3Ryb25nOmZ1bmN0aW9uKGUsdCxyKXtjKGUsdCxmdW5jdGlvbihlLHIpe3RoaXMuX3Q9aChlLHQpLHRoaXMuX2s9cix0aGlzLl9sPXZvaWQgMH0sZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcyx0PWUuX2sscj1lLl9sO3ImJnIucjspcj1yLnA7cmV0dXJuIGUuX3QmJihlLl9sPXI9cj9yLm46ZS5fdC5fZik/J2tleXMnPT10P3AoMCxyLmspOid2YWx1ZXMnPT10P3AoMCxyLnYpOnAoMCxbci5rLHIudl0pOihlLl90PXZvaWQgMCxwKDEpKX0scj8nZW50cmllcyc6J3ZhbHVlcycsIXIsITApLGQodCl9fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMik7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLG8pe3RyeXtyZXR1cm4gbz9lKG4ocilbMF0sclsxXSk6ZShyKX1jYXRjaChyKXt2YXIgbD10WydyZXR1cm4nXTt0aHJvdyB2b2lkIDAhPT1sJiZuKGwuY2FsbCh0KSkscn19fSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxKSxvPXIoMiksbD1mdW5jdGlvbihlLHQpe2lmKG8oZSksIW4odCkmJm51bGwhPT10KXRocm93IFR5cGVFcnJvcih0Kyc6IGNhblxcXFwndCBzZXQgYXMgcHJvdG90eXBlIScpfTtlLmV4cG9ydHM9e3NldDpPYmplY3Quc2V0UHJvdG90eXBlT2Z8fCgnX19wcm90b19fJ2lue30/ZnVuY3Rpb24oZSx0LG4pe3RyeXtuPXIoMTQpKEZ1bmN0aW9uLmNhbGwscigxNikuZihPYmplY3QucHJvdG90eXBlLCdfX3Byb3RvX18nKS5zZXQsMiksbihlLFtdKSx0PSEoZSBpbnN0YW5jZW9mIEFycmF5KX1jYXRjaChyKXt0PSEwfXJldHVybiBmdW5jdGlvbihlLHIpe3JldHVybiBsKGUsciksdD9lLl9fcHJvdG9fXz1yOm4oZSxyKSxlfX0oe30sITEpOnZvaWQgMCksY2hlY2s6bH19LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cigyNiksbz1yKDQ4KSxsPXIoNDApLGE9cigxMikscz1yKDU0KSxpPU9iamVjdC5hc3NpZ247ZS5leHBvcnRzPSFpfHxyKDUpKGZ1bmN0aW9uKCl7dmFyIGU9e30sdD17fSxyPVN5bWJvbCgpLG49J2FiY2RlZmdoaWprbG1ub3BxcnN0JztyZXR1cm4gZVtyXT03LG4uc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oZSl7dFtlXT1lfSksNyE9aSh7fSxlKVtyXXx8T2JqZWN0LmtleXMoaSh7fSx0KSkuam9pbignJykhPW59KT9mdW5jdGlvbihlKXtmb3IodmFyIHQ9YShlKSxyPWFyZ3VtZW50cy5sZW5ndGgsaT0xLGM9by5mLHA9bC5mO3I+aTspZm9yKHZhciBkLHU9cyhhcmd1bWVudHNbaSsrXSksZz1jP24odSkuY29uY2F0KGModSkpOm4odSksaD1nLmxlbmd0aCx5PTA7aD55OylwLmNhbGwodSxkPWdbeSsrXSkmJih0W2RdPXVbZF0pO3JldHVybiB0fTppfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoMjgpLG89cigxOSkuZ2V0V2VhayxsPXIoMiksYT1yKDEpLHM9cigyOSksaT1yKDQ2KSxjPXIoMzkpLHA9cigxMCksZD1yKDI3KSx1PWMoNSksZz1jKDYpLGg9MCx5PWZ1bmN0aW9uKGUpe3JldHVybiBlLl9sfHwoZS5fbD1uZXcgZil9LGY9ZnVuY3Rpb24oKXt0aGlzLmE9W119LG09ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdShlLmEsZnVuY3Rpb24oZSl7cmV0dXJuIGVbMF09PT10fSl9O2YucHJvdG90eXBlPXtnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9bSh0aGlzLGUpO2lmKHQpcmV0dXJuIHRbMV19LGhhczpmdW5jdGlvbihlKXtyZXR1cm4hIW0odGhpcyxlKX0sc2V0OmZ1bmN0aW9uKGUsdCl7dmFyIHI9bSh0aGlzLGUpO3I/clsxXT10OnRoaXMuYS5wdXNoKFtlLHRdKX0sZGVsZXRlOmZ1bmN0aW9uKGUpe3ZhciB0PWcodGhpcy5hLGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdPT09ZX0pO3JldHVybn50JiZ0aGlzLmEuc3BsaWNlKHQsMSksISF+dH19LGUuZXhwb3J0cz17Z2V0Q29uc3RydWN0b3I6ZnVuY3Rpb24oZSx0LHIsbCl7dmFyIGM9ZShmdW5jdGlvbihlLG4pe3MoZSxjLHQsJ19pJyksZS5fdD10LGUuX2k9aCsrLGUuX2w9dm9pZCAwLHZvaWQgMCE9biYmaShuLHIsZVtsXSxlKX0pO3JldHVybiBuKGMucHJvdG90eXBlLHtkZWxldGU6ZnVuY3Rpb24oZSl7aWYoIWEoZSkpcmV0dXJuITE7dmFyIHI9byhlKTtyZXR1cm4hMD09PXI/eShkKHRoaXMsdCkpWydkZWxldGUnXShlKTpyJiZwKHIsdGhpcy5faSkmJmRlbGV0ZSByW3RoaXMuX2ldfSxoYXM6ZnVuY3Rpb24oZSl7aWYoIWEoZSkpcmV0dXJuITE7dmFyIHI9byhlKTtyZXR1cm4hMD09PXI/eShkKHRoaXMsdCkpLmhhcyhlKTpyJiZwKHIsdGhpcy5faSl9fSksY30sZGVmOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1vKGwodCksITApO3JldHVybiEwPT09bj95KGUpLnNldCh0LHIpOm5bZS5faV09cixlfSx1ZnN0b3JlOnl9fSxmdW5jdGlvbihlKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXI9PT12b2lkIDA7c3dpdGNoKHQubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG4/ZSgpOmUuY2FsbChyKTtjYXNlIDE6cmV0dXJuIG4/ZSh0WzBdKTplLmNhbGwocix0WzBdKTtjYXNlIDI6cmV0dXJuIG4/ZSh0WzBdLHRbMV0pOmUuY2FsbChyLHRbMF0sdFsxXSk7Y2FzZSAzOnJldHVybiBuP2UodFswXSx0WzFdLHRbMl0pOmUuY2FsbChyLHRbMF0sdFsxXSx0WzJdKTtjYXNlIDQ6cmV0dXJuIG4/ZSh0WzBdLHRbMV0sdFsyXSx0WzNdKTplLmNhbGwocix0WzBdLHRbMV0sdFsyXSx0WzNdKTt9cmV0dXJuIGUuYXBwbHkocix0KX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDM3KSxvPXIoNDgpLGw9cigyKSxhPXIoMykuUmVmbGVjdDtlLmV4cG9ydHM9YSYmYS5vd25LZXlzfHxmdW5jdGlvbihlKXt2YXIgdD1uLmYobChlKSkscj1vLmY7cmV0dXJuIHI/dC5jb25jYXQocihlKSk6dH19LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7ZnVuY3Rpb24gbihlKXt2YXIgdCxyO3RoaXMucHJvbWlzZT1uZXcgZShmdW5jdGlvbihlLG4pe2lmKHQhPXZvaWQgMHx8ciE9dm9pZCAwKXRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTt0PWUscj1ufSksdGhpcy5yZXNvbHZlPW8odCksdGhpcy5yZWplY3Q9byhyKX12YXIgbz1yKDI0KTtlLmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IG4oZSl9fSxmdW5jdGlvbihlLHQscil7dC5mPXIoNCl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDExKSxvPXIoMzcpLmYsbD17fS50b1N0cmluZyxhPSdvYmplY3QnPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzP09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdyk6W10scz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIG8oZSl9Y2F0Y2godCl7cmV0dXJuIGEuc2xpY2UoKX19O2UuZXhwb3J0cy5mPWZ1bmN0aW9uKGUpe3JldHVybiBhJiYnW29iamVjdCBXaW5kb3ddJz09bC5jYWxsKGUpP3MoZSk6byhuKGUpKX19LGZ1bmN0aW9uKGUpe2UuZXhwb3J0cz1PYmplY3QuaXN8fGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9PT10PzAhPT1lfHwxL2U9PTEvdDplIT1lJiZ0IT10fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTgpLG89cigyNSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIpe3ZhciBjLGEscD1vKHQpKycnLHM9bihyKSxpPXAubGVuZ3RoO3JldHVybiAwPnN8fHM+PWk/ZT8nJzp2b2lkIDA6KGM9cC5jaGFyQ29kZUF0KHMpLDU1Mjk2PmN8fDU2MzE5PGN8fHMrMT09PWl8fDU2MzIwPihhPXAuY2hhckNvZGVBdChzKzEpKXx8NTczNDM8YT9lP3AuY2hhckF0KHMpOmM6ZT9wLnNsaWNlKHMscysyKTooYy01NTI5Njw8MTApKyhhLTU2MzIwKSs2NTUzNil9fX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbz1yKDE4KSxsPXIoMjUpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1sKHRoaXMpKycnLHI9JycsYT1vKGUpO2lmKDA+YXx8YT09SW5maW5pdHkpdGhyb3cgUmFuZ2VFcnJvcignQ291bnQgY2FuXFxcXCd0IGJlIG5lZ2F0aXZlJyk7Zm9yKDswPGE7KGE+Pj49MSkmJih0Kz10KSkxJmEmJihyKz10KTtyZXR1cm4gcn19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpLG89cigzMCksbD1yKDQpKCdtYXRjaCcpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gbihlKSYmKCh0PWVbbF0pPT09dm9pZCAwPydSZWdFeHAnPT1vKGUpOiEhdCl9fSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoMik7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIGU9bih0aGlzKSx0PScnO3JldHVybiBlLmdsb2JhbCYmKHQrPSdnJyksZS5pZ25vcmVDYXNlJiYodCs9J2knKSxlLm11bHRpbGluZSYmKHQrPSdtJyksZS51bmljb2RlJiYodCs9J3UnKSxlLnN0aWNreSYmKHQrPSd5JyksdH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4hbihlKSYmaXNGaW5pdGUoZSkmJnAoZSk9PT1lfX0sZnVuY3Rpb24oZSl7ZS5leHBvcnRzPU1hdGgubG9nMXB8fGZ1bmN0aW9uKGUpe3JldHVybi0xZS04PChlPStlKSYmMWUtOD5lP2UtZSplLzI6bigxK2UpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjYpLG89cigxMSksbD1yKDQwKS5mO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciByLGE9byh0KSxzPW4oYSksYz1zLmxlbmd0aCxwPTAsaT1bXTtjPnA7KWwuY2FsbChhLHI9c1twKytdKSYmaS5wdXNoKGU/W3IsYVtyXV06YVtyXSk7cmV0dXJuIGl9fX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNiksbz1yKDkxKSxsPXIoMjUpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscixhKXt2YXIgcz1sKGUpKycnLGk9cy5sZW5ndGgscD12b2lkIDA9PT1yPycgJzpyKycnLGQ9bih0KTtpZihkPD1pfHwnJz09cClyZXR1cm4gczt2YXIgdT1kLWksZz1vLmNhbGwocCxjKHUvcC5sZW5ndGgpKTtyZXR1cm4gZy5sZW5ndGg+dSYmKGc9Zy5zbGljZSgwLHUpKSxhP2crczpzK2d9fSxmdW5jdGlvbihlLHQpeyd1c2Ugc3RyaWN0JztmdW5jdGlvbiByKGUsdCxyKXt2YXIgbj1uZXcgRXJyb3IodC5tZXNzYWdlfHx0Lm1lc3NhZ2VfdG9fY2xpZW50fHx0KTtyZXR1cm4gbi5uYW1lPXQuY29kZXx8ZSxuLnBhc3N0aHJvdWdoPXIsbn1mdW5jdGlvbiBuKGUsdCl7Zm9yKHZhciByPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoK3QubGVuZ3RoKSxuPTA7bjxlLmxlbmd0aDtuKyspcltuXT1lW25dO2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXJbbytlLmxlbmd0aF09dFtvXTtyZXR1cm4gcn1mdW5jdGlvbiBvKGUpe3ZhciB0PW5ldyBVaW50OEFycmF5KGwpLHI9bmV3IERhdGFWaWV3KHQuYnVmZmVyKTtyZXR1cm4gci5zZXRVaW50MzIoMCxlKSx0fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCdfX2VzTW9kdWxlJyx7dmFsdWU6ITB9KSx0LmFkZE1ldGFkYXRhPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXQudXBsb2FkSWQsbD10LmNhbGxUeXBlLGE9byhyKSxzPW8obCksaT1lLGM9ZnVuY3Rpb24oZSl7dmFyIHQ9byhlLmxlbmd0aCkscj1uZXcgVWludDhBcnJheShbXSk7cmV0dXJuIHI9bihyLHMpLHI9bihyLGEpLHI9bihyLHQpLHI9bihyLGUpLHJ9LHA9W10sZD0wO2Q8aS5sZW5ndGg7ZCsrKXAucHVzaChjKGlbZF0sZCxpKSk7cmV0dXJuIHB9LHQubG9nPWZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLG49QXJyYXkoMTxyP3ItMTowKSxvPTE7bzxyO28rKyluW28tMV09YXJndW1lbnRzW29dOyh0PWNvbnNvbGUpLmxvZy5hcHBseSh0LFtuZXcgRGF0ZSsnOiddLmNvbmNhdChuKSl9fSx0LmNyZWF0ZUVycm9yPXIsdC5wdXNoVG9CdWZmZXI9bix0LmdldEZpbGU9ZnVuY3Rpb24oZSl7dmFyIHQ9T2JqZWN0LmFzc2lnbih7fSxlKTtyZXR1cm4gdC5idWZmZXI9bmV3IFVpbnQ4QXJyYXkoZS5idWZmZXIpLHR9LHQuY2hlY2tPcHRpb25zPWZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IEVycm9yKCdPcHRpb25zIGlzIHJlcXVpcmVkJyk7Zm9yKHZhciB0PVsnZmlsZW5hbWUnLCdidWZmZXInLCdkb2N1bWVudFR5cGUnLCdkb2N1bWVudEZvcm1hdCddLG49dCxvPWZ1bmN0aW9uKHQpe2lmKCEodCBpbiBlKSl0aHJvdyByKCdJbnZvY2F0aW9uRXJyb3InLCdSZXF1aXJlZCBvcHRpb24gPCcrdCsnPiBpcyBub3QgZm91bmQgaW4gdGhlIGdpdmVuIG9wdGlvbnMnKX0sbD0wO2w8bi5sZW5ndGg7bCsrKW8obltsXSxsLG4pO2lmKGUuYnVmZmVyLmxlbmd0aD5hKXRocm93IHIoJ0ZpbGVTaXplRXJyb3InLCdUaGUgbWF4aW11bSBhY2NlcHRhYmxlIGZpbGUgc2l6ZSBpcyAnK3MpfTt2YXIgbD00LGE9dC5NQVhfU0laRT04Mzg4NjA4LHM9dC5IVU1BTl9SRUFEQUJMRV9NQVhfU0laRT0nOCBNQicsaT10LmdlbmVyYXRlQ2h1bmtzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLG49dC5jaHVua1NpemUsbz1uPT09dm9pZCAwPzE2Mzg0Om4sbD1bXSxhPTA7YTxlLmxlbmd0aDthKyspcj1lW2FdLDA9PWElbz9sLnB1c2goW3JdKTpsW2wubGVuZ3RoLTFdLnB1c2gocik7Zm9yKHZhciBzPWwsaT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZSl9LGM9W10scD0wO3A8cy5sZW5ndGg7cCsrKWMucHVzaChpKHNbcF0scCxzKSk7cmV0dXJuIGMuY29uY2F0KG5ldyBVaW50OEFycmF5KFtdKSl9fSxmdW5jdGlvbihlKXt2YXIgcj17dXRmODp7c3RyaW5nVG9CeXRlczpmdW5jdGlvbihlKXtyZXR1cm4gci5iaW4uc3RyaW5nVG9CeXRlcyh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoZSkpKX0sYnl0ZXNUb1N0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShyLmJpbi5ieXRlc1RvU3RyaW5nKGUpKSl9fSxiaW46e3N0cmluZ1RvQnl0ZXM6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLHI9MDtyPGUubGVuZ3RoO3IrKyl0LnB1c2goMjU1JmUuY2hhckNvZGVBdChyKSk7cmV0dXJuIHR9LGJ5dGVzVG9TdHJpbmc6ZnVuY3Rpb24oZSl7Zm9yKHZhciByPVtdLG49MDtuPGUubGVuZ3RoO24rKylyLnB1c2godChlW25dKSk7cmV0dXJuIHIuam9pbignJyl9fX07ZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7ZnVuY3Rpb24gbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCdfX2VzTW9kdWxlJyx7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHIsbj0wO248dC5sZW5ndGg7bisrKXI9dFtuXSxyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwndmFsdWUnaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpO3IoMTAxKSxyKDEwMykscigxMDgpLHIoMTA5KSxyKDExMCkscigxMTEpLHIoMTEyKSxyKDExMykscigxMTQpLHIoMTE1KSxyKDExNikscigxMTgpLHIoMTE5KSxyKDEyMCkscigxMjEpLHIoMTIyKSxyKDEyNCkscigxMjUpLHIoMTI2KSxyKDEyNykscigxMjgpLHIoMTI5KSxyKDEzMCkscigxMzEpLHIoMTMyKSxyKDEzMykscigxMzQpLHIoMTM1KSxyKDEzOSkscigxNDIpLHIoMTQzKSxyKDE0NCkscigxNDUpLHIoMTQ2KSxyKDE0NykscigxNDgpLHIoMTQ5KSxyKDE1MCkscigxNTEpLHIoMTUyKSxyKDE1MykscigxNTQpLHIoMTU1KSxyKDE1NikscigxNTcpLHIoMTU4KSxyKDE1OSkscigxNjApLHIoMTYxKSxyKDE2MikscigxNjMpLHIoMTY1KSxyKDE2NikscigxNjcpLHIoMTY4KSxyKDE2OSkscigxNzApLHIoMTcxKSxyKDE3MikscigxNzMpLHIoNjEpLHIoMTc0KSxyKDE3NSkscigxNzYpLHIoMTc3KSxyKDE3OCkscigxNzkpLHIoMTgwKSxyKDE4MSkscigxODIpLHIoMTgzKSxyKDE4NCkscigxODUpLHIoMTg2KSxyKDE4NykscigxODgpLHIoMTkwKSxyKDE5MSkscigxOTIpLHIoMTkzKSxyKDE5NCkscigxOTUpLHIoMTk2KSxyKDE5NykscigxOTgpLHIoMTk5KSxyKDIwMCkscigyMDEpLHIoMjAyKSxyKDIwMykscigyMDQpLHIoMjA1KSxyKDIwNikscigyMDcpLHIoMjA4KTt2YXIgbD1yKDk4KSxhPXIoMjA5KSxzPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0oYSksaT0wLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe24odGhpcyxlKSx0aGlzLmNvbmZpZz10LHRoaXMuY2xpZW50cz17fSx0aGlzLndyYXBDb25uZWN0aW9uKCl9cmV0dXJuIG8oZSxbe2tleTondXBsb2FkJyx2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9dGhpcy5jb25maWcuZGVidWcsbj0oMCxsLmdldEZpbGUpKGUpOygwLGwuY2hlY2tPcHRpb25zKShuKSxpKz0xO3ZhciBvPW5ldyBzLmRlZmF1bHQoe3NlbmQ6dGhpcy5zZW5kLGZpbGU6bixyZXFJZDppfSk7cmV0dXJuIHRoaXMuY2xpZW50c1tpXT17Y2xpZW50Om99LG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsYSl7dC5jbGllbnRzW2ldLnByb21pc2U9e3Jlc29sdmU6ZSxyZWplY3Q6YX0sKDAsbC5sb2cpKHZvaWQgMCE9PXImJnIsJ1VwbG9hZGluZyBzdGFydGVkLCBGaWxlIG9wdGlvbnM6JyxuKSxvLnJlcXVlc3RVcGxvYWQoKX0pfX0se2tleTond3JhcENvbm5lY3Rpb24nLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMuY29uZmlnLHI9dC5jb25uZWN0aW9uLG49dC5kZWJ1ZyxvPXZvaWQgMCE9PW4mJm47aWYoIXJ8fDEhPT1yLnJlYWR5U3RhdGUpdGhyb3coMCxsLmNyZWF0ZUVycm9yKSgnQ29ubmVjdGlvbkVycm9yJywnQ29ubmVjdGlvbiBpcyBub3QgcmVhZHkhJyk7dGhpcy5jb25uZWN0aW9uPXIsdGhpcy5zZW5kPWZ1bmN0aW9uKGUpeygwLGwubG9nKShvLCc8U2VudD46JyxlKSxyLnNlbmQoZSl9O3ZhciBhPXIub25tZXNzYWdlO3Iub25tZXNzYWdlPWZ1bmN0aW9uKHQpe3ZhciBuPXQuZGF0YTsoMCxsLmxvZykobywnPFJlY2VpdmVkPjonLG4pO3ZhciBzPUpTT04ucGFyc2Uobik7aWYoYSYmKCFzLnBhc3N0aHJvdWdofHwhcy5wYXNzdGhyb3VnaC5kb2N1bWVudF91cGxvYWQpKXJldHVybiB2b2lkIGEuY2FsbChyLHQpO3ZhciBpPXMucGFzc3Rocm91Z2guZG9jdW1lbnRfdXBsb2FkO2lmKGEmJiFpKXJldHVybiB2b2lkIGEuY2FsbChyLHQpO2lmKHMucmVxX2lkIGluIGUuY2xpZW50cyl7dmFyIGM9ZS5jbGllbnRzW3MucmVxX2lkXSxwPWMuY2xpZW50LGQ9Yy5wcm9taXNlO3RyeXt2YXIgdT1wLmhhbmRsZU1lc3NhZ2Uocyk7dSYmKCgwLGwubG9nKShvLCdVcGxvYWQgc3VjY2Vzc2Z1bCwgdXBsb2FkIGluZm86Jyx1KSxkLnJlc29sdmUodSkpfWNhdGNoKHQpe2QucmVqZWN0KHQpLCgwLGwubG9nKShvLHQpfX19fX1dKSxlfSgpO3QuZGVmYXVsdD1jfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoMCksbz1yKDUzKSxsPXIoNzEpLGE9cigyKSxzPXIoMzEpLGk9cig2KSxjPXIoMSkscD1yKDMpLkFycmF5QnVmZmVyLGQ9cig0MiksdT1sLkFycmF5QnVmZmVyLGc9bC5EYXRhVmlldyxoPW8uQUJWJiZwLmlzVmlldyx5PXUucHJvdG90eXBlLnNsaWNlLGY9by5WSUVXLG09J0FycmF5QnVmZmVyJztuKG4uRytuLlcrbi5GKihwIT09dSkse0FycmF5QnVmZmVyOnV9KSxuKG4uUytuLkYqIW8uQ09OU1RSLG0se2lzVmlldzpmdW5jdGlvbihlKXtyZXR1cm4gaCYmaChlKXx8YyhlKSYmZiBpbiBlfX0pLG4obi5QK24uVStuLkYqcig1KShmdW5jdGlvbigpe3JldHVybiFuZXcgdSgyKS5zbGljZSgxLHZvaWQgMCkuYnl0ZUxlbmd0aH0pLG0se3NsaWNlOmZ1bmN0aW9uKGUsdCl7aWYoeSE9PXZvaWQgMCYmdD09PXZvaWQgMClyZXR1cm4geS5jYWxsKGEodGhpcyksZSk7Zm9yKHZhciByPWEodGhpcykuYnl0ZUxlbmd0aCxuPXMoZSxyKSxvPXModm9pZCAwPT09dD9yOnQsciksbD1uZXcoZCh0aGlzLHUpKShpKG8tbikpLGM9bmV3IGcodGhpcykscD1uZXcgZyhsKSxoPTA7bjxvOylwLnNldFVpbnQ4KGgrKyxjLmdldFVpbnQ4KG4rKykpO3JldHVybiBsfX0pLHIoNDMpKG0pfSxmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXIoNDEpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJyxGdW5jdGlvbi50b1N0cmluZyl9LGZ1bmN0aW9uKGUsdCxyKXtyKDE1KSgnSW50OCcsMSxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cig3KSxvPXIoMiksbD1yKDI2KTtlLmV4cG9ydHM9cig4KT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHQpe28oZSk7Zm9yKHZhciByLGE9bCh0KSxzPWEubGVuZ3RoLGM9MDtzPmM7KW4uZihlLHI9YVtjKytdLHRbcl0pO3JldHVybiBlfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTA2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3KG4oZSkpKHQpfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMSksbz1yKDc1KSxsPXIoNCkoJ3NwZWNpZXMnKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIG8oZSkmJih0PWUuY29uc3RydWN0b3IsJ2Z1bmN0aW9uJz09dHlwZW9mIHQmJih0PT09QXJyYXl8fG8odC5wcm90b3R5cGUpKSYmKHQ9dm9pZCAwKSxuKHQpJiYodD10W2xdLG51bGw9PT10JiYodD12b2lkIDApKSksdm9pZCAwPT09dD9BcnJheTp0fX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDM4KSxvPXIoMjEpLGw9cigzMiksYT17fTtyKDkpKGEscig0KSgnaXRlcmF0b3InKSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtlLnByb3RvdHlwZT1uKGEse25leHQ6bygxLHIpfSksbChlLHQrJyBJdGVyYXRvcicpfX0sZnVuY3Rpb24oZSx0LHIpe3IoMTUpKCdVaW50OCcsMSxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0pfSxmdW5jdGlvbihlLHQscil7cigxNSkoJ1VpbnQ4JywxLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIGUodGhpcyx0LHIsbil9fSwhMCl9LGZ1bmN0aW9uKGUsdCxyKXtyKDE1KSgnSW50MTYnLDIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gZSh0aGlzLHQscixuKX19KX0sZnVuY3Rpb24oZSx0LHIpe3IoMTUpKCdVaW50MTYnLDIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gZSh0aGlzLHQscixuKX19KX0sZnVuY3Rpb24oZSx0LHIpe3IoMTUpKCdJbnQzMicsNCxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0pfSxmdW5jdGlvbihlLHQscil7cigxNSkoJ1VpbnQzMicsNCxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0pfSxmdW5jdGlvbihlLHQscil7cigxNSkoJ0Zsb2F0MzInLDQsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gZSh0aGlzLHQscixuKX19KX0sZnVuY3Rpb24oZSx0LHIpe3IoMTUpKCdGbG9hdDY0Jyw4LGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIGUodGhpcyx0LHIsbil9fSl9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cig3OSksbz1yKDI3KSxsPSdNYXAnO2UuZXhwb3J0cz1yKDQ3KShsLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKHRoaXMsMDxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1swXTp2b2lkIDApfX0se2dldDpmdW5jdGlvbihlKXt2YXIgdD1uLmdldEVudHJ5KG8odGhpcyxsKSxlKTtyZXR1cm4gdCYmdC52fSxzZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5kZWYobyh0aGlzLGwpLDA9PT1lPzA6ZSx0KX19LG4sITApfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxKSxvPXIoODEpLnNldDtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBsLGE9dC5jb25zdHJ1Y3RvcjtyZXR1cm4gYSE9PXImJidmdW5jdGlvbic9PXR5cGVvZiBhJiYobD1hLnByb3RvdHlwZSkhPT1yLnByb3RvdHlwZSYmbihsKSYmbyYmbyhlLGwpLGV9fSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoNzkpLG89cigyNyksbD0nU2V0JztlLmV4cG9ydHM9cig0NykobCxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLDA8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMF06dm9pZCAwKX19LHthZGQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG4uZGVmKG8odGhpcyxsKSxlPTA9PT1lPzA6ZSxlKX19LG4pfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuLG89cigzKSxsPXIoMzkpKDApLGE9cigxNykscz1yKDE5KSxpPXIoODIpLGM9cig4MykscD1yKDEpLGQ9cigyNyksdT1yKDI3KSxnPSFvLkFjdGl2ZVhPYmplY3QmJidBY3RpdmVYT2JqZWN0J2luIG8saD0nV2Vha01hcCcseT1zLmdldFdlYWssZj1PYmplY3QuaXNFeHRlbnNpYmxlLG09Yy51ZnN0b3JlLEU9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSx4PXtnZXQ6ZnVuY3Rpb24oZSl7aWYocChlKSl7dmFyIHQ9eShlKTtyZXR1cm4hMD09PXQ/bShkKHRoaXMsaCkpLmdldChlKTp0P3RbdGhpcy5faV06dm9pZCAwfX0sc2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGMuZGVmKGQodGhpcyxoKSxlLHQpfX0sXz1lLmV4cG9ydHM9cig0NykoaCxFLHgsYywhMCwhMCk7dSYmZyYmKG49Yy5nZXRDb25zdHJ1Y3RvcihFLGgpLGkobi5wcm90b3R5cGUseCkscy5ORUVEPSEwLGwoWydkZWxldGUnLCdoYXMnLCdnZXQnLCdzZXQnXSxmdW5jdGlvbihlKXt2YXIgdD1fLnByb3RvdHlwZSxyPXRbZV07YSh0LGUsZnVuY3Rpb24odCxvKXtpZihwKHQpJiYhZih0KSl7dGhpcy5fZnx8KHRoaXMuX2Y9bmV3IG4pO3ZhciBsPXRoaXMuX2ZbZV0odCxvKTtyZXR1cm4nc2V0Jz09ZT90aGlzOmx9cmV0dXJuIHIuY2FsbCh0aGlzLHQsbyl9KX0pKX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDgzKSxvPXIoMjcpLGw9J1dlYWtTZXQnO3IoNDcpKGwsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywwPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSx7YWRkOmZ1bmN0aW9uKGUpe3JldHVybiBuLmRlZihvKHRoaXMsbCksZSwhMCl9fSxuLCExLCEwKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksbz1yKDI0KSxsPXIoMiksYT0ocigzKS5SZWZsZWN0fHx7fSkuYXBwbHkscz1GdW5jdGlvbi5hcHBseTtuKG4uUytuLkYqIXIoNSkoZnVuY3Rpb24oKXthKGZ1bmN0aW9uKCl7fSl9KSwnUmVmbGVjdCcse2FwcGx5OmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1vKGUpLGk9bChyKTtyZXR1cm4gYT9hKG4sdCxpKTpzLmNhbGwobix0LGkpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxvPXIoMzgpLGw9cigyNCksYT1yKDIpLHM9cigxKSxpPXIoNSksYz1yKDEyMykscD0ocigzKS5SZWZsZWN0fHx7fSkuY29uc3RydWN0LGQ9aShmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIShwKGZ1bmN0aW9uKCl7fSxbXSxlKWluc3RhbmNlb2YgZSl9KSx1PSFpKGZ1bmN0aW9uKCl7cChmdW5jdGlvbigpe30pfSk7bihuLlMrbi5GKihkfHx1KSwnUmVmbGVjdCcse2NvbnN0cnVjdDpmdW5jdGlvbihlLHQpe2woZSksYSh0KTt2YXIgcj0zPmFyZ3VtZW50cy5sZW5ndGg/ZTpsKGFyZ3VtZW50c1syXSk7aWYodSYmIWQpcmV0dXJuIHAoZSx0LHIpO2lmKGU9PXIpe3N3aXRjaCh0Lmxlbmd0aCl7Y2FzZSAwOnJldHVybiBuZXcgZTtjYXNlIDE6cmV0dXJuIG5ldyBlKHRbMF0pO2Nhc2UgMjpyZXR1cm4gbmV3IGUodFswXSx0WzFdKTtjYXNlIDM6cmV0dXJuIG5ldyBlKHRbMF0sdFsxXSx0WzJdKTtjYXNlIDQ6cmV0dXJuIG5ldyBlKHRbMF0sdFsxXSx0WzJdLHRbM10pO312YXIgbj1bbnVsbF07cmV0dXJuIG4ucHVzaC5hcHBseShuLHQpLG5ldyhjLmFwcGx5KGUsbikpfXZhciBpPXIucHJvdG90eXBlLGc9byhzKGkpP2k6T2JqZWN0LnByb3RvdHlwZSksaD1GdW5jdGlvbi5hcHBseS5jYWxsKGUsZyx0KTtyZXR1cm4gcyhoKT9oOmd9fSl9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cigyNCksbz1yKDEpLGw9cig4NCksYT1bXS5zbGljZSxzPXt9LGk9ZnVuY3Rpb24oZSx0LHIpe2lmKCEodCBpbiBzKSl7Zm9yKHZhciBvPVtdLG49MDtuPHQ7bisrKW9bbl09J2FbJytuKyddJztzW3RdPUZ1bmN0aW9uKCdGLGEnLCdyZXR1cm4gbmV3IEYoJytvLmpvaW4oJywnKSsnKScpfXJldHVybiBzW3RdKGUscil9O2UuZXhwb3J0cz1GdW5jdGlvbi5iaW5kfHxmdW5jdGlvbihlKXt2YXIgdD1uKHRoaXMpLHI9YS5jYWxsKGFyZ3VtZW50cywxKSxzPWZ1bmN0aW9uKCl7dmFyIG49ci5jb25jYXQoYS5jYWxsKGFyZ3VtZW50cykpO3JldHVybiB0aGlzIGluc3RhbmNlb2Ygcz9pKHQsbi5sZW5ndGgsbik6bCh0LG4sZSl9O3JldHVybiBvKHQucHJvdG90eXBlKSYmKHMucHJvdG90eXBlPXQucHJvdG90eXBlKSxzfX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNyksbz1yKDApLGw9cigyKSxhPXIoMzYpO28oby5TK28uRipyKDUpKGZ1bmN0aW9uKCl7UmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShuLmYoe30sMSx7dmFsdWU6MX0pLDEse3ZhbHVlOjJ9KX0pLCdSZWZsZWN0Jyx7ZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oZSx0LHIpe2woZSksdD1hKHQsITApLGwocik7dHJ5e3JldHVybiBuLmYoZSx0LHIpLCEwfWNhdGNoKHQpe3JldHVybiExfX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksbz1yKDE2KS5mLGw9cigyKTtuKG4uUywnUmVmbGVjdCcse2RlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKGUsdCl7dmFyIHI9byhsKGUpLHQpO3JldHVybiByJiYhci5jb25maWd1cmFibGU/ITE6ZGVsZXRlIGVbdF19fSl9LGZ1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUsdCl7dmFyIHIscyxwPTM+YXJndW1lbnRzLmxlbmd0aD9lOmFyZ3VtZW50c1syXTtyZXR1cm4gYyhlKT09PXA/ZVt0XToocj1vLmYoZSx0KSk/YShyLCd2YWx1ZScpP3IudmFsdWU6dm9pZCAwPT09ci5nZXQ/dm9pZCAwOnIuZ2V0LmNhbGwocCk6aShzPWwoZSkpP24ocyx0LHApOnZvaWQgMH12YXIgbz1yKDE2KSxsPXIoMzQpLGE9cigxMCkscz1yKDApLGk9cigxKSxjPXIoMik7cyhzLlMsJ1JlZmxlY3QnLHtnZXQ6bn0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxNiksbz1yKDApLGw9cigyKTtvKG8uUywnUmVmbGVjdCcse2dldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbihlLHQpe3JldHVybiBuLmYobChlKSx0KX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksbz1yKDM0KSxsPXIoMik7bihuLlMsJ1JlZmxlY3QnLHtnZXRQcm90b3R5cGVPZjpmdW5jdGlvbihlKXtyZXR1cm4gbyhsKGUpKX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCk7bihuLlMsJ1JlZmxlY3QnLHtoYXM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCBpbiBlfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxvPXIoMiksbD1PYmplY3QuaXNFeHRlbnNpYmxlO24obi5TLCdSZWZsZWN0Jyx7aXNFeHRlbnNpYmxlOmZ1bmN0aW9uKGUpe3JldHVybiBvKGUpLCFsfHxsKGUpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKTtuKG4uUywnUmVmbGVjdCcse293bktleXM6cig4NSl9KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksbz1yKDIpLGw9T2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO24obi5TLCdSZWZsZWN0Jyx7cHJldmVudEV4dGVuc2lvbnM6ZnVuY3Rpb24oZSl7byhlKTt0cnl7cmV0dXJuIGwmJmwoZSksITB9Y2F0Y2godCl7cmV0dXJuITF9fX0pfSxmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlLHQscil7dmFyIGksdSxnPTQ+YXJndW1lbnRzLmxlbmd0aD9lOmFyZ3VtZW50c1szXSxoPWwuZihwKGUpLHQpO2lmKCFoKXtpZihkKHU9YShlKSkpcmV0dXJuIG4odSx0LHIsZyk7aD1jKDApfWlmKHMoaCwndmFsdWUnKSl7aWYoITE9PT1oLndyaXRhYmxlfHwhZChnKSlyZXR1cm4hMTtpZihpPWwuZihnLHQpKXtpZihpLmdldHx8aS5zZXR8fCExPT09aS53cml0YWJsZSlyZXR1cm4hMTtpLnZhbHVlPXIsby5mKGcsdCxpKX1lbHNlIG8uZihnLHQsYygwLHIpKTtyZXR1cm4hMH1yZXR1cm4gaC5zZXQhPT12b2lkIDAmJihoLnNldC5jYWxsKGcsciksITApfXZhciBvPXIoNyksbD1yKDE2KSxhPXIoMzQpLHM9cigxMCksaT1yKDApLGM9cigyMSkscD1yKDIpLGQ9cigxKTtpKGkuUywnUmVmbGVjdCcse3NldDpufSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLG89cig4MSk7byYmbihuLlMsJ1JlZmxlY3QnLHtzZXRQcm90b3R5cGVPZjpmdW5jdGlvbihlLHQpe28uY2hlY2soZSx0KTt0cnl7cmV0dXJuIG8uc2V0KGUsdCksITB9Y2F0Y2godCl7cmV0dXJuITF9fX0pfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuLG8sbCxhLHM9cigyMyksaT1yKDMpLGM9cigxNCkscD1yKDQ0KSxkPXIoMCksdT1yKDEpLGc9cigyNCksaD1yKDI5KSx5PXIoNDYpLGY9cig0MiksbT1yKDYyKS5zZXQsRT1yKDEzNikoKSx4PXIoODYpLF89cigxMzcpLFM9cig0OSksVD1yKDEzOCksYj0nUHJvbWlzZScsUD1pLlR5cGVFcnJvcixPPWkucHJvY2Vzcyx2PU8mJk8udmVyc2lvbnMsST12JiZ2LnY4fHwnJyxBPWlbYl0sUj0ncHJvY2Vzcyc9PXAoTyksaz1mdW5jdGlvbigpe30sTD1vPXguZixGPSEhZnVuY3Rpb24oKXt0cnl7dmFyIGU9QS5yZXNvbHZlKDEpLHQ9KGUuY29uc3RydWN0b3I9e30pW3IoNCkoJ3NwZWNpZXMnKV09ZnVuY3Rpb24oZSl7ZShrLGspfTtyZXR1cm4oUnx8J2Z1bmN0aW9uJz09dHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCkmJmUudGhlbihrKWluc3RhbmNlb2YgdCYmMCE9PUkuaW5kZXhPZignNi42JykmJi0xPT09Uy5pbmRleE9mKCdDaHJvbWUvNjYnKX1jYXRjaCh0KXt9fSgpLE49ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHUoZSkmJidmdW5jdGlvbic9PXR5cGVvZih0PWUudGhlbikmJnR9LE09ZnVuY3Rpb24oZSx0KXtpZighZS5fbil7ZS5fbj0hMDt2YXIgcj1lLl9jO0UoZnVuY3Rpb24oKXtmb3IodmFyIG49ZS5fdixvPTE9PWUuX3MsbD0wLGE9ZnVuY3Rpb24odCl7dmFyIHIsbCxhLHM9bz90Lm9rOnQuZmFpbCxpPXQucmVzb2x2ZSxjPXQucmVqZWN0LHA9dC5kb21haW47dHJ5e3M/KCFvJiYoMj09ZS5faCYmQyhlKSxlLl9oPTEpLCEwPT09cz9yPW46KHAmJnAuZW50ZXIoKSxyPXMobikscCYmKHAuZXhpdCgpLGE9ITApKSxyPT09dC5wcm9taXNlP2MoUCgnUHJvbWlzZS1jaGFpbiBjeWNsZScpKToobD1OKHIpKT9sLmNhbGwocixpLGMpOmkocikpOmMobil9Y2F0Y2godCl7cCYmIWEmJnAuZXhpdCgpLGModCl9fTtyLmxlbmd0aD5sOylhKHJbbCsrXSk7ZS5fYz1bXSxlLl9uPSExLHQmJiFlLl9oJiZ3KGUpfSl9fSx3PWZ1bmN0aW9uKGUpe20uY2FsbChpLGZ1bmN0aW9uKCl7dmFyIHQscixuLG89ZS5fdixsPUQoZSk7aWYobCYmKHQ9XyhmdW5jdGlvbigpe1I/Ty5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLG8sZSk6KHI9aS5vbnVuaGFuZGxlZHJlamVjdGlvbik/cih7cHJvbWlzZTplLHJlYXNvbjpvfSk6KG49aS5jb25zb2xlKSYmbi5lcnJvciYmbi5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJyxvKX0pLGUuX2g9Unx8RChlKT8yOjEpLGUuX2E9dm9pZCAwLGwmJnQuZSl0aHJvdyB0LnZ9KX0sRD1mdW5jdGlvbihlKXtyZXR1cm4gMSE9PWUuX2gmJjA9PT0oZS5fYXx8ZS5fYykubGVuZ3RofSxDPWZ1bmN0aW9uKGUpe20uY2FsbChpLGZ1bmN0aW9uKCl7dmFyIHQ7Uj9PLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLGUpOih0PWkub25yZWplY3Rpb25oYW5kbGVkKSYmdCh7cHJvbWlzZTplLHJlYXNvbjplLl92fSl9KX0saj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuX2R8fCh0Ll9kPSEwLHQ9dC5fd3x8dCx0Ll92PWUsdC5fcz0yLCF0Ll9hJiYodC5fYT10Ll9jLnNsaWNlKCkpLE0odCwhMCkpfSxZPWZ1bmN0aW9uKGUpe3ZhciB0LHI9dGhpcztpZighci5fZCl7ci5fZD0hMCxyPXIuX3d8fHI7dHJ5e2lmKHI9PT1lKXRocm93IFAoJ1Byb21pc2UgY2FuXFxcXCd0IGJlIHJlc29sdmVkIGl0c2VsZicpOyh0PU4oZSkpP0UoZnVuY3Rpb24oKXt2YXIgbj17X3c6cixfZDohMX07dHJ5e3QuY2FsbChlLGMoWSxuLDEpLGMoaixuLDEpKX1jYXRjaCh0KXtqLmNhbGwobix0KX19KTooci5fdj1lLHIuX3M9MSxNKHIsITEpKX1jYXRjaCh0KXtqLmNhbGwoe193OnIsX2Q6ITF9LHQpfX19O0Z8fChBPWZ1bmN0aW9uKGUpe2godGhpcyxBLGIsJ19oJyksZyhlKSxuLmNhbGwodGhpcyk7dHJ5e2UoYyhZLHRoaXMsMSksYyhqLHRoaXMsMSkpfWNhdGNoKGUpe2ouY2FsbCh0aGlzLGUpfX0sbj1mdW5jdGlvbigpe3RoaXMuX2M9W10sdGhpcy5fYT12b2lkIDAsdGhpcy5fcz0wLHRoaXMuX2Q9ITEsdGhpcy5fdj12b2lkIDAsdGhpcy5faD0wLHRoaXMuX249ITF9LG4ucHJvdG90eXBlPXIoMjgpKEEucHJvdG90eXBlLHt0aGVuOmZ1bmN0aW9uKGUsdCl7dmFyIHI9TChmKHRoaXMsQSkpO3JldHVybiByLm9rPSdmdW5jdGlvbichPXR5cGVvZiBlfHxlLHIuZmFpbD0nZnVuY3Rpb24nPT10eXBlb2YgdCYmdCxyLmRvbWFpbj1SP08uZG9tYWluOnZvaWQgMCx0aGlzLl9jLnB1c2gociksdGhpcy5fYSYmdGhpcy5fYS5wdXNoKHIpLHRoaXMuX3MmJk0odGhpcywhMSksci5wcm9taXNlfSxjYXRjaDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxlKX19KSxsPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG47dGhpcy5wcm9taXNlPWUsdGhpcy5yZXNvbHZlPWMoWSxlLDEpLHRoaXMucmVqZWN0PWMoaixlLDEpfSx4LmY9TD1mdW5jdGlvbihlKXtyZXR1cm4gZT09PUF8fGU9PT1hP25ldyBsKGUpOm8oZSl9KSxkKGQuRytkLlcrZC5GKiFGLHtQcm9taXNlOkF9KSxyKDMyKShBLGIpLHIoNDMpKGIpLGE9cigyMClbYl0sZChkLlMrZC5GKiFGLGIse3JlamVjdDpmdW5jdGlvbihlKXt2YXIgdD1MKHRoaXMpLHI9dC5yZWplY3Q7cmV0dXJuIHIoZSksdC5wcm9taXNlfX0pLGQoZC5TK2QuRiooc3x8IUYpLGIse3Jlc29sdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIFQocyYmdGhpcz09PWE/QTp0aGlzLGUpfX0pLGQoZC5TK2QuRiohKEYmJnIoNDUpKGZ1bmN0aW9uKGUpe0EuYWxsKGUpWydjYXRjaCddKGspfSkpLGIse2FsbDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9TCh0KSxuPXIucmVzb2x2ZSxvPXIucmVqZWN0LGw9XyhmdW5jdGlvbigpe3ZhciByPVtdLGw9MCxhPTE7eShlLCExLGZ1bmN0aW9uKGUpe3ZhciBzPWwrKyxpPSExO3IucHVzaCh2b2lkIDApLGErKyx0LnJlc29sdmUoZSkudGhlbihmdW5jdGlvbihlKXtpfHwoaT0hMCxyW3NdPWUsLS1hfHxuKHIpKX0sbyl9KSwtLWF8fG4ocil9KTtyZXR1cm4gbC5lJiZvKGwudiksci5wcm9taXNlfSxyYWNlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1MKHQpLG49ci5yZWplY3Qsbz1fKGZ1bmN0aW9uKCl7eShlLCExLGZ1bmN0aW9uKGUpe3QucmVzb2x2ZShlKS50aGVuKHIucmVzb2x2ZSxuKX0pfSk7cmV0dXJuIG8uZSYmbihvLnYpLHIucHJvbWlzZX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMyksbz1yKDYyKS5zZXQsbD1uLk11dGF0aW9uT2JzZXJ2ZXJ8fG4uV2ViS2l0TXV0YXRpb25PYnNlcnZlcixhPW4ucHJvY2VzcyxzPW4uUHJvbWlzZSxpPSdwcm9jZXNzJz09cigzMCkoYSk7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIHQscixjLGU9ZnVuY3Rpb24oKXt2YXIgZSxuO2ZvcihpJiYoZT1hLmRvbWFpbikmJmUuZXhpdCgpO3Q7KXtuPXQuZm4sdD10Lm5leHQ7dHJ5e24oKX1jYXRjaChuKXt0aHJvdyB0P2MoKTpyPXZvaWQgMCxufX1yPXZvaWQgMCxlJiZlLmVudGVyKCl9O2lmKGkpYz1mdW5jdGlvbigpe2EubmV4dFRpY2soZSl9O2Vsc2UgaWYobCYmIShuLm5hdmlnYXRvciYmbi5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpe3ZhciBwPSEwLGQ9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO25ldyBsKGUpLm9ic2VydmUoZCx7Y2hhcmFjdGVyRGF0YTohMH0pLGM9ZnVuY3Rpb24oKXtkLmRhdGE9cD0hcH19ZWxzZSBpZihzJiZzLnJlc29sdmUpe3ZhciB1PXMucmVzb2x2ZSh2b2lkIDApO2M9ZnVuY3Rpb24oKXt1LnRoZW4oZSl9fWVsc2UgYz1mdW5jdGlvbigpe28uY2FsbChuLGUpfTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49e2ZuOmUsbmV4dDp2b2lkIDB9O3ImJihyLm5leHQ9biksdHx8KHQ9bixjKCkpLHI9bn19fSxmdW5jdGlvbihlKXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybntlOiExLHY6ZSgpfX1jYXRjaCh0KXtyZXR1cm57ZTohMCx2OnR9fX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDIpLG89cigxKSxsPXIoODYpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKG4oZSksbyh0KSYmdC5jb25zdHJ1Y3Rvcj09PWUpcmV0dXJuIHQ7dmFyIHI9bC5mKGUpLGE9ci5yZXNvbHZlO3JldHVybiBhKHQpLHIucHJvbWlzZX19LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cigzKSxvPXIoMTApLGw9cig4KSxhPXIoMCkscz1yKDE3KSxjPXIoMTkpLktFWSxpPXIoNSkscD1yKDQxKSxkPXIoMzIpLHU9cigyMiksZz1yKDQpLGg9cig4NykseT1yKDE0MCksZj1yKDE0MSksbT1yKDc1KSxFPXIoMikseD1yKDEpLF89cigxMSksUz1yKDM2KSxUPXIoMjEpLGI9cigzOCksUD1yKDg4KSxPPXIoMTYpLHY9cig3KSxJPXIoMjYpLEE9Ty5mLFI9di5mLEw9UC5mLEY9bi5TeW1ib2wsTj1uLkpTT04sTT1OJiZOLnN0cmluZ2lmeSx3PSdwcm90b3R5cGUnLEM9ZygnX2hpZGRlbicpLEQ9ZygndG9QcmltaXRpdmUnKSxZPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLEI9cCgnc3ltYm9sLXJlZ2lzdHJ5JyksRz1wKCdzeW1ib2xzJyksVT1wKCdvcC1zeW1ib2xzJyksSD1PYmplY3Rbd10sVz0nZnVuY3Rpb24nPT10eXBlb2YgRixWPW4uUU9iamVjdCx6PSFWfHwhVlt3XXx8IVZbd10uZmluZENoaWxkLCQ9bCYmaShmdW5jdGlvbigpe3JldHVybiA3IT1iKFIoe30sJ2EnLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUih0aGlzLCdhJyx7dmFsdWU6N30pLmF9fSkpLmF9KT9mdW5jdGlvbihlLHQscil7dmFyIG49QShILHQpO24mJmRlbGV0ZSBIW3RdLFIoZSx0LHIpLG4mJmUhPT1IJiZSKEgsdCxuKX06UixLPWZ1bmN0aW9uKGUpe3ZhciB0PUdbZV09YihGW3ddKTtyZXR1cm4gdC5faz1lLHR9LHE9VyYmJ3N5bWJvbCc9PXR5cGVvZiBGLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybidzeW1ib2wnPT10eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBGfSxYPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT09PUgmJlgoVSx0LHIpLEUoZSksdD1TKHQsITApLEUociksbyhHLHQpPyhyLmVudW1lcmFibGU/KG8oZSxDKSYmZVtDXVt0XSYmKGVbQ11bdF09ITEpLHI9YihyLHtlbnVtZXJhYmxlOlQoMCwhMSl9KSk6KCFvKGUsQykmJlIoZSxDLFQoMSx7fSkpLGVbQ11bdF09ITApLCQoZSx0LHIpKTpSKGUsdCxyKX0sWj1mdW5jdGlvbihlLHQpe0UoZSk7Zm9yKHZhciByLG49Zih0PV8odCkpLG89MCxhPW4ubGVuZ3RoO2E+bzspWChlLHI9bltvKytdLHRbcl0pO3JldHVybiBlfSxKPWZ1bmN0aW9uKGUpe3ZhciB0PVkuY2FsbCh0aGlzLGU9UyhlLCEwKSk7cmV0dXJuIHRoaXM9PT1IJiZvKEcsZSkmJiFvKFUsZSk/ITE6dHx8IW8odGhpcyxlKXx8IW8oRyxlKXx8byh0aGlzLEMpJiZ0aGlzW0NdW2VdP3Q6ITB9LFE9ZnVuY3Rpb24oZSx0KXtpZihlPV8oZSksdD1TKHQsITApLGUhPT1IfHwhbyhHLHQpfHxvKFUsdCkpe3ZhciByPUEoZSx0KTtyZXR1cm4gciYmbyhHLHQpJiYhKG8oZSxDKSYmZVtDXVt0XSkmJihyLmVudW1lcmFibGU9ITApLHJ9fSxlZT1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1MKF8oZSkpLG49W10sbD0wO3IubGVuZ3RoPmw7KW8oRyx0PXJbbCsrXSl8fHQ9PUN8fHQ9PWN8fG4ucHVzaCh0KTtyZXR1cm4gbn0sdGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9ZT09PUgsbj1MKHI/VTpfKGUpKSxsPVtdLGE9MDtuLmxlbmd0aD5hOylvKEcsdD1uW2ErK10pJiYoIXJ8fG8oSCx0KSkmJmwucHVzaChHW3RdKTtyZXR1cm4gbH07V3x8KEY9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgRil0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTt2YXIgZT11KDA8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMF06dm9pZCAwKSx0PWZ1bmN0aW9uKHIpe3RoaXM9PT1IJiZ0LmNhbGwoVSxyKSxvKHRoaXMsQykmJm8odGhpc1tDXSxlKSYmKHRoaXNbQ11bZV09ITEpLCQodGhpcyxlLFQoMSxyKSl9O3JldHVybiBsJiZ6JiYkKEgsZSx7Y29uZmlndXJhYmxlOiEwLHNldDp0fSksSyhlKX0scyhGW3ddLCd0b1N0cmluZycsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fa30pLE8uZj1RLHYuZj1YLHIoMzcpLmY9UC5mPWVlLHIoNDApLmY9SixyKDQ4KS5mPXRlLGwmJiFyKDIzKSYmcyhILCdwcm9wZXJ0eUlzRW51bWVyYWJsZScsSiwhMCksaC5mPWZ1bmN0aW9uKGUpe3JldHVybiBLKGcoZSkpfSksYShhLkcrYS5XK2EuRiohVyx7U3ltYm9sOkZ9KTtmb3IodmFyIHJlPVsnaGFzSW5zdGFuY2UnLCdpc0NvbmNhdFNwcmVhZGFibGUnLCdpdGVyYXRvcicsJ21hdGNoJywncmVwbGFjZScsJ3NlYXJjaCcsJ3NwZWNpZXMnLCdzcGxpdCcsJ3RvUHJpbWl0aXZlJywndG9TdHJpbmdUYWcnLCd1bnNjb3BhYmxlcyddLG5lPTA7cmUubGVuZ3RoPm5lOylnKHJlW25lKytdKTtmb3IodmFyIGo9SShnLnN0b3JlKSxvZT0wO2oubGVuZ3RoPm9lOyl5KGpbb2UrK10pO2EoYS5TK2EuRiohVywnU3ltYm9sJyx7Zm9yOmZ1bmN0aW9uKGUpe3JldHVybiBvKEIsZSs9JycpP0JbZV06QltlXT1GKGUpfSxrZXlGb3I6ZnVuY3Rpb24oZSl7aWYoIXEoZSkpdGhyb3cgVHlwZUVycm9yKGUrJyBpcyBub3QgYSBzeW1ib2whJyk7Zm9yKHZhciB0IGluIEIpaWYoQlt0XT09PWUpcmV0dXJuIHR9LHVzZVNldHRlcjpmdW5jdGlvbigpe3o9ITB9LHVzZVNpbXBsZTpmdW5jdGlvbigpe3o9ITF9fSksYShhLlMrYS5GKiFXLCdPYmplY3QnLHtjcmVhdGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD09PXZvaWQgMD9iKGUpOlooYihlKSx0KX0sZGVmaW5lUHJvcGVydHk6WCxkZWZpbmVQcm9wZXJ0aWVzOlosZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOlEsZ2V0T3duUHJvcGVydHlOYW1lczplZSxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6dGV9KSxOJiZhKGEuUythLkYqKCFXfHxpKGZ1bmN0aW9uKCl7dmFyIGU9RigpO3JldHVybidbbnVsbF0nIT1NKFtlXSl8fCd7fSchPU0oe2E6ZX0pfHwne30nIT1NKE9iamVjdChlKSl9KSksJ0pTT04nLHtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHIsbj1bZV0sbz0xO2FyZ3VtZW50cy5sZW5ndGg+bzspbi5wdXNoKGFyZ3VtZW50c1tvKytdKTtpZihyPXQ9blsxXSwoeCh0KXx8dm9pZCAwIT09ZSkmJiFxKGUpKXJldHVybiBtKHQpfHwodD1mdW5jdGlvbihlLHQpe2lmKCdmdW5jdGlvbic9PXR5cGVvZiByJiYodD1yLmNhbGwodGhpcyxlLHQpKSwhcSh0KSlyZXR1cm4gdH0pLG5bMV09dCxNLmFwcGx5KE4sbil9fSksRlt3XVtEXXx8cig5KShGW3ddLEQsRlt3XS52YWx1ZU9mKSxkKEYsJ1N5bWJvbCcpLGQoTWF0aCwnTWF0aCcsITApLGQobi5KU09OLCdKU09OJywhMCl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDMpLG89cigyMCksbD1yKDIzKSxhPXIoODcpLHM9cig3KS5mO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1vLlN5bWJvbHx8KG8uU3ltYm9sPWw/e306bi5TeW1ib2x8fHt9KTsnXyc9PWUuY2hhckF0KDApfHxlIGluIHR8fHModCxlLHt2YWx1ZTphLmYoZSl9KX19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDI2KSxvPXIoNDgpLGw9cig0MCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW4oZSkscj1vLmY7aWYocilmb3IodmFyIGEscz1yKGUpLGM9bC5mLHA9MDtzLmxlbmd0aD5wOyljLmNhbGwoZSxhPXNbcCsrXSkmJnQucHVzaChhKTtyZXR1cm4gdH19LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpLG89cigxOSkub25GcmVlemU7cigxMykoJ2ZyZWV6ZScsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlJiZuKHQpP2Uobyh0KSk6dH19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMSksbz1yKDE5KS5vbkZyZWV6ZTtyKDEzKSgnc2VhbCcsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlJiZuKHQpP2Uobyh0KSk6dH19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMSksbz1yKDE5KS5vbkZyZWV6ZTtyKDEzKSgncHJldmVudEV4dGVuc2lvbnMnLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSYmbih0KT9lKG8odCkpOnR9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpO3IoMTMpKCdpc0Zyb3plbicsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiFuKHQpfHwhIWUmJmUodCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpO3IoMTMpKCdpc1NlYWxlZCcsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiFuKHQpfHwhIWUmJmUodCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEpO3IoMTMpKCdpc0V4dGVuc2libGUnLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4hIW4odCkmJighZXx8ZSh0KSl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDExKSxvPXIoMTYpLmY7cigxMykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtyZXR1cm4gbyhuKGUpLHQpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMiksbz1yKDM0KTtyKDEzKSgnZ2V0UHJvdG90eXBlT2YnLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigxMiksbz1yKDI2KTtyKDEzKSgna2V5cycsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG8obihlKSl9fSl9LGZ1bmN0aW9uKGUsdCxyKXtyKDEzKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsZnVuY3Rpb24oKXtyZXR1cm4gcig4OCkuZn0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKTtuKG4uUytuLkYsJ09iamVjdCcse2Fzc2lnbjpyKDgyKX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKTtuKG4uUywnT2JqZWN0Jyx7aXM6cig4OSl9KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNykuZixvPUZ1bmN0aW9uLnByb3RvdHlwZSxsPS9eXFxcXHMqZnVuY3Rpb24gKFteIChdKikvLGE9J25hbWUnO2EgaW4gb3x8cig4KSYmbihvLGEse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuKCcnK3RoaXMpLm1hdGNoKGwpWzFdfWNhdGNoKHQpe3JldHVybicnfX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksbz1yKDExKSxsPXIoNik7bihuLlMsJ1N0cmluZycse3JhdzpmdW5jdGlvbihlKXtmb3IodmFyIHQ9byhlLnJhdykscj1sKHQubGVuZ3RoKSxuPWFyZ3VtZW50cy5sZW5ndGgsYT1bXSxzPTA7cj5zOylhLnB1c2godFtzKytdKycnKSxzPG4mJmEucHVzaChhcmd1bWVudHNbc10rJycpO3JldHVybiBhLmpvaW4oJycpfX0pfSxmdW5jdGlvbihlLHIsbil7dmFyIG89bigwKSxsPW4oMzEpLGE9dCxzPVN0cmluZy5mcm9tQ29kZVBvaW50O28oby5TK28uRiooISFzJiYxIT1zLmxlbmd0aCksJ1N0cmluZycse2Zyb21Db2RlUG9pbnQ6ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD1bXSxyPWFyZ3VtZW50cy5sZW5ndGgsbj0wO3I+bjspe2lmKGU9K2FyZ3VtZW50c1tuKytdLGwoZSwxMTE0MTExKSE9PWUpdGhyb3cgUmFuZ2VFcnJvcihlKycgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO3QucHVzaCg2NTUzNj5lP2EoZSk6YSgoKGUtPTY1NTM2KT4+MTApKzU1Mjk2LGUlMTAyNCs1NjMyMCkpfXJldHVybiB0LmpvaW4oJycpfX0pfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoMCksbz1yKDkwKSghMSk7bihuLlAsJ1N0cmluZycse2NvZGVQb2ludEF0OmZ1bmN0aW9uKGUpe3JldHVybiBvKHRoaXMsZSl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApO24obi5QLCdTdHJpbmcnLHtyZXBlYXQ6cig5MSl9KX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDApLG89cig2KSxsPXIoNjMpLGE9J3N0YXJ0c1dpdGgnLHM9JydbYV07bihuLlArbi5GKnIoNjQpKGEpLCdTdHJpbmcnLHtzdGFydHNXaXRoOmZ1bmN0aW9uKGUpe3ZhciB0PWwodGhpcyxlLGEpLHI9byhkKDE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwLHQubGVuZ3RoKSksbj1lKycnO3JldHVybiB0LnNsaWNlKHIscituLmxlbmd0aCk9PT1ufX0pfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoMCksbz1yKDYpLGw9cig2MyksYT0nZW5kc1dpdGgnLHM9JydbYV07bihuLlArbi5GKnIoNjQpKGEpLCdTdHJpbmcnLHtlbmRzV2l0aDpmdW5jdGlvbihlKXt2YXIgdD1sKHRoaXMsZSxhKSxyPTE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwLG49byh0Lmxlbmd0aCkscz1yPT09dm9pZCAwP246ZChvKHIpLG4pLGk9ZSsnJztyZXR1cm4gdC5zbGljZShzLWkubGVuZ3RoLHMpPT09aX19KX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDApLG89cig2MyksbD0naW5jbHVkZXMnO24obi5QK24uRipyKDY0KShsKSwnU3RyaW5nJyx7aW5jbHVkZXM6ZnVuY3Rpb24oZSl7cmV0dXJuISF+byh0aGlzLGUsbCkuaW5kZXhPZihlLDE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sZnVuY3Rpb24oZSx0LHIpe3IoOCkmJidnJyE9Ly4vZy5mbGFncyYmcig3KS5mKFJlZ0V4cC5wcm90b3R5cGUsJ2ZsYWdzJyx7Y29uZmlndXJhYmxlOiEwLGdldDpyKDkzKX0pfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBvPXIoMiksbD1yKDYpLGE9cig2NSkscz1yKDUwKTtyKDUxKSgnbWF0Y2gnLDEsZnVuY3Rpb24oZSx0LHIsaSl7cmV0dXJuW2Z1bmN0aW9uKHIpe3ZhciBuPWUodGhpcyksbz1yPT12b2lkIDA/dm9pZCAwOnJbdF07cmV0dXJuIG89PT12b2lkIDA/bmV3IFJlZ0V4cChyKVt0XShuKycnKTpvLmNhbGwocixuKX0sZnVuY3Rpb24oZSl7dmFyIHQ9aShyLGUsdGhpcyk7aWYodC5kb25lKXJldHVybiB0LnZhbHVlO3ZhciBjPW8oZSkscD10aGlzKycnO2lmKCFjLmdsb2JhbClyZXR1cm4gcyhjLHApO3ZhciBkPWMudW5pY29kZTtjLmxhc3RJbmRleD0wO2Zvcih2YXIgdSxnPVtdLGg9MDtudWxsIT09KHU9cyhjLHApKTspe3ZhciBuPXVbMF0rJyc7Z1toXT1uLCcnPT09biYmKGMubGFzdEluZGV4PWEocCxsKGMubGFzdEluZGV4KSxkKSksaCsrfXJldHVybiAwPT1oP251bGw6Z31dfSl9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cig2Nik7cigwKSh7dGFyZ2V0OidSZWdFeHAnLHByb3RvOiEwLGZvcmNlZDpuIT09Ly4vLmV4ZWN9LHtleGVjOm59KX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDIpLG89cigxMiksbD1yKDYpLGE9cigxOCkscz1yKDY1KSxjPXIoNTApLHU9L1xcXFwkKFskJmAnXXxcXFxcZFxcXFxkP3w8W14+XSo+KS9nLGc9L1xcXFwkKFskJmAnXXxcXFxcZFxcXFxkPykvZyxoPWZ1bmN0aW9uKGUpe3JldHVybiBlPT09dm9pZCAwP2U6ZSsnJ307cig1MSkoJ3JlcGxhY2UnLDIsZnVuY3Rpb24oZSx0LHIseSl7ZnVuY3Rpb24gZihlLHQsbCxhLHMsbil7dmFyIGk9bCtlLmxlbmd0aCxjPWEubGVuZ3RoLGQ9ZztyZXR1cm4gdm9pZCAwIT09cyYmKHM9byhzKSxkPXUpLHIuY2FsbChuLGQsZnVuY3Rpb24ocixvKXt2YXIgZDtzd2l0Y2goby5jaGFyQXQoMCkpe2Nhc2UnJCc6cmV0dXJuJyQnO2Nhc2UnJic6cmV0dXJuIGU7Y2FzZSdgJzpyZXR1cm4gdC5zbGljZSgwLGwpO2Nhc2UnXFxcXCcnOnJldHVybiB0LnNsaWNlKGkpO2Nhc2UnPCc6ZD1zW28uc2xpY2UoMSwtMSldO2JyZWFrO2RlZmF1bHQ6dmFyIHU9K287aWYoMD09dSlyZXR1cm4gcjtpZih1PmMpe3ZhciBuPXAodS8xMCk7cmV0dXJuIDA9PT1uP3I6bjw9Yz92b2lkIDA9PT1hW24tMV0/by5jaGFyQXQoMSk6YVtuLTFdK28uY2hhckF0KDEpOnJ9ZD1hW3UtMV07fXJldHVybiB2b2lkIDA9PT1kPycnOmR9KX1yZXR1cm5bZnVuY3Rpb24obixvKXt2YXIgbD1lKHRoaXMpLGE9bj09dm9pZCAwP3ZvaWQgMDpuW3RdO3JldHVybiBhPT09dm9pZCAwP3IuY2FsbChsKycnLG4sbyk6YS5jYWxsKG4sbCxvKX0sZnVuY3Rpb24oZSx0KXt2YXIgbz15KHIsZSx0aGlzLHQpO2lmKG8uZG9uZSlyZXR1cm4gby52YWx1ZTt2YXIgcD1uKGUpLHU9dGhpcysnJyxnPSdmdW5jdGlvbic9PXR5cGVvZiB0O2d8fCh0PXQrJycpO3ZhciBtPXAuZ2xvYmFsO2lmKG0pe3ZhciBFPXAudW5pY29kZTtwLmxhc3RJbmRleD0wfWZvcih2YXIgeCxfPVtdOyh4PWMocCx1KSxudWxsIT09eCkmJiEoXy5wdXNoKHgpLCFtKTspe3ZhciBTPXhbMF0rJyc7Jyc9PT1TJiYocC5sYXN0SW5kZXg9cyh1LGwocC5sYXN0SW5kZXgpLEUpKX1mb3IodmFyIFQ9JycsYj0wLFA9MDtQPF8ubGVuZ3RoO1ArKyl7eD1fW1BdO2Zvcih2YXIgTz14WzBdKycnLHY9aShkKGEoeC5pbmRleCksdS5sZW5ndGgpLDApLEk9W10sQT0xO0E8eC5sZW5ndGg7QSsrKUkucHVzaChoKHhbQV0pKTt2YXIgUj14Lmdyb3VwcztpZihnKXt2YXIgaz1bT10uY29uY2F0KEksdix1KTtSIT09dm9pZCAwJiZrLnB1c2goUik7dmFyIEw9dC5hcHBseSh2b2lkIDAsaykrJyd9ZWxzZSBMPWYoTyx1LHYsSSxSLHQpO3Y+PWImJihUKz11LnNsaWNlKGIsdikrTCxiPXYrTy5sZW5ndGgpfXJldHVybiBUK3Uuc2xpY2UoYil9XX0pfSxmdW5jdGlvbihlLHQscil7J3VzZSBzdHJpY3QnO3ZhciBuPXIoOTIpLG89cigyKSxsPXIoNDIpLGE9cig2NSkscz1yKDYpLGM9cig1MCksaT1yKDY2KSxwPXIoNSksdT1bXS5wdXNoLGc9J3NwbGl0JyxoPSdsZW5ndGgnLHk9J2xhc3RJbmRleCcsZj00Mjk0OTY3Mjk1LG09IXAoZnVuY3Rpb24oKXtSZWdFeHAoZiwneScpfSk7cig1MSkoJ3NwbGl0JywyLGZ1bmN0aW9uKGUsdCxyLEUpe3ZhciB4O3JldHVybiB4PSdjJz09J2FiYmMnW2ddKC8oYikqLylbMV18fDQhPSd0ZXN0J1tnXSgvKD86KS8sLTEpW2hdfHwyIT0nYWInW2ddKC8oPzphYikqLylbaF18fDQhPScuJ1tnXSgvKC4/KSguPykvKVtoXXx8MTwnLidbZ10oLygpKCkvKVtoXXx8JydbZ10oLy4/LylbaF0/ZnVuY3Rpb24oZSx0KXt2YXIgbz10aGlzKycnO2lmKHZvaWQgMD09PWUmJjA9PT10KXJldHVybltdO2lmKCFuKGUpKXJldHVybiByLmNhbGwobyxlLHQpO2Zvcih2YXIgbCxhLHMsYz1bXSxwPShlLmlnbm9yZUNhc2U/J2knOicnKSsoZS5tdWx0aWxpbmU/J20nOicnKSsoZS51bmljb2RlPyd1JzonJykrKGUuc3RpY2t5Pyd5JzonJyksZD0wLGc9dm9pZCAwPT09dD9mOnQ+Pj4wLG09bmV3IFJlZ0V4cChlLnNvdXJjZSxwKydnJyk7KGw9aS5jYWxsKG0sbykpJiYoYT1tW3ldLCEoYT5kJiYoYy5wdXNoKG8uc2xpY2UoZCxsLmluZGV4KSksMTxsW2hdJiZsLmluZGV4PG9baF0mJnUuYXBwbHkoYyxsLnNsaWNlKDEpKSxzPWxbMF1baF0sZD1hLGNbaF0+PWcpKSk7KW1beV09PT1sLmluZGV4JiZtW3ldKys7cmV0dXJuIGQ9PT1vW2hdPyhzfHwhbS50ZXN0KCcnKSkmJmMucHVzaCgnJyk6Yy5wdXNoKG8uc2xpY2UoZCkpLGNbaF0+Zz9jLnNsaWNlKDAsZyk6Y306JzAnW2ddKHZvaWQgMCwwKVtoXT9mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT1lJiYwPT09dD9bXTpyLmNhbGwodGhpcyxlLHQpfTpyLFtmdW5jdGlvbihyLG4pe3ZhciBvPWUodGhpcyksbD12b2lkIDA9PXI/dm9pZCAwOnJbdF07cmV0dXJuIHZvaWQgMD09PWw/eC5jYWxsKG8rJycscixuKTpsLmNhbGwocixvLG4pfSxmdW5jdGlvbih0LG4pe3ZhciB1PUUoeCx0LHRoaXMsbix4IT09cik7aWYodS5kb25lKXJldHVybiB1LnZhbHVlO3ZhciBnPW8odCksaD10aGlzKycnLHk9bChnLFJlZ0V4cCksXz1nLnVuaWNvZGUsUz0oZy5pZ25vcmVDYXNlPydpJzonJykrKGcubXVsdGlsaW5lPydtJzonJykrKGcudW5pY29kZT8ndSc6JycpKyhtPyd5JzonZycpLFQ9bmV3IHkobT9nOideKD86JytnLnNvdXJjZSsnKScsUyksYj12b2lkIDA9PT1uP2Y6bj4+PjA7aWYoMD09YilyZXR1cm5bXTtpZigwPT09aC5sZW5ndGgpcmV0dXJuIG51bGw9PT1jKFQsaCk/W2hdOltdO2Zvcih2YXIgUD0wLHA9MCxPPVtdO3A8aC5sZW5ndGg7KXtULmxhc3RJbmRleD1tP3A6MDt2YXIgdixlPWMoVCxtP2g6aC5zbGljZShwKSk7aWYobnVsbD09PWV8fCh2PWQocyhULmxhc3RJbmRleCsobT8wOnApKSxoLmxlbmd0aCkpPT09UClwPWEoaCxwLF8pO2Vsc2V7aWYoTy5wdXNoKGguc2xpY2UoUCxwKSksTy5sZW5ndGg9PT1iKXJldHVybiBPO2Zvcih2YXIgST0xO0k8PWUubGVuZ3RoLTE7SSsrKWlmKE8ucHVzaChlW0ldKSxPLmxlbmd0aD09PWIpcmV0dXJuIE87cD1QPXZ9fXJldHVybiBPLnB1c2goaC5zbGljZShQKSksT31dfSl9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cigyKSxvPXIoODkpLGw9cig1MCk7cig1MSkoJ3NlYXJjaCcsMSxmdW5jdGlvbihlLHQscixhKXtyZXR1cm5bZnVuY3Rpb24ocil7dmFyIG49ZSh0aGlzKSxvPXI9PXZvaWQgMD92b2lkIDA6clt0XTtyZXR1cm4gbz09PXZvaWQgMD9uZXcgUmVnRXhwKHIpW3RdKG4rJycpOm8uY2FsbChyLG4pfSxmdW5jdGlvbihlKXt2YXIgdD1hKHIsZSx0aGlzKTtpZih0LmRvbmUpcmV0dXJuIHQudmFsdWU7dmFyIHM9bihlKSxpPXRoaXMrJycsYz1zLmxhc3RJbmRleDtvKGMsMCl8fChzLmxhc3RJbmRleD0wKTt2YXIgcD1sKHMsaSk7cmV0dXJuIG8ocy5sYXN0SW5kZXgsYyl8fChzLmxhc3RJbmRleD1jKSxudWxsPT09cD8tMTpwLmluZGV4fV19KX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDE0KSxvPXIoMCksbD1yKDEyKSxhPXIoODApLHM9cig1OSksaT1yKDYpLGM9cig2NykscD1yKDYwKTtvKG8uUytvLkYqIXIoNDUpKGZ1bmN0aW9uKGUpe0FycmF5LmZyb20oZSl9KSwnQXJyYXknLHtmcm9tOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbyxkLHU9bChlKSxnPSdmdW5jdGlvbic9PXR5cGVvZiB0aGlzP3RoaXM6QXJyYXksaD1hcmd1bWVudHMubGVuZ3RoLHk9MTxoP2FyZ3VtZW50c1sxXTp2b2lkIDAsZj12b2lkIDAhPT15LG09MCxFPXAodSk7aWYoZiYmKHk9bih5LDI8aD9hcmd1bWVudHNbMl06dm9pZCAwLDIpKSx2b2lkIDAhPUUmJiEoZz09QXJyYXkmJnMoRSkpKWZvcihkPUUuY2FsbCh1KSxyPW5ldyBnOyEobz1kLm5leHQoKSkuZG9uZTttKyspYyhyLG0sZj9hKGQseSxbby52YWx1ZSxtXSwhMCk6by52YWx1ZSk7ZWxzZSBmb3IodD1pKHUubGVuZ3RoKSxyPW5ldyBnKHQpO3Q+bTttKyspYyhyLG0sZj95KHVbbV0sbSk6dVttXSk7cmV0dXJuIHIubGVuZ3RoPW0scn19KX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDApLG89cig2Nyk7bihuLlMrbi5GKnIoNSkoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiEoQXJyYXkub2YuY2FsbChlKWluc3RhbmNlb2YgZSl9KSwnQXJyYXknLHtvZjpmdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9YXJndW1lbnRzLmxlbmd0aCxyPW5ldygnZnVuY3Rpb24nPT10eXBlb2YgdGhpcz90aGlzOkFycmF5KSh0KTt0PmU7KW8ocixlLGFyZ3VtZW50c1tlKytdKTtyZXR1cm4gci5sZW5ndGg9dCxyfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKTtuKG4uUCwnQXJyYXknLHtjb3B5V2l0aGluOnIoNzgpfSkscigzNSkoJ2NvcHlXaXRoaW4nKX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDApLG89cigzOSkoNSksbD0nZmluZCcsYT0hMDtsIGluW10mJlssXVtsXShmdW5jdGlvbigpe2E9ITF9KSxuKG4uUCtuLkYqYSwnQXJyYXknLHtmaW5kOmZ1bmN0aW9uKGUpe3JldHVybiBvKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSkscigzNSkobCl9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cigwKSxvPXIoMzkpKDYpLGw9J2ZpbmRJbmRleCcsYT0hMDtsIGluW10mJlssXVtsXShmdW5jdGlvbigpe2E9ITF9KSxuKG4uUCtuLkYqYSwnQXJyYXknLHtmaW5kSW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIG8odGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwKX19KSxyKDM1KShsKX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCk7bihuLlAsJ0FycmF5Jyx7ZmlsbDpyKDU4KX0pLHIoMzUpKCdmaWxsJyl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLG89cigzKS5pc0Zpbml0ZTtuKG4uUywnTnVtYmVyJyx7aXNGaW5pdGU6ZnVuY3Rpb24oZSl7cmV0dXJuJ251bWJlcic9PXR5cGVvZiBlJiZvKGUpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKTtuKG4uUywnTnVtYmVyJyx7aXNJbnRlZ2VyOnIoOTQpfSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLG89cig5NCk7bihuLlMsJ051bWJlcicse2lzU2FmZUludGVnZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIG8oZSkmJjkwMDcxOTkyNTQ3NDA5OTE+PWwoZSl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApO24obi5TLCdOdW1iZXInLHtpc05hTjpmdW5jdGlvbihlKXtyZXR1cm4gZSE9ZX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCk7bihuLlMsJ051bWJlcicse0VQU0lMT046Mi4yMjA0NDYwNDkyNTAzMTNlLTE2fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApO24obi5TLCdOdW1iZXInLHtNSU5fU0FGRV9JTlRFR0VSOi05MDA3MTk5MjU0NzQwOTkxfSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApO24obi5TLCdOdW1iZXInLHtNQVhfU0FGRV9JTlRFR0VSOjkwMDcxOTkyNTQ3NDA5OTF9KX0sZnVuY3Rpb24odCxvLGwpe3ZhciBhPWwoMCkscz1sKDk1KSxpPWUsYz1NYXRoLmFjb3NoO2EoYS5TK2EuRiohKGMmJjcxMD09cChjKE51bWJlci5NQVhfVkFMVUUpKSYmYyhJbmZpbml0eSk9PUluZmluaXR5KSwnTWF0aCcse2Fjb3NoOmZ1bmN0aW9uKGUpe3JldHVybiAxPihlPStlKT9OYU46OTQ5MDYyNjUuNjI0MjUxNTY8ZT9uKGUpK3I6cyhlLTEraShlLTEpKmkoZSsxKSl9fSl9LGZ1bmN0aW9uKHQscixvKXtmdW5jdGlvbiBsKHQpe3JldHVybiBpc0Zpbml0ZSh0PSt0KSYmMCE9dD8wPnQ/LWwoLXQpOm4odCtlKHQqdCsxKSk6dH12YXIgYT1vKDApLHM9TWF0aC5hc2luaDthKGEuUythLkYqIShzJiYwPDEvcygwKSksJ01hdGgnLHthc2luaDpsfSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbz1yKDApLGw9TWF0aC5hdGFuaDtvKG8uUytvLkYqIShsJiYwPjEvbCgtMCkpLCdNYXRoJyx7YXRhbmg6ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PShlPStlKT9lOm4oKDErZSkvKDEtZSkpLzJ9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLGE9cig2OCk7bihuLlMsJ01hdGgnLHtjYnJ0OmZ1bmN0aW9uKGUpe3JldHVybiBhKGU9K2UpKm8obChlKSwxLzMpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG89cigwKTtvKG8uUywnTWF0aCcse2NsejMyOmZ1bmN0aW9uKGUpe3JldHVybihlPj4+PTApPzMxLXAobihlKzAuNSkqTWF0aC5MT0cyRSk6MzJ9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLG89YTtuKG4uUywnTWF0aCcse2Nvc2g6ZnVuY3Rpb24oZSl7cmV0dXJuKG8oZT0rZSkrbygtZSkpLzJ9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLG89cig2OSk7bihuLlMrbi5GKihvIT1zKSwnTWF0aCcse2V4cG0xOm99KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCk7bihuLlMsJ01hdGgnLHtmcm91bmQ6cigxODkpfSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDY4KSxhPW8scz1hKDIsLTUyKSxpPWEoMiwtMjMpLGM9YSgyLDEyNykqKDItaSkscD1hKDIsLTEyNiksZD1mdW5jdGlvbihlKXtyZXR1cm4gZSsxL3MtMS9zfTtlLmV4cG9ydHM9TWF0aC5mcm91bmR8fGZ1bmN0aW9uKGUpe3ZhciB0LHIsbz1sKGUpLGE9bihlKTtyZXR1cm4gbzxwP2EqZChvL3AvaSkqcCppOih0PSgxK2kvcykqbyxyPXQtKHQtbykscj5jfHxyIT1yP2EqSW5maW5pdHk6YSpyKX19LGZ1bmN0aW9uKHQscixuKXt2YXIgbz1uKDApO28oby5TLCdNYXRoJyx7aHlwb3Q6ZnVuY3Rpb24oKXtmb3IodmFyIHQscixuPTAsbz0wLGE9YXJndW1lbnRzLmxlbmd0aCxzPTA7bzxhOyl0PWwoYXJndW1lbnRzW28rK10pLHM8dD8ocj1zL3Qsbj1uKnIqcisxLHM9dCk6MDx0PyhyPXQvcyxuKz1yKnIpOm4rPXQ7cmV0dXJuIHM9PUluZmluaXR5P0luZmluaXR5OnMqZShuKX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksbz1NYXRoLmltdWw7bihuLlMrbi5GKnIoNSkoZnVuY3Rpb24oKXtyZXR1cm4tNSE9byg0Mjk0OTY3Mjk1LDUpfHwyIT1vLmxlbmd0aH0pLCdNYXRoJyx7aW11bDpmdW5jdGlvbihlLHQpe3ZhciByPTY1NTM1LG49K2Usbz0rdCxsPXImbixhPXImbztyZXR1cm4gMHxsKmErKChyJm4+Pj4xNikqYStsKihyJm8+Pj4xNik8PDE2Pj4+MCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApO24obi5TLCdNYXRoJyx7bG9nMXA6cig5NSl9KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBvPXIoMCk7byhvLlMsJ01hdGgnLHtsb2cxMDpmdW5jdGlvbihlKXtyZXR1cm4gbihlKSpNYXRoLkxPRzEwRX19KX0sZnVuY3Rpb24oZSx0LG8pe3ZhciBsPW8oMCk7bChsLlMsJ01hdGgnLHtsb2cyOmZ1bmN0aW9uKGUpe3JldHVybiBuKGUpL3J9fSl9LGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApO24obi5TLCdNYXRoJyx7c2lnbjpyKDY4KX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxvPXIoNjkpLHM9YTtuKG4uUytuLkYqcig1KShmdW5jdGlvbigpe3JldHVybiEwfSksJ01hdGgnLHtzaW5oOmZ1bmN0aW9uKGUpe3JldHVybiAxPmwoZT0rZSk/KG8oZSktbygtZSkpLzI6KHMoZS0xKS1zKC1lLTEpKSooTWF0aC5FLzIpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxvPXIoNjkpLGw9YTtuKG4uUywnTWF0aCcse3Rhbmg6ZnVuY3Rpb24oZSl7dmFyIHQ9byhlPStlKSxyPW8oLWUpO3JldHVybiB0PT1JbmZpbml0eT8xOnI9PUluZmluaXR5Py0xOih0LXIpLyhsKGUpK2woLWUpKX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCk7bihuLlMsJ01hdGgnLHt0cnVuYzpmdW5jdGlvbihlKXtyZXR1cm4oMDxlP3A6YykoZSl9fSl9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cigwKSxvPXIoNTUpKCEwKTtuKG4uUCwnQXJyYXknLHtpbmNsdWRlczpmdW5jdGlvbihlKXtyZXR1cm4gbyh0aGlzLGUsMTxhcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pLHIoMzUpKCdpbmNsdWRlcycpfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxvPXIoOTYpKCExKTtuKG4uUywnT2JqZWN0Jyx7dmFsdWVzOmZ1bmN0aW9uKGUpe3JldHVybiBvKGUpfX0pfSxmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxvPXIoOTYpKCEwKTtuKG4uUywnT2JqZWN0Jyx7ZW50cmllczpmdW5jdGlvbihlKXtyZXR1cm4gbyhlKX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksbz1yKDg1KSxsPXIoMTEpLGE9cigxNikscz1yKDY3KTtuKG4uUywnT2JqZWN0Jyx7Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczpmdW5jdGlvbihlKXtmb3IodmFyIHQscixuPWwoZSksYz1hLmYscD1vKG4pLGQ9e30sdT0wO3AubGVuZ3RoPnU7KXI9YyhuLHQ9cFt1KytdKSx2b2lkIDAhPT1yJiZzKGQsdCxyKTtyZXR1cm4gZH19KX0sZnVuY3Rpb24oZSx0LHIpeyd1c2Ugc3RyaWN0Jzt2YXIgbj1yKDApLG89cig5NyksbD1yKDQ5KSxhPS9WZXJzaW9uXFxcXC8xMFxcXFwuXFxcXGQrKFxcXFwuXFxcXGQrKT8oIE1vYmlsZVxcXFwvXFxcXHcrKT8gU2FmYXJpXFxcXC8vLnRlc3QobCk7bihuLlArbi5GKmEsJ1N0cmluZycse3BhZFN0YXJ0OmZ1bmN0aW9uKGUpe3JldHVybiBvKHRoaXMsZSwxPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzFdOnZvaWQgMCwhMCl9fSl9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7dmFyIG49cigwKSxvPXIoOTcpLGw9cig0OSksYT0vVmVyc2lvblxcXFwvMTBcXFxcLlxcXFxkKyhcXFxcLlxcXFxkKyk/KCBNb2JpbGVcXFxcL1xcXFx3Kyk/IFNhZmFyaVxcXFwvLy50ZXN0KGwpO24obi5QK24uRiphLCdTdHJpbmcnLHtwYWRFbmQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG8odGhpcyxlLDE8YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMV06dm9pZCAwLCExKX19KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMyksbz1yKDApLGw9cig0OSksYT1bXS5zbGljZSxzPS9NU0lFIC5cXFxcLi8udGVzdChsKSxpPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIpe3ZhciBuPTI8YXJndW1lbnRzLmxlbmd0aCxvPSEhbiYmYS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZShuP2Z1bmN0aW9uKCl7KCdmdW5jdGlvbic9PXR5cGVvZiB0P3Q6RnVuY3Rpb24odCkpLmFwcGx5KHRoaXMsbyl9OnQscil9fTtvKG8uRytvLkIrby5GKnMse3NldFRpbWVvdXQ6aShuLnNldFRpbWVvdXQpLHNldEludGVydmFsOmkobi5zZXRJbnRlcnZhbCl9KX0sZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksbz1yKDYyKTtuKG4uRytuLkIse3NldEltbWVkaWF0ZTpvLnNldCxjbGVhckltbWVkaWF0ZTpvLmNsZWFyfSl9LGZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49cig2MSksbz1yKDI2KSxsPXIoMTcpLGE9cigzKSxzPXIoOSksYz1yKDMzKSxwPXIoNCksZD1wKCdpdGVyYXRvcicpLHU9cCgndG9TdHJpbmdUYWcnKSxnPWMuQXJyYXksaD17Q1NTUnVsZUxpc3Q6ITAsQ1NTU3R5bGVEZWNsYXJhdGlvbjohMSxDU1NWYWx1ZUxpc3Q6ITEsQ2xpZW50UmVjdExpc3Q6ITEsRE9NUmVjdExpc3Q6ITEsRE9NU3RyaW5nTGlzdDohMSxET01Ub2tlbkxpc3Q6ITAsRGF0YVRyYW5zZmVySXRlbUxpc3Q6ITEsRmlsZUxpc3Q6ITEsSFRNTEFsbENvbGxlY3Rpb246ITEsSFRNTENvbGxlY3Rpb246ITEsSFRNTEZvcm1FbGVtZW50OiExLEhUTUxTZWxlY3RFbGVtZW50OiExLE1lZGlhTGlzdDohMCxNaW1lVHlwZUFycmF5OiExLE5hbWVkTm9kZU1hcDohMSxOb2RlTGlzdDohMCxQYWludFJlcXVlc3RMaXN0OiExLFBsdWdpbjohMSxQbHVnaW5BcnJheTohMSxTVkdMZW5ndGhMaXN0OiExLFNWR051bWJlckxpc3Q6ITEsU1ZHUGF0aFNlZ0xpc3Q6ITEsU1ZHUG9pbnRMaXN0OiExLFNWR1N0cmluZ0xpc3Q6ITEsU1ZHVHJhbnNmb3JtTGlzdDohMSxTb3VyY2VCdWZmZXJMaXN0OiExLFN0eWxlU2hlZXRMaXN0OiEwLFRleHRUcmFja0N1ZUxpc3Q6ITEsVGV4dFRyYWNrTGlzdDohMSxUb3VjaExpc3Q6ITF9LHk9byhoKSxmPTA7Zjx5Lmxlbmd0aDtmKyspe3ZhciBpLG09eVtmXSxFPWhbbV0seD1hW21dLF89eCYmeC5wcm90b3R5cGU7aWYoXyYmKF9bZF18fHMoXyxkLGcpLF9bdV18fHMoXyx1LG0pLGNbbV09ZyxFKSlmb3IoaSBpbiBuKV9baV18fGwoXyxpLG5baV0sITApfX0sZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKHQpeyd1c2Ugc3RyaWN0JztmdW5jdGlvbiByKGUsdCxyLG4pe3ZhciBsPXQmJnQucHJvdG90eXBlIGluc3RhbmNlb2Ygbz90Om8sYT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSxzPW5ldyBnKG58fFtdKTtyZXR1cm4gYS5faW52b2tlPWMoZSxyLHMpLGF9ZnVuY3Rpb24gbihlLHQscil7dHJ5e3JldHVybnt0eXBlOidub3JtYWwnLGFyZzplLmNhbGwodCxyKX19Y2F0Y2goZSl7cmV0dXJue3R5cGU6J3Rocm93Jyxhcmc6ZX19fWZ1bmN0aW9uIG8oKXt9ZnVuY3Rpb24gbCgpe31mdW5jdGlvbiBhKCl7fWZ1bmN0aW9uIHMoZSl7WyduZXh0JywndGhyb3cnLCdyZXR1cm4nXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2ludm9rZSh0LGUpfX0pfWZ1bmN0aW9uIGkoZSl7ZnVuY3Rpb24gdChyLG8sbCxhKXt2YXIgcz1uKGVbcl0sZSxvKTtpZigndGhyb3cnPT09cy50eXBlKWEocy5hcmcpO2Vsc2V7dmFyIGk9cy5hcmcsYz1pLnZhbHVlO3JldHVybiBjJiYnb2JqZWN0Jz09dHlwZW9mIGMmJm0uY2FsbChjLCdfX2F3YWl0Jyk/UHJvbWlzZS5yZXNvbHZlKGMuX19hd2FpdCkudGhlbihmdW5jdGlvbihlKXt0KCduZXh0JyxlLGwsYSl9LGZ1bmN0aW9uKGUpe3QoJ3Rocm93JyxlLGwsYSl9KTpQcm9taXNlLnJlc29sdmUoYykudGhlbihmdW5jdGlvbihlKXtpLnZhbHVlPWUsbChpKX0sYSl9fXZhciByO3RoaXMuX2ludm9rZT1mdW5jdGlvbihlLG4pe2Z1bmN0aW9uIG8oKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocixvKXt0KGUsbixyLG8pfSl9cmV0dXJuIHI9cj9yLnRoZW4obyxvKTpvKCl9fWZ1bmN0aW9uIGMoZSx0LHIpe3ZhciBvPVA7cmV0dXJuIGZ1bmN0aW9uKGwsYSl7aWYobz09dil0aHJvdyBuZXcgRXJyb3IoJ0dlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmcnKTtpZihvPT1JKXtpZigndGhyb3cnPT09bCl0aHJvdyBhO3JldHVybiB5KCl9Zm9yKHIubWV0aG9kPWwsci5hcmc9YTs7KXt2YXIgcz1yLmRlbGVnYXRlO2lmKHMpe3ZhciBpPXAocyxyKTtpZihpKXtpZihpPT09QSljb250aW51ZTtyZXR1cm4gaX19aWYoJ25leHQnPT09ci5tZXRob2Qpci5zZW50PXIuX3NlbnQ9ci5hcmc7ZWxzZSBpZigndGhyb3cnPT09ci5tZXRob2Qpe2lmKG89PVApdGhyb3cgbz1JLHIuYXJnO3IuZGlzcGF0Y2hFeGNlcHRpb24oci5hcmcpfWVsc2UncmV0dXJuJz09PXIubWV0aG9kJiZyLmFicnVwdCgncmV0dXJuJyxyLmFyZyk7bz12O3ZhciBjPW4oZSx0LHIpO2lmKCdub3JtYWwnPT09Yy50eXBlKXtpZihvPXIuZG9uZT9JOk8sYy5hcmc9PT1BKWNvbnRpbnVlO3JldHVybnt2YWx1ZTpjLmFyZyxkb25lOnIuZG9uZX19J3Rocm93Jz09PWMudHlwZSYmKG89SSxyLm1ldGhvZD0ndGhyb3cnLHIuYXJnPWMuYXJnKX19fWZ1bmN0aW9uIHAoZSx0KXt2YXIgcj1lLml0ZXJhdG9yW3QubWV0aG9kXTtpZih2b2lkIDA9PT1yKXtpZih0LmRlbGVnYXRlPW51bGwsJ3Rocm93Jz09PXQubWV0aG9kKXtpZihlLml0ZXJhdG9yLnJldHVybiYmKHQubWV0aG9kPSdyZXR1cm4nLHQuYXJnPXZvaWQgMCxwKGUsdCksJ3Rocm93Jz09PXQubWV0aG9kKSlyZXR1cm4gQTt0Lm1ldGhvZD0ndGhyb3cnLHQuYXJnPW5ldyBUeXBlRXJyb3IoJ1RoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgXFxcXCd0aHJvd1xcXFwnIG1ldGhvZCcpfXJldHVybiBBfXZhciBvPW4ocixlLml0ZXJhdG9yLHQuYXJnKTtpZigndGhyb3cnPT09by50eXBlKXJldHVybiB0Lm1ldGhvZD0ndGhyb3cnLHQuYXJnPW8uYXJnLHQuZGVsZWdhdGU9bnVsbCxBO3ZhciBsPW8uYXJnO2lmKCFsKXJldHVybiB0Lm1ldGhvZD0ndGhyb3cnLHQuYXJnPW5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0JyksdC5kZWxlZ2F0ZT1udWxsLEE7aWYobC5kb25lKXRbZS5yZXN1bHROYW1lXT1sLnZhbHVlLHQubmV4dD1lLm5leHRMb2MsJ3JldHVybichPT10Lm1ldGhvZCYmKHQubWV0aG9kPSduZXh0Jyx0LmFyZz12b2lkIDApO2Vsc2UgcmV0dXJuIGw7cmV0dXJuIHQuZGVsZWdhdGU9bnVsbCxBfWZ1bmN0aW9uIGQoZSl7dmFyIHQ9e3RyeUxvYzplWzBdfTsxIGluIGUmJih0LmNhdGNoTG9jPWVbMV0pLDIgaW4gZSYmKHQuZmluYWxseUxvYz1lWzJdLHQuYWZ0ZXJMb2M9ZVszXSksdGhpcy50cnlFbnRyaWVzLnB1c2godCl9ZnVuY3Rpb24gdShlKXt2YXIgdD1lLmNvbXBsZXRpb258fHt9O3QudHlwZT0nbm9ybWFsJyxkZWxldGUgdC5hcmcsZS5jb21wbGV0aW9uPXR9ZnVuY3Rpb24gZyhlKXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6J3Jvb3QnfV0sZS5mb3JFYWNoKGQsdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gaChlKXtpZihlKXt2YXIgdD1lW3hdO2lmKHQpcmV0dXJuIHQuY2FsbChlKTtpZignZnVuY3Rpb24nPT10eXBlb2YgZS5uZXh0KXJldHVybiBlO2lmKCFpc05hTihlLmxlbmd0aCkpe3ZhciByPS0xLG49ZnVuY3Rpb24gdCgpe2Zvcig7KytyPGUubGVuZ3RoOylpZihtLmNhbGwoZSxyKSlyZXR1cm4gdC52YWx1ZT1lW3JdLHQuZG9uZT0hMSx0O3JldHVybiB0LnZhbHVlPXZvaWQgMCx0LmRvbmU9ITAsdH07cmV0dXJuIG4ubmV4dD1ufX1yZXR1cm57bmV4dDp5fX1mdW5jdGlvbiB5KCl7cmV0dXJue3ZhbHVlOnZvaWQgMCxkb25lOiEwfX12YXIgZj1PYmplY3QucHJvdG90eXBlLG09Zi5oYXNPd25Qcm9wZXJ0eSxFPSdmdW5jdGlvbic9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LHg9RS5pdGVyYXRvcnx8J0BAaXRlcmF0b3InLF89RS5hc3luY0l0ZXJhdG9yfHwnQEBhc3luY0l0ZXJhdG9yJyxTPUUudG9TdHJpbmdUYWd8fCdAQHRvU3RyaW5nVGFnJyxUPSdvYmplY3QnPT10eXBlb2YgZSxiPXQucmVnZW5lcmF0b3JSdW50aW1lO2lmKGIpcmV0dXJuIHZvaWQoVCYmKGUuZXhwb3J0cz1iKSk7Yj10LnJlZ2VuZXJhdG9yUnVudGltZT1UP2UuZXhwb3J0czp7fSxiLndyYXA9cjt2YXIgUD0nc3VzcGVuZGVkU3RhcnQnLE89J3N1c3BlbmRlZFlpZWxkJyx2PSdleGVjdXRpbmcnLEk9J2NvbXBsZXRlZCcsQT17fSxSPXt9O1JbeF09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307dmFyIGs9T2JqZWN0LmdldFByb3RvdHlwZU9mLEw9ayYmayhrKGgoW10pKSk7TCYmTCE9PWYmJm0uY2FsbChMLHgpJiYoUj1MKTt2YXIgRj1hLnByb3RvdHlwZT1vLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFIpO2wucHJvdG90eXBlPUYuY29uc3RydWN0b3I9YSxhLmNvbnN0cnVjdG9yPWwsYVtTXT1sLmRpc3BsYXlOYW1lPSdHZW5lcmF0b3JGdW5jdGlvbicsYi5pc0dlbmVyYXRvckZ1bmN0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PSdmdW5jdGlvbic9PXR5cGVvZiBlJiZlLmNvbnN0cnVjdG9yO3JldHVybiEhdCYmKHQ9PT1sfHwnR2VuZXJhdG9yRnVuY3Rpb24nPT09KHQuZGlzcGxheU5hbWV8fHQubmFtZSkpfSxiLm1hcms9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSxhKTooZS5fX3Byb3RvX189YSwhKFMgaW4gZSkmJihlW1NdPSdHZW5lcmF0b3JGdW5jdGlvbicpKSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEYpLGV9LGIuYXdyYXA9ZnVuY3Rpb24oZSl7cmV0dXJue19fYXdhaXQ6ZX19LHMoaS5wcm90b3R5cGUpLGkucHJvdG90eXBlW19dPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGIuQXN5bmNJdGVyYXRvcj1pLGIuYXN5bmM9ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIGw9bmV3IGkocihlLHQsbixvKSk7cmV0dXJuIGIuaXNHZW5lcmF0b3JGdW5jdGlvbih0KT9sOmwubmV4dCgpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuZG9uZT9lLnZhbHVlOmwubmV4dCgpfSl9LHMoRiksRltTXT0nR2VuZXJhdG9yJyxGW3hdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LEYudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4nW29iamVjdCBHZW5lcmF0b3JdJ30sYi5rZXlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKXQucHVzaChyKTtyZXR1cm4gdC5yZXZlcnNlKCksZnVuY3Rpb24gcigpe2Zvcig7dC5sZW5ndGg7KXt2YXIgbj10LnBvcCgpO2lmKG4gaW4gZSlyZXR1cm4gci52YWx1ZT1uLHIuZG9uZT0hMSxyfXJldHVybiByLmRvbmU9ITAscn19LGIudmFsdWVzPWgsZy5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmcscmVzZXQ6ZnVuY3Rpb24oZSl7aWYodGhpcy5wcmV2PTAsdGhpcy5uZXh0PTAsdGhpcy5zZW50PXRoaXMuX3NlbnQ9dm9pZCAwLHRoaXMuZG9uZT0hMSx0aGlzLmRlbGVnYXRlPW51bGwsdGhpcy5tZXRob2Q9J25leHQnLHRoaXMuYXJnPXZvaWQgMCx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaCh1KSwhZSlmb3IodmFyIHQgaW4gdGhpcykndCc9PT10LmNoYXJBdCgwKSYmbS5jYWxsKHRoaXMsdCkmJiFpc05hTigrdC5zbGljZSgxKSkmJih0aGlzW3RdPXZvaWQgMCl9LHN0b3A6ZnVuY3Rpb24oKXt0aGlzLmRvbmU9ITA7dmFyIGU9dGhpcy50cnlFbnRyaWVzWzBdLHQ9ZS5jb21wbGV0aW9uO2lmKCd0aHJvdyc9PT10LnR5cGUpdGhyb3cgdC5hcmc7cmV0dXJuIHRoaXMucnZhbH0sZGlzcGF0Y2hFeGNlcHRpb246ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LG4pe3JldHVybiBsLnR5cGU9J3Rocm93JyxsLmFyZz1lLHIubmV4dD10LG4mJihyLm1ldGhvZD0nbmV4dCcsci5hcmc9dm9pZCAwKSwhIW59aWYodGhpcy5kb25lKXRocm93IGU7Zm9yKHZhciByPXRoaXMsbj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7MDw9bjstLW4pe3ZhciBvPXRoaXMudHJ5RW50cmllc1tuXSxsPW8uY29tcGxldGlvbjtpZigncm9vdCc9PT1vLnRyeUxvYylyZXR1cm4gdCgnZW5kJyk7aWYoby50cnlMb2M8PXRoaXMucHJldil7dmFyIGE9bS5jYWxsKG8sJ2NhdGNoTG9jJykscz1tLmNhbGwobywnZmluYWxseUxvYycpO2lmKGEmJnMpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiB0KG8uY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX1lbHNlIGlmKGEpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiB0KG8uY2F0Y2hMb2MsITApO31lbHNlIGlmKCFzKXRocm93IG5ldyBFcnJvcigndHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHknKTtlbHNlIGlmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX19fSxhYnJ1cHQ6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsbj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7MDw9bjstLW4paWYocj10aGlzLnRyeUVudHJpZXNbbl0sci50cnlMb2M8PXRoaXMucHJldiYmbS5jYWxsKHIsJ2ZpbmFsbHlMb2MnKSYmdGhpcy5wcmV2PHIuZmluYWxseUxvYyl7dmFyIG89cjticmVha31vJiYoJ2JyZWFrJz09PWV8fCdjb250aW51ZSc9PT1lKSYmby50cnlMb2M8PXQmJnQ8PW8uZmluYWxseUxvYyYmKG89bnVsbCk7dmFyIGw9bz9vLmNvbXBsZXRpb246e307cmV0dXJuIGwudHlwZT1lLGwuYXJnPXQsbz8odGhpcy5tZXRob2Q9J25leHQnLHRoaXMubmV4dD1vLmZpbmFsbHlMb2MsQSk6dGhpcy5jb21wbGV0ZShsKX0sY29tcGxldGU6ZnVuY3Rpb24oZSx0KXtpZigndGhyb3cnPT09ZS50eXBlKXRocm93IGUuYXJnO3JldHVybidicmVhayc9PT1lLnR5cGV8fCdjb250aW51ZSc9PT1lLnR5cGU/dGhpcy5uZXh0PWUuYXJnOidyZXR1cm4nPT09ZS50eXBlPyh0aGlzLnJ2YWw9dGhpcy5hcmc9ZS5hcmcsdGhpcy5tZXRob2Q9J3JldHVybicsdGhpcy5uZXh0PSdlbmQnKTonbm9ybWFsJz09PWUudHlwZSYmdCYmKHRoaXMubmV4dD10KSxBfSxmaW5pc2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xOzA8PXI7LS1yKWlmKHQ9dGhpcy50cnlFbnRyaWVzW3JdLHQuZmluYWxseUxvYz09PWUpcmV0dXJuIHRoaXMuY29tcGxldGUodC5jb21wbGV0aW9uLHQuYWZ0ZXJMb2MpLHUodCksQX0sY2F0Y2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xOzA8PXI7LS1yKWlmKHQ9dGhpcy50cnlFbnRyaWVzW3JdLHQudHJ5TG9jPT09ZSl7dmFyIG49dC5jb21wbGV0aW9uO2lmKCd0aHJvdyc9PT1uLnR5cGUpe3ZhciBvPW4uYXJnO3UodCl9cmV0dXJuIG99dGhyb3cgbmV3IEVycm9yKCdpbGxlZ2FsIGNhdGNoIGF0dGVtcHQnKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOmgoZSkscmVzdWx0TmFtZTp0LG5leHRMb2M6cn0sJ25leHQnPT09dGhpcy5tZXRob2QmJih0aGlzLmFyZz12b2lkIDApLEF9fX0oZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKXx8RnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKSl9LGZ1bmN0aW9uKGUsdCxyKXsndXNlIHN0cmljdCc7ZnVuY3Rpb24gbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCdfX2VzTW9kdWxlJyx7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHIsbj0wO248dC5sZW5ndGg7bisrKXI9dFtuXSxyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwndmFsdWUnaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpLGw9cigyMTApLGE9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShsKSxzPXIoOTgpLGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciByPXQuc2VuZCxvPXQuZmlsZSxsPXQucmVxSWQ7bih0aGlzLGUpLHRoaXMuc2VuZD1yLHRoaXMuZmlsZT1vLHRoaXMucmVxSWQ9bDt2YXIgcz1vLmJ1ZmZlcjt0aGlzLmNoZWNrc3VtPSgwLGEuZGVmYXVsdCkoQXJyYXkuZnJvbShzKSksdGhpcy5zaXplPXMubGVuZ3RofXJldHVybiBvKGUsW3trZXk6J3JlcXVlc3RVcGxvYWQnLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5maWxlLHQ9ZS5kb2N1bWVudFR5cGUscj1lLmRvY3VtZW50Rm9ybWF0LG49ZS5kb2N1bWVudElkLG89ZS5leHBpcmF0aW9uRGF0ZSxsPWUubGlmZXRpbWVWYWxpZCxhPWUucGFnZVR5cGUscz1lLmJ1ZmZlcixpPU9iamVjdC5hc3NpZ24odGhpcy5maWxlLnBhc3N0aHJvdWdofHx7fSx7ZG9jdW1lbnRfdXBsb2FkOiEwfSksYz17cmVxX2lkOnRoaXMucmVxSWQscGFzc3Rocm91Z2g6aSxkb2N1bWVudF91cGxvYWQ6MSxkb2N1bWVudF90eXBlOnQsZG9jdW1lbnRfZm9ybWF0OnIudG9VcHBlckNhc2UoKSxleHBpcmF0aW9uX2RhdGU6byxkb2N1bWVudF9pZDpuLGZpbGVfc2l6ZTpzLmxlbmd0aCxleHBlY3RlZF9jaGVja3N1bTp0aGlzLmNoZWNrc3VtfTthJiYoYy5wYWdlX3R5cGU9YSksbCYmKGMubGlmZXRpbWVfdmFsaWQ9bCksdGhpcy5zZW5kKEpTT04uc3RyaW5naWZ5KGMpKX19LHtrZXk6J2hhbmRsZU1lc3NhZ2UnLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuZXJyb3Iscj1lLmRvY3VtZW50X3VwbG9hZCxuPWUucGFzc3Rocm91Z2g7aWYodClyZXR1cm57d2FybmluZzp0LmNvZGUsbWVzc2FnZTp0Lm1lc3NhZ2UscGFzc3Rocm91Z2g6bn07dmFyIG89ci5jaGVja3N1bSxsPXIuc2l6ZSxhPXIudXBsb2FkX2lkLGk9ci5jYWxsX3R5cGU7aWYoIW8pcmV0dXJuIHZvaWQgdGhpcy5zdGFydEJpbmFyeVVwbG9hZChPYmplY3QuYXNzaWduKHt9LHRoaXMuZmlsZSx7dXBsb2FkSWQ6YSxjYWxsVHlwZTppfSkpO2lmKGwhPT10aGlzLnNpemUpdGhyb3coMCxzLmNyZWF0ZUVycm9yKSgnU2l6ZU1pc21hdGNoJywnRmlsZSBzaXplIGRvZXMgbm90IG1hdGNoJyxuKTtpZihvIT09dGhpcy5jaGVja3N1bSl0aHJvdygwLHMuY3JlYXRlRXJyb3IpKCdDaGVja3N1bU1pc21hdGNoJywnQ2hlY2tzdW0gZG9lcyBub3QgbWF0Y2gnLG4pO3JldHVybntkb2N1bWVudF91cGxvYWQ6cixwYXNzdGhyb3VnaDpufX19LHtrZXk6J3N0YXJ0QmluYXJ5VXBsb2FkJyx2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcyxyPSgwLHMuYWRkTWV0YWRhdGEpKCgwLHMuZ2VuZXJhdGVDaHVua3MpKGUuYnVmZmVyLGUpLGUpLG49ZnVuY3Rpb24oZSl7cmV0dXJuIHQuc2VuZChlKX0sbz0wO288ci5sZW5ndGg7bysrKW4ocltvXSxvLHIpfX1dKSxlfSgpO3QuZGVmYXVsdD1pfSxmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKCl7dmFyIHQ9cigyMTEpLG49cig5OSkudXRmOCxvPXIoMjEyKSxzPXIoOTkpLmJpbixsPWZ1bmN0aW9uKGUscil7ZS5jb25zdHJ1Y3Rvcj09U3RyaW5nP3ImJidiaW5hcnknPT09ci5lbmNvZGluZz9lPXMuc3RyaW5nVG9CeXRlcyhlKTplPW4uc3RyaW5nVG9CeXRlcyhlKTpvKGUpP2U9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSwwKTohQXJyYXkuaXNBcnJheShlKSYmKGU9ZS50b1N0cmluZygpKTtmb3IodmFyIHA9dC5ieXRlc1RvV29yZHMoZSksdT04KmUubGVuZ3RoLGc9MTczMjU4NDE5MyxhPS0yNzE3MzM4NzksaD0tMTczMjU4NDE5NCxjPTI3MTczMzg3OCxkPTA7ZDxwLmxlbmd0aDtkKyspcFtkXT0xNjcxMTkzNSYocFtkXTw8OHxwW2RdPj4+MjQpfDQyNzgyNTUzNjAmKHBbZF08PDI0fHBbZF0+Pj44KTtwW3U+Pj41XXw9MTI4PDx1JTMyLHBbKHUrNjQ+Pj45PDw0KSsxNF09dTtmb3IodmFyIGk9bC5fZmYseT1sLl9nZyxmPWwuX2hoLG09bC5faWksZD0wO2Q8cC5sZW5ndGg7ZCs9MTYpe3ZhciBFPWcseD1hLF89aCxTPWM7Zz1pKGcsYSxoLGMscFtkKzBdLDcsLTY4MDg3NjkzNiksYz1pKGMsZyxhLGgscFtkKzFdLDEyLC0zODk1NjQ1ODYpLGg9aShoLGMsZyxhLHBbZCsyXSwxNyw2MDYxMDU4MTkpLGE9aShhLGgsYyxnLHBbZCszXSwyMiwtMTA0NDUyNTMzMCksZz1pKGcsYSxoLGMscFtkKzRdLDcsLTE3NjQxODg5NyksYz1pKGMsZyxhLGgscFtkKzVdLDEyLDEyMDAwODA0MjYpLGg9aShoLGMsZyxhLHBbZCs2XSwxNywtMTQ3MzIzMTM0MSksYT1pKGEsaCxjLGcscFtkKzddLDIyLC00NTcwNTk4MyksZz1pKGcsYSxoLGMscFtkKzhdLDcsMTc3MDAzNTQxNiksYz1pKGMsZyxhLGgscFtkKzldLDEyLC0xOTU4NDE0NDE3KSxoPWkoaCxjLGcsYSxwW2QrMTBdLDE3LC00MjA2MyksYT1pKGEsaCxjLGcscFtkKzExXSwyMiwtMTk5MDQwNDE2MiksZz1pKGcsYSxoLGMscFtkKzEyXSw3LDE4MDQ2MDM2ODIpLGM9aShjLGcsYSxoLHBbZCsxM10sMTIsLTQwMzQxMTAxKSxoPWkoaCxjLGcsYSxwW2QrMTRdLDE3LC0xNTAyMDAyMjkwKSxhPWkoYSxoLGMsZyxwW2QrMTVdLDIyLDEyMzY1MzUzMjkpLGc9eShnLGEsaCxjLHBbZCsxXSw1LC0xNjU3OTY1MTApLGM9eShjLGcsYSxoLHBbZCs2XSw5LC0xMDY5NTAxNjMyKSxoPXkoaCxjLGcsYSxwW2QrMTFdLDE0LDY0MzcxNzcxMyksYT15KGEsaCxjLGcscFtkKzBdLDIwLC0zNzM4OTczMDIpLGc9eShnLGEsaCxjLHBbZCs1XSw1LC03MDE1NTg2OTEpLGM9eShjLGcsYSxoLHBbZCsxMF0sOSwzODAxNjA4MyksaD15KGgsYyxnLGEscFtkKzE1XSwxNCwtNjYwNDc4MzM1KSxhPXkoYSxoLGMsZyxwW2QrNF0sMjAsLTQwNTUzNzg0OCksZz15KGcsYSxoLGMscFtkKzldLDUsNTY4NDQ2NDM4KSxjPXkoYyxnLGEsaCxwW2QrMTRdLDksLTEwMTk4MDM2OTApLGg9eShoLGMsZyxhLHBbZCszXSwxNCwtMTg3MzYzOTYxKSxhPXkoYSxoLGMsZyxwW2QrOF0sMjAsMTE2MzUzMTUwMSksZz15KGcsYSxoLGMscFtkKzEzXSw1LC0xNDQ0NjgxNDY3KSxjPXkoYyxnLGEsaCxwW2QrMl0sOSwtNTE0MDM3ODQpLGg9eShoLGMsZyxhLHBbZCs3XSwxNCwxNzM1MzI4NDczKSxhPXkoYSxoLGMsZyxwW2QrMTJdLDIwLC0xOTI2NjA3NzM0KSxnPWYoZyxhLGgsYyxwW2QrNV0sNCwtMzc4NTU4KSxjPWYoYyxnLGEsaCxwW2QrOF0sMTEsLTIwMjI1NzQ0NjMpLGg9ZihoLGMsZyxhLHBbZCsxMV0sMTYsMTgzOTAzMDU2MiksYT1mKGEsaCxjLGcscFtkKzE0XSwyMywtMzUzMDk1NTYpLGc9ZihnLGEsaCxjLHBbZCsxXSw0LC0xNTMwOTkyMDYwKSxjPWYoYyxnLGEsaCxwW2QrNF0sMTEsMTI3Mjg5MzM1MyksaD1mKGgsYyxnLGEscFtkKzddLDE2LC0xNTU0OTc2MzIpLGE9ZihhLGgsYyxnLHBbZCsxMF0sMjMsLTEwOTQ3MzA2NDApLGc9ZihnLGEsaCxjLHBbZCsxM10sNCw2ODEyNzkxNzQpLGM9ZihjLGcsYSxoLHBbZCswXSwxMSwtMzU4NTM3MjIyKSxoPWYoaCxjLGcsYSxwW2QrM10sMTYsLTcyMjUyMTk3OSksYT1mKGEsaCxjLGcscFtkKzZdLDIzLDc2MDI5MTg5KSxnPWYoZyxhLGgsYyxwW2QrOV0sNCwtNjQwMzY0NDg3KSxjPWYoYyxnLGEsaCxwW2QrMTJdLDExLC00MjE4MTU4MzUpLGg9ZihoLGMsZyxhLHBbZCsxNV0sMTYsNTMwNzQyNTIwKSxhPWYoYSxoLGMsZyxwW2QrMl0sMjMsLTk5NTMzODY1MSksZz1tKGcsYSxoLGMscFtkKzBdLDYsLTE5ODYzMDg0NCksYz1tKGMsZyxhLGgscFtkKzddLDEwLDExMjY4OTE0MTUpLGg9bShoLGMsZyxhLHBbZCsxNF0sMTUsLTE0MTYzNTQ5MDUpLGE9bShhLGgsYyxnLHBbZCs1XSwyMSwtNTc0MzQwNTUpLGc9bShnLGEsaCxjLHBbZCsxMl0sNiwxNzAwNDg1NTcxKSxjPW0oYyxnLGEsaCxwW2QrM10sMTAsLTE4OTQ5ODY2MDYpLGg9bShoLGMsZyxhLHBbZCsxMF0sMTUsLTEwNTE1MjMpLGE9bShhLGgsYyxnLHBbZCsxXSwyMSwtMjA1NDkyMjc5OSksZz1tKGcsYSxoLGMscFtkKzhdLDYsMTg3MzMxMzM1OSksYz1tKGMsZyxhLGgscFtkKzE1XSwxMCwtMzA2MTE3NDQpLGg9bShoLGMsZyxhLHBbZCs2XSwxNSwtMTU2MDE5ODM4MCksYT1tKGEsaCxjLGcscFtkKzEzXSwyMSwxMzA5MTUxNjQ5KSxnPW0oZyxhLGgsYyxwW2QrNF0sNiwtMTQ1NTIzMDcwKSxjPW0oYyxnLGEsaCxwW2QrMTFdLDEwLC0xMTIwMjEwMzc5KSxoPW0oaCxjLGcsYSxwW2QrMl0sMTUsNzE4Nzg3MjU5KSxhPW0oYSxoLGMsZyxwW2QrOV0sMjEsLTM0MzQ4NTU1MSksZz1nK0U+Pj4wLGE9YSt4Pj4+MCxoPWgrXz4+PjAsYz1jK1M+Pj4wfXJldHVybiB0LmVuZGlhbihbZyxhLGgsY10pfTtsLl9mZj1mdW5jdGlvbihlLHIsbyxsLGEsaSxzKXt2YXIgdD1lKyhyJm98fnImbCkrKGE+Pj4wKStzO3JldHVybih0PDxpfHQ+Pj4zMi1pKStyfSxsLl9nZz1mdW5jdGlvbihlLHIsbyxsLGEsaSxzKXt2YXIgdD1lKyhyJmx8byZ+bCkrKGE+Pj4wKStzO3JldHVybih0PDxpfHQ+Pj4zMi1pKStyfSxsLl9oaD1mdW5jdGlvbihlLHIsbyxsLGEsaSxzKXt2YXIgdD1lKyhyXm9ebCkrKGE+Pj4wKStzO3JldHVybih0PDxpfHQ+Pj4zMi1pKStyfSxsLl9paT1mdW5jdGlvbihlLHIsbyxsLGEsaSxzKXt2YXIgdD1lKyhvXihyfH5sKSkrKGE+Pj4wKStzO3JldHVybih0PDxpfHQ+Pj4zMi1pKStyfSxsLl9ibG9ja3NpemU9MTYsbC5fZGlnZXN0c2l6ZT0xNixlLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihlPT09dm9pZCAwfHxudWxsPT09ZSl0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXJndW1lbnQgJytlKTt2YXIgbj10LndvcmRzVG9CeXRlcyhsKGUscikpO3JldHVybiByJiZyLmFzQnl0ZXM/bjpyJiZyLmFzU3RyaW5nP3MuYnl0ZXNUb1N0cmluZyhuKTp0LmJ5dGVzVG9IZXgobil9fSkoKX0sZnVuY3Rpb24oZSl7KGZ1bmN0aW9uKCl7dmFyIHQ9J0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLHI9e3JvdGw6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTw8dHxlPj4+MzItdH0scm90cjpmdW5jdGlvbihlLHQpe3JldHVybiBlPDwzMi10fGU+Pj50fSxlbmRpYW46ZnVuY3Rpb24oZSl7aWYoZS5jb25zdHJ1Y3Rvcj09TnVtYmVyKXJldHVybiAxNjcxMTkzNSZyLnJvdGwoZSw4KXw0Mjc4MjU1MzYwJnIucm90bChlLDI0KTtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdPXIuZW5kaWFuKGVbdF0pO3JldHVybiBlfSxyYW5kb21CeXRlczpmdW5jdGlvbihlKXtmb3IodmFyIHQ9W107MDxlO2UtLSl0LnB1c2gocCgyNTYqTWF0aC5yYW5kb20oKSkpO3JldHVybiB0fSxieXRlc1RvV29yZHM6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLHI9MCxuPTA7cjxlLmxlbmd0aDtyKyssbis9OCl0W24+Pj41XXw9ZVtyXTw8MjQtbiUzMjtyZXR1cm4gdH0sd29yZHNUb0J5dGVzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTA7cjwzMiplLmxlbmd0aDtyKz04KXQucHVzaCgyNTUmZVtyPj4+NV0+Pj4yNC1yJTMyKTtyZXR1cm4gdH0sYnl0ZXNUb0hleDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0wO3I8ZS5sZW5ndGg7cisrKXQucHVzaCgoZVtyXT4+PjQpLnRvU3RyaW5nKDE2KSksdC5wdXNoKCgxNSZlW3JdKS50b1N0cmluZygxNikpO3JldHVybiB0LmpvaW4oJycpfSxoZXhUb0J5dGVzOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTA7cjxlLmxlbmd0aDtyKz0yKXQucHVzaChwYXJzZUludChlLnN1YnN0cihyLDIpLDE2KSk7cmV0dXJuIHR9LGJ5dGVzVG9CYXNlNjQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciByLG49W10sbz0wO288ZS5sZW5ndGg7bys9Myl7cj1lW29dPDwxNnxlW28rMV08PDh8ZVtvKzJdO2Zvcih2YXIgbD0wOzQ+bDtsKyspOCpvKzYqbDw9OCplLmxlbmd0aD9uLnB1c2godC5jaGFyQXQoNjMmcj4+PjYqKDMtbCkpKTpuLnB1c2goJz0nKX1yZXR1cm4gbi5qb2luKCcnKX0sYmFzZTY0VG9CeXRlczpmdW5jdGlvbihlKXtlPWUucmVwbGFjZSgvW15BLVowLTkrXFxcXC9dL2lnLCcnKTtmb3IodmFyIHI9W10sbj0wLGw9MDtuPGUubGVuZ3RoO2w9KytuJTQpMCE9bCYmci5wdXNoKCh0LmluZGV4T2YoZS5jaGFyQXQobi0xKSkmbygyLC0yKmwrOCktMSk8PDIqbHx0LmluZGV4T2YoZS5jaGFyQXQobikpPj4+Ni0yKmwpO3JldHVybiByfX07ZS5leHBvcnRzPXJ9KSgpfSxmdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3JldHVybiEhZS5jb25zdHJ1Y3RvciYmJ2Z1bmN0aW9uJz09dHlwZW9mIGUuY29uc3RydWN0b3IuaXNCdWZmZXImJmUuY29uc3RydWN0b3IuaXNCdWZmZXIoZSl9ZnVuY3Rpb24gcihlKXtyZXR1cm4nZnVuY3Rpb24nPT10eXBlb2YgZS5yZWFkRmxvYXRMRSYmJ2Z1bmN0aW9uJz09dHlwZW9mIGUuc2xpY2UmJnQoZS5zbGljZSgwLDApKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWUmJih0KGUpfHxyKGUpfHwhIWUuX2lzQnVmZmVyKX19XSlbJ2RlZmF1bHQnXX0pOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMEJpYVc1aGNua3RZMjl0TDJKcGJtRnllUzFrYjJOMWJXVnVkQzExY0d4dllXUmxjaTlFYjJOMWJXVnVkRlZ3Ykc5aFpHVnlMbXB6TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2UUdSbGNtbDJMMkZqWTI5MWJuUXZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDBCaWFXNWhjbmt0WTI5dEwySnBibUZ5ZVMxa2IyTjFiV1Z1ZEMxMWNHeHZZV1JsY2k5RWIyTjFiV1Z1ZEZWd2JHOWhaR1Z5TG1welB6WXlNalFpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUtHVXNkQ2w3SjI5aWFtVmpkQ2M5UFhSNWNHVnZaaUJsZUhCdmNuUnpKaVluYjJKcVpXTjBKejA5ZEhsd1pXOW1JRzF2WkhWc1pUOXRiMlIxYkdVdVpYaHdiM0owY3oxMEtDazZKMloxYm1OMGFXOXVKejA5ZEhsd1pXOW1JR1JsWm1sdVpTWW1aR1ZtYVc1bExtRnRaRDlrWldacGJtVW9XMTBzZENrNkoyOWlhbVZqZENjOVBYUjVjR1Z2WmlCbGVIQnZjblJ6UDJWNGNHOXlkSE11Ukc5amRXMWxiblJWY0d4dllXUmxjajEwS0NrNlpTNUViMk4xYldWdWRGVndiRzloWkdWeVBYUW9LWDBwS0hSb2FYTXNablZ1WTNScGIyNG9LWHQyWVhJZ1pUMU5ZWFJvTG5OeGNuUXNkRDFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsTEhJOVRXRjBhQzVNVGpJc2JqMU5ZWFJvTG14dlp5eHZQVTFoZEdndWNHOTNMR3c5VFdGMGFDNWhZbk1zWVQxTllYUm9MbVY0Y0N4elBVMWhkR2d1Wlhod2JURXNhVDFOWVhSb0xtMWhlQ3hqUFUxaGRHZ3VZMlZwYkN4d1BVMWhkR2d1Wm14dmIzSXNaRDFOWVhSb0xtMXBianR5WlhSMWNtNGdablZ1WTNScGIyNG9aU2w3Wm5WdVkzUnBiMjRnZENodUtYdHBaaWh5VzI1ZEtYSmxkSFZ5YmlCeVcyNWRMbVY0Y0c5eWRITTdkbUZ5SUc4OWNsdHVYVDE3YVRwdUxHdzZJVEVzWlhod2IzSjBjenA3ZlgwN2NtVjBkWEp1SUdWYmJsMHVZMkZzYkNodkxtVjRjRzl5ZEhNc2J5eHZMbVY0Y0c5eWRITXNkQ2tzYnk1c1BTRXdMRzh1Wlhod2IzSjBjMzEyWVhJZ2NqMTdmVHR5WlhSMWNtNGdkQzV0UFdVc2RDNWpQWElzZEM1a1BXWjFibU4wYVc5dUtHVXNjaXh1S1h0MExtOG9aU3h5S1h4OFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1VzY2l4N1kyOXVabWxuZFhKaFlteGxPaUV4TEdWdWRXMWxjbUZpYkdVNklUQXNaMlYwT201OUtYMHNkQzV1UFdaMWJtTjBhVzl1S0dVcGUzWmhjaUJ5UFdVbUptVXVYMTlsYzAxdlpIVnNaVDltZFc1amRHbHZiaWdwZTNKbGRIVnliaUJsV3lka1pXWmhkV3gwSjExOU9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHVjlPM0psZEhWeWJpQjBMbVFvY2l3bllTY3NjaWtzY24wc2RDNXZQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNobExIUXBmU3gwTG5BOUp5Y3NkQ2gwTG5NOU1UQXdLWDBvVzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLRE1wTEc4OWNpZ3lNQ2tzYkQxeUtEa3BMR0U5Y2lneE55a3NjejF5S0RFMEtTeHBQU2R3Y205MGIzUjVjR1VuTEdNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQndMR1FzZFN4bkxHZzlaU1pqTGtZc2VUMWxKbU11Unl4bVBXVW1ZeTVUTEcwOVpTWmpMbEFzUlQxbEptTXVRaXg0UFhrL2JqcG1QMjViZEYxOGZDaHVXM1JkUFh0OUtUb29ibHQwWFh4OGUzMHBXMmxkTEY4OWVUOXZPbTliZEYxOGZDaHZXM1JkUFh0OUtTeFRQVjliYVYxOGZDaGZXMmxkUFh0OUtUdG1iM0lvY0NCcGJpQjVKaVlvY2oxMEtTeHlLV1E5SVdnbUpuZ21Kblp2YVdRZ01DRTlQWGhiY0Ywc2RUMG9aRDk0T25JcFczQmRMR2M5UlNZbVpEOXpLSFVzYmlrNmJTWW1KMloxYm1OMGFXOXVKejA5ZEhsd1pXOW1JSFUvY3loR2RXNWpkR2x2Ymk1allXeHNMSFVwT25Vc2VDWW1ZU2g0TEhBc2RTeGxKbU11VlNrc1gxdHdYU0U5ZFNZbWJDaGZMSEFzWnlrc2JTWW1VMXR3WFNFOWRTWW1LRk5iY0YwOWRTbDlPMjR1WTI5eVpUMXZMR011UmoweExHTXVSejB5TEdNdVV6MDBMR011VUQwNExHTXVRajB4Tml4akxsYzlNeklzWXk1VlBUWTBMR011VWoweE1qZ3NaUzVsZUhCdmNuUnpQV045TEdaMWJtTjBhVzl1S0dVcGUyVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNG5iMkpxWldOMEp6MDlkSGx3Wlc5bUlHVS9iblZzYkNFOVBXVTZKMloxYm1OMGFXOXVKejA5ZEhsd1pXOW1JR1Y5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd4S1R0bExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdhV1lvSVc0b1pTa3BkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHVXJKeUJwY3lCdWIzUWdZVzRnYjJKcVpXTjBJU2NwTzNKbGRIVnliaUJsZlgwc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVpTNWxlSEJ2Y25SelBTZDFibVJsWm1sdVpXUW5JVDEwZVhCbGIyWWdkMmx1Wkc5M0ppWjNhVzVrYjNjdVRXRjBhRDA5VFdGMGFEOTNhVzVrYjNjNkozVnVaR1ZtYVc1bFpDY2hQWFI1Y0dWdlppQnpaV3htSmlaelpXeG1MazFoZEdnOVBVMWhkR2cvYzJWc1pqcEdkVzVqZEdsdmJpZ25jbVYwZFhKdUlIUm9hWE1uS1NncE95ZHVkVzFpWlhJblBUMTBlWEJsYjJZZ1gxOW5KaVlvWDE5blBYUXBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZzBNU2tvSjNkcmN5Y3BMRzg5Y2lneU1pa3NiRDF5S0RNcExsTjViV0p2YkN4aFBTZG1kVzVqZEdsdmJpYzlQWFI1Y0dWdlppQnNMSE05WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCdVcyVmRmSHdvYmx0bFhUMWhKaVpzVzJWZGZId29ZVDlzT204cEtDZFRlVzFpYjJ3dUp5dGxLU2w5TzNNdWMzUnZjbVU5Ym4wc1puVnVZM1JwYjI0b1pTbDdaUzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNSeWVYdHlaWFIxY200aElXVW9LWDFqWVhSamFDaDBLWHR5WlhSMWNtNGhNSDE5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd4T0NrN1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQXdQR1UvWkNodUtHVXBMRGt3TURjeE9Ua3lOVFEzTkRBNU9URXBPakI5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd5S1N4dlBYSW9OekFwTEd3OWNpZ3pOaWtzWVQxUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIazdkQzVtUFhJb09Day9UMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1T21aMWJtTjBhVzl1S0dVc2RDeHlLWHRwWmlodUtHVXBMSFE5YkNoMExDRXdLU3h1S0hJcExHOHBkSEo1ZTNKbGRIVnliaUJoS0dVc2RDeHlLWDFqWVhSamFDaDBLWHQ5YVdZb0oyZGxkQ2RwYmlCeWZId25jMlYwSjJsdUlISXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZEJZMk5sYzNOdmNuTWdibTkwSUhOMWNIQnZjblJsWkNFbktUdHlaWFIxY200bmRtRnNkV1VuYVc0Z2NpWW1LR1ZiZEYwOWNpNTJZV3gxWlNrc1pYMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdGxMbVY0Y0c5eWRITTlJWElvTlNrb1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z055RTlUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0h0OUxDZGhKeXg3WjJWME9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEZDlmU2t1WVgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lnM0tTeHZQWElvTWpFcE8yVXVaWGh3YjNKMGN6MXlLRGdwUDJaMWJtTjBhVzl1S0dVc2RDeHlLWHR5WlhSMWNtNGdiaTVtS0dVc2RDeHZLREVzY2lrcGZUcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2NtVjBkWEp1SUdWYmRGMDljaXhsZlgwc1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhROWUzMHVhR0Z6VDNkdVVISnZjR1Z5ZEhrN1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNjaWw3Y21WMGRYSnVJSFF1WTJGc2JDaGxMSElwZlgwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTlRRcExHODljaWd5TlNrN1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnVLRzhvWlNrcGZYMHNablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhJb01qVXBPMlV1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnVDJKcVpXTjBLRzRvWlNrcGZYMHNablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhJb01Da3NiejF5S0RJd0tTeHNQWElvTlNrN1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ2w3ZG1GeUlISTlLRzh1VDJKcVpXTjBmSHg3ZlNsYlpWMThmRTlpYW1WamRGdGxYU3hoUFh0OU8yRmJaVjA5ZENoeUtTeHVLRzR1VXl0dUxrWXFiQ2htZFc1amRHbHZiaWdwZTNJb01TbDlLU3duVDJKcVpXTjBKeXhoS1gxOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RJMEtUdGxMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwTEhJcGUzSmxkSFZ5YmlodUtHVXBMSFp2YVdRZ01EMDlQWFFwUDJVNk1UMDlQWEkvWm5WdVkzUnBiMjRvY2lsN2NtVjBkWEp1SUdVdVkyRnNiQ2gwTEhJcGZUb3lQVDA5Y2o5bWRXNWpkR2x2YmloeUxHNHBlM0psZEhWeWJpQmxMbU5oYkd3b2RDeHlMRzRwZlRvelBUMDljajltZFc1amRHbHZiaWh5TEc0c2J5bDdjbVYwZFhKdUlHVXVZMkZzYkNoMExISXNiaXh2S1gwNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1pTNWhjSEJzZVNoMExHRnlaM1Z0Wlc1MGN5bDlmWDBzWm5WdVkzUnBiMjRvWlN4MExISXBleWQxYzJVZ2MzUnlhV04wSnp0cFppaHlLRGdwS1h0MllYSWdiajF5S0RJektTeHZQWElvTXlrc2JEMXlLRFVwTEdFOWNpZ3dLU3h6UFhJb05UTXBMR2s5Y2lnM01Ta3NZejF5S0RFMEtTeGtQWElvTWprcExIVTljaWd5TVNrc1p6MXlLRGtwTEdnOWNpZ3lPQ2tzZVQxeUtERTRLU3htUFhJb05pa3NiVDF5S0RjeUtTeEZQWElvTXpFcExIZzljaWd6Tmlrc1h6MXlLREV3S1N4VFBYSW9ORFFwTEZROWNpZ3hLU3hpUFhJb01USXBMRkE5Y2lnMU9Ta3NkajF5S0RNNEtTeEpQWElvTXpRcExFRTljaWd6TnlrdVppeFNQWElvTmpBcExFODljaWd5TWlrc2F6MXlLRFFwTEV3OWNpZ3pPU2tzUmoxeUtEVTFLU3hPUFhJb05ESXBMRTA5Y2lnMk1Ta3NkejF5S0RNektTeEVQWElvTkRVcExFTTljaWcwTXlrc2FqMXlLRFU0S1N4WlBYSW9OemdwTEVJOWNpZzNLU3hIUFhJb01UWXBMRlU5UWk1bUxFZzlSeTVtTEZjOWJ5NVNZVzVuWlVWeWNtOXlMRlk5Ynk1VWVYQmxSWEp5YjNJc2VqMXZMbFZwYm5RNFFYSnlZWGtzSkQwblFYSnlZWGxDZFdabVpYSW5MRXM5SjFOb1lYSmxaQ2NySkN4eFBTZENXVlJGVTE5UVJWSmZSVXhGVFVWT1ZDY3NXRDBuY0hKdmRHOTBlWEJsSnl4YVBVRnljbUY1VzFoZExFbzlhUzVCY25KaGVVSjFabVpsY2l4UlBXa3VSR0YwWVZacFpYY3NaV1U5VENnd0tTeDBaVDFNS0RJcExISmxQVXdvTXlrc2JtVTlUQ2cwS1N4dlpUMU1LRFVwTEd4bFBVd29OaWtzWVdVOVJpZ2hNQ2tzYzJVOVJpZ2hNU2tzYVdVOVRTNTJZV3gxWlhNc1kyVTlUUzVyWlhsekxIQmxQVTB1Wlc1MGNtbGxjeXhrWlQxYUxteGhjM1JKYm1SbGVFOW1MSFZsUFZvdWNtVmtkV05sTEdkbFBWb3VjbVZrZFdObFVtbG5hSFFzYUdVOVdpNXFiMmx1TEhsbFBWb3VjMjl5ZEN4bVpUMWFMbk5zYVdObExHMWxQVm91ZEc5VGRISnBibWNzUldVOVdpNTBiMHh2WTJGc1pWTjBjbWx1Wnl4NFpUMXJLQ2RwZEdWeVlYUnZjaWNwTEY5bFBXc29KM1J2VTNSeWFXNW5WR0ZuSnlrc1UyVTlUeWduZEhsd1pXUmZZMjl1YzNSeWRXTjBiM0luS1N4VVpUMVBLQ2RrWldaZlkyOXVjM1J5ZFdOMGIzSW5LU3hpWlQxekxrTlBUbE5VVWl4UVpUMXpMbFJaVUVWRUxFOWxQWE11VmtsRlZ5eDJaVDBuVjNKdmJtY2diR1Z1WjNSb0lTY3NTV1U5VENneExHWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJRVpsS0U0b1pTeGxXMVJsWFNrc2RDbDlLU3hCWlQxc0tHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlERTlQVDF1WlhjZ2VpaHVaWGNnVldsdWRERTJRWEp5WVhrb1d6RmRLUzVpZFdabVpYSXBXekJkZlNrc1VtVTlJU0Y2SmlZaElYcGJXRjB1YzJWMEppWnNLR1oxYm1OMGFXOXVLQ2w3Ym1WM0lIb29NU2t1YzJWMEtIdDlLWDBwTEd0bFBXWjFibU4wYVc5dUtHVXNkQ2w3ZG1GeUlISTllU2hsS1R0cFppZ3dQbko4ZkhJbGRDbDBhSEp2ZHlCWEtDZFhjbTl1WnlCdlptWnpaWFFoSnlrN2NtVjBkWEp1SUhKOUxFeGxQV1oxYm1OMGFXOXVLR1VwZTJsbUtGUW9aU2ttSmxCbElHbHVJR1VwY21WMGRYSnVJR1U3ZEdoeWIzY2dWaWhsS3ljZ2FYTWdibTkwSUdFZ2RIbHdaV1FnWVhKeVlYa2hKeWw5TEVabFBXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb0lTaFVLR1VwSmlaVFpTQnBiaUJsS1NsMGFISnZkeUJXS0NkSmRDQnBjeUJ1YjNRZ1lTQjBlWEJsWkNCaGNuSmhlU0JqYjI1emRISjFZM1J2Y2lFbktUdHlaWFIxY200Z2JtVjNJR1VvZENsOUxFNWxQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUUxbEtFNG9aU3hsVzFSbFhTa3NkQ2w5TEUxbFBXWjFibU4wYVc5dUtHVXNkQ2w3Wm05eUtIWmhjaUJ5UFRBc2JqMTBMbXhsYm1kMGFDeHZQVVpsS0dVc2JpazdiajV5T3lsdlczSmRQWFJiY2lzclhUdHlaWFIxY200Z2IzMHNkMlU5Wm5WdVkzUnBiMjRvWlN4MExISXBlMVVvWlN4MExIdG5aWFE2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGN5NWZaRnR5WFgxOUtYMHNSR1U5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFFzY2l4dUxHOHNiQ3hoTEhNOVlpaGxLU3hwUFdGeVozVnRaVzUwY3k1c1pXNW5kR2dzY0QweFBHay9ZWEpuZFcxbGJuUnpXekZkT25admFXUWdNQ3hrUFhBaFBUMTJiMmxrSURBc2RUMVNLSE1wTzJsbUtIVWhQWFp2YVdRZ01DWW1JVkFvZFNrcGUyWnZjaWhoUFhVdVkyRnNiQ2h6S1N4dVBWdGRMSFE5TURzaEtHdzlZUzV1WlhoMEtDa3BMbVJ2Ym1VN2RDc3JLVzR1Y0hWemFDaHNMblpoYkhWbEtUdHpQVzU5Wm05eUtHUW1Kakk4YVNZbUtIQTlZeWh3TEdGeVozVnRaVzUwYzFzeVhTd3lLU2tzZEQwd0xISTlaaWh6TG14bGJtZDBhQ2tzYnoxR1pTaDBhR2x6TEhJcE8zSStkRHQwS3lzcGIxdDBYVDFrUDNBb2MxdDBYU3gwS1RwelczUmRPM0psZEhWeWJpQnZmU3hEWlQxbWRXNWpkR2x2YmlncGUyWnZjaWgyWVhJZ1pUMHdMSFE5WVhKbmRXMWxiblJ6TG14bGJtZDBhQ3h5UFVabEtIUm9hWE1zZENrN2RENWxPeWx5VzJWZFBXRnlaM1Z0Wlc1MGMxdGxLeXRkTzNKbGRIVnliaUJ5ZlN4cVpUMGhJWG9tSm13b1puVnVZM1JwYjI0b0tYdEZaUzVqWVd4c0tHNWxkeUI2S0RFcEtYMHBMRmxsUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUVWbExtRndjR3g1S0dwbFAyWmxMbU5oYkd3b1RHVW9kR2hwY3lrcE9reGxLSFJvYVhNcExHRnlaM1Z0Wlc1MGN5bDlMRUpsUFh0amIzQjVWMmwwYUdsdU9tWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJRmt1WTJGc2JDaE1aU2gwYUdsektTeGxMSFFzTWp4aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUDJGeVozVnRaVzUwYzFzeVhUcDJiMmxrSURBcGZTeGxkbVZ5ZVRwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2JtVW9UR1VvZEdocGN5a3NaU3d4UEdGeVozVnRaVzUwY3k1c1pXNW5kR2cvWVhKbmRXMWxiblJ6V3pGZE9uWnZhV1FnTUNsOUxHWnBiR3c2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnYWk1aGNIQnNlU2hNWlNoMGFHbHpLU3hoY21kMWJXVnVkSE1wZlN4bWFXeDBaWEk2Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUU1bEtIUm9hWE1zZEdVb1RHVW9kR2hwY3lrc1pTd3hQR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZy9ZWEpuZFcxbGJuUnpXekZkT25admFXUWdNQ2twZlN4bWFXNWtPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ2WlNoTVpTaDBhR2x6S1N4bExERThZWEpuZFcxbGJuUnpMbXhsYm1kMGFEOWhjbWQxYldWdWRITmJNVjA2ZG05cFpDQXdLWDBzWm1sdVpFbHVaR1Y0T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCc1pTaE1aU2gwYUdsektTeGxMREU4WVhKbmRXMWxiblJ6TG14bGJtZDBhRDloY21kMWJXVnVkSE5iTVYwNmRtOXBaQ0F3S1gwc1ptOXlSV0ZqYURwbWRXNWpkR2x2YmlobEtYdGxaU2hNWlNoMGFHbHpLU3hsTERFOFlYSm5kVzFsYm5SekxteGxibWQwYUQ5aGNtZDFiV1Z1ZEhOYk1WMDZkbTlwWkNBd0tYMHNhVzVrWlhoUFpqcG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdjMlVvVEdVb2RHaHBjeWtzWlN3eFBHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnL1lYSm5kVzFsYm5Seld6RmRPblp2YVdRZ01DbDlMR2x1WTJ4MVpHVnpPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJoWlNoTVpTaDBhR2x6S1N4bExERThZWEpuZFcxbGJuUnpMbXhsYm1kMGFEOWhjbWQxYldWdWRITmJNVjA2ZG05cFpDQXdLWDBzYW05cGJqcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQm9aUzVoY0hCc2VTaE1aU2gwYUdsektTeGhjbWQxYldWdWRITXBmU3hzWVhOMFNXNWtaWGhQWmpwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCa1pTNWhjSEJzZVNoTVpTaDBhR2x6S1N4aGNtZDFiV1Z1ZEhNcGZTeHRZWEE2Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUVsbEtFeGxLSFJvYVhNcExHVXNNVHhoY21kMWJXVnVkSE11YkdWdVozUm9QMkZ5WjNWdFpXNTBjMXN4WFRwMmIybGtJREFwZlN4eVpXUjFZMlU2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZFdVdVlYQndiSGtvVEdVb2RHaHBjeWtzWVhKbmRXMWxiblJ6S1gwc2NtVmtkV05sVW1sbmFIUTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdaMlV1WVhCd2JIa29UR1VvZEdocGN5a3NZWEpuZFcxbGJuUnpLWDBzY21WMlpYSnpaVHBtZFc1amRHbHZiaWdwZTJadmNpaDJZWElnWlN4MFBYUm9hWE1zY2oxTVpTaDBLUzVzWlc1bmRHZ3NiajF3S0hJdk1pa3NiejB3TzI4OGJqc3BaVDEwVzI5ZExIUmJieXNyWFQxMFd5MHRjbDBzZEZ0eVhUMWxPM0psZEhWeWJpQjBmU3h6YjIxbE9tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnlaU2hNWlNoMGFHbHpLU3hsTERFOFlYSm5kVzFsYm5SekxteGxibWQwYUQ5aGNtZDFiV1Z1ZEhOYk1WMDZkbTlwWkNBd0tYMHNjMjl5ZERwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2VXVXVZMkZzYkNoTVpTaDBhR2x6S1N4bEtYMHNjM1ZpWVhKeVlYazZablZ1WTNScGIyNG9aU3gwS1h0MllYSWdjajFNWlNoMGFHbHpLU3h1UFhJdWJHVnVaM1JvTEc4OVJTaGxMRzRwTzNKbGRIVnliaUJ1Wlhjb1RpaHlMSEpiVkdWZEtTa29jaTVpZFdabVpYSXNjaTVpZVhSbFQyWm1jMlYwSzI4cWNpNUNXVlJGVTE5UVJWSmZSVXhGVFVWT1ZDeG1LQ2gwUFQwOWRtOXBaQ0F3UDI0NlJTaDBMRzRwS1MxdktTbDlmU3hIWlQxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQk9aU2gwYUdsekxHWmxMbU5oYkd3b1RHVW9kR2hwY3lrc1pTeDBLU2w5TEZWbFBXWjFibU4wYVc5dUtHVXBlMHhsS0hSb2FYTXBPM1poY2lCMFBXdGxLR0Z5WjNWdFpXNTBjMXN4WFN3eEtTeHlQWFJvYVhNdWJHVnVaM1JvTEc0OVlpaGxLU3h2UFdZb2JpNXNaVzVuZEdncExHdzlNRHRwWmlodkszUStjaWwwYUhKdmR5QlhLSFpsS1R0bWIzSW9PMnc4YnpzcGRHaHBjMXQwSzJ4ZFBXNWJiQ3NyWFgwc1NHVTllMlZ1ZEhKcFpYTTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdjR1V1WTJGc2JDaE1aU2gwYUdsektTbDlMR3RsZVhNNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1kyVXVZMkZzYkNoTVpTaDBhR2x6S1NsOUxIWmhiSFZsY3pwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCcFpTNWpZV3hzS0V4bEtIUm9hWE1wS1gxOUxGZGxQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUZRb1pTa21KbVZiVUdWZEppWW5jM2x0WW05c0p5RTlkSGx3Wlc5bUlIUW1KblFnYVc0Z1pTWW1LM1FySnljOVBYUXJKeWQ5TEZabFBXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJRmRsS0dVc2REMTRLSFFzSVRBcEtUOTFLRElzWlZ0MFhTazZTQ2hsTEhRcGZTeDZaVDFtZFc1amRHbHZiaWhsTEhRc2NpbDdjbVYwZFhKdUlGZGxLR1VzZEQxNEtIUXNJVEFwS1NZbVZDaHlLU1ltWHloeUxDZDJZV3gxWlNjcEppWWhYeWh5TENkblpYUW5LU1ltSVY4b2Npd25jMlYwSnlrbUppRnlMbU52Ym1acFozVnlZV0pzWlNZbUtDRmZLSElzSjNkeWFYUmhZbXhsSnlsOGZISXVkM0pwZEdGaWJHVXBKaVlvSVY4b2Npd25aVzUxYldWeVlXSnNaU2NwZkh4eUxtVnVkVzFsY21GaWJHVXBQeWhsVzNSZFBYSXVkbUZzZFdVc1pTazZWU2hsTEhRc2NpbDlPMkpsZkh3b1J5NW1QVlpsTEVJdVpqMTZaU2tzWVNoaExsTXJZUzVHS2lGaVpTd25UMkpxWldOMEp5eDdaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eU9sWmxMR1JsWm1sdVpWQnliM0JsY25SNU9ucGxmU2tzYkNobWRXNWpkR2x2YmlncGUyMWxMbU5oYkd3b2UzMHBmU2ttSmlodFpUMUZaVDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJvWlM1allXeHNLSFJvYVhNcGZTazdkbUZ5SUNSbFBXZ29lMzBzUW1VcE8yZ29KR1VzU0dVcExHY29KR1VzZUdVc1NHVXVkbUZzZFdWektTeG9LQ1JsTEh0emJHbGpaVHBIWlN4elpYUTZWV1VzWTI5dWMzUnlkV04wYjNJNlpuVnVZM1JwYjI0b0tYdDlMSFJ2VTNSeWFXNW5PbTFsTEhSdlRHOWpZV3hsVTNSeWFXNW5PbGxsZlNrc2QyVW9KR1VzSjJKMVptWmxjaWNzSjJJbktTeDNaU2drWlN3bllubDBaVTltWm5ObGRDY3NKMjhuS1N4M1pTZ2taU3duWW5sMFpVeGxibWQwYUNjc0oyd25LU3gzWlNna1pTd25iR1Z1WjNSb0p5d25aU2NwTEZVb0pHVXNYMlVzZTJkbGREcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6VzFCbFhYMTlLU3hsTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MExISXNhU2w3YVQwaElXazdkbUZ5SUdNOVpTc29hVDhuUTJ4aGJYQmxaQ2M2SnljcEt5ZEJjbkpoZVNjc2NEMXZXMk5kTEhVOWNIeDhlMzBzYUQxd0ppWkpLSEFwTEhrOUlYQjhmQ0Z6TGtGQ1ZpeEZQWHQ5TEhnOWNDWW1jRnRZWFN4ZlBXWjFibU4wYVc5dUtISXNiaWw3ZG1GeUlHODljaTVmWkR0eVpYUjFjbTRnYnk1Mld5ZG5aWFFuSzJWZEtHNHFkQ3R2TG04c1FXVXBmU3hpUFdaMWJtTjBhVzl1S0hJc2JpeHZLWHQyWVhJZ2JEMXlMbDlrTzJrbUppaHZQVEErS0c4OVRXRjBhQzV5YjNWdVpDaHZLU2svTURveU5UVThiejh5TlRVNk1qVTFKbThwTEd3dWRsc25jMlYwSnl0bFhTaHVLblFyYkM1dkxHOHNRV1VwZlN4UVBXWjFibU4wYVc5dUtHVXNkQ2w3VlNobExIUXNlMmRsZERwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCZktIUm9hWE1zZENsOUxITmxkRHBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWWloMGFHbHpMSFFzWlNsOUxHVnVkVzFsY21GaWJHVTZJVEI5S1gwN2VUOG9jRDF5S0daMWJtTjBhVzl1S0dVc2NpeHVMRzhwZTJRb1pTeHdMR01zSjE5a0p5azdkbUZ5SUd3c1lTeHpMR2tzZFQwd0xHZzlNRHRwWmlnaFZDaHlLU2x6UFcwb2Npa3NZVDF6S25Rc2JEMXVaWGNnU2loaEtUdGxiSE5sSUdsbUtISWdhVzV6ZEdGdVkyVnZaaUJLZkh3b2FUMVRLSElwS1QwOUpIeDhhVDA5U3lsN2JEMXlMR2c5YTJVb2JpeDBLVHQyWVhJZ2VUMXlMbUo1ZEdWTVpXNW5kR2c3YVdZb2RtOXBaQ0F3UFQwOWJ5bDdhV1lvZVNWMEtYUm9jbTkzSUZjb2RtVXBPMmxtS0dFOWVTMW9MREErWVNsMGFISnZkeUJYS0habEtYMWxiSE5sSUdsbUtHRTlaaWh2S1NwMExHRXJhRDU1S1hSb2NtOTNJRmNvZG1VcE8zTTlZUzkwZldWc2MyVWdjbVYwZFhKdUlGQmxJR2x1SUhJL1RXVW9jQ3h5S1RwRVpTNWpZV3hzS0hBc2NpazdabTl5S0djb1pTd25YMlFuTEh0aU9td3NienBvTEd3NllTeGxPbk1zZGpwdVpYY2dVU2hzS1gwcE8zVThjenNwVUNobExIVXJLeWw5S1N4NFBYQmJXRjA5ZGlna1pTa3NaeWg0TENkamIyNXpkSEoxWTNSdmNpY3NjQ2twT2lnaGJDaG1kVzVqZEdsdmJpZ3BlM0FvTVNsOUtYeDhJV3dvWm5WdVkzUnBiMjRvS1h0dVpYY2djQ2d0TVNsOUtYeDhJVVFvWm5WdVkzUnBiMjRvWlNsN2JtVjNJSEFzYm1WM0lIQW9iblZzYkNrc2JtVjNJSEFvTVM0MUtTeHVaWGNnY0NobEtYMHNJVEFwS1NZbUtIQTljaWhtZFc1amRHbHZiaWhsTEhJc2JpeHZLWHRrS0dVc2NDeGpLVHQyWVhJZ2JEdHlaWFIxY200Z1ZDaHlLVDl5SUdsdWMzUmhibU5sYjJZZ1NueDhLR3c5VXloeUtTazlQU1I4Zkd3OVBVcy9kbTlwWkNBd1BUMDliejkyYjJsa0lEQTlQVDF1UDI1bGR5QjFLSElwT201bGR5QjFLSElzYTJVb2JpeDBLU2s2Ym1WM0lIVW9jaXhyWlNodUxIUXBMRzhwT2xCbElHbHVJSEkvVFdVb2NDeHlLVHBFWlM1allXeHNLSEFzY2lrNmJtVjNJSFVvYlNoeUtTbDlLU3hsWlNob1BUMDlSblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxQMEVvZFNrNlFTaDFLUzVqYjI1allYUW9RU2hvS1Nrc1puVnVZM1JwYjI0b1pTbDdaU0JwYmlCd2ZIeG5LSEFzWlN4MVcyVmRLWDBwTEhCYldGMDllQ3doYmlZbUtIZ3VZMjl1YzNSeWRXTjBiM0k5Y0NrcE8zWmhjaUJQUFhoYmVHVmRMRkk5SVNGUEppWW9KM1poYkhWbGN5YzlQVTh1Ym1GdFpYeDhUeTV1WVcxbFBUMTJiMmxrSURBcExHczlTR1V1ZG1Gc2RXVnpPMmNvY0N4VFpTd2hNQ2tzWnloNExGQmxMR01wTEdjb2VDeFBaU3doTUNrc1p5aDRMRlJsTEhBcExDaHBQMjVsZHlCd0tERXBXMTlsWFNFOVl6b2hLRjlsSUdsdUlIZ3BLU1ltVlNoNExGOWxMSHRuWlhRNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1kzMTlLU3hGVzJOZFBYQXNZU2hoTGtjcllTNVhLMkV1Umlvb2NDRTlkU2tzUlNrc1lTaGhMbE1zWXl4N1FsbFVSVk5mVUVWU1gwVk1SVTFGVGxRNmRIMHBMR0VvWVM1VEsyRXVSaXBzS0daMWJtTjBhVzl1S0NsN2RTNXZaaTVqWVd4c0tIQXNNU2w5S1N4akxIdG1jbTl0T2tSbExHOW1Pa05sZlNrc2NTQnBiaUI0Zkh4bktIZ3NjU3gwS1N4aEtHRXVVQ3hqTEVKbEtTeERLR01wTEdFb1lTNVFLMkV1UmlwU1pTeGpMSHR6WlhRNlZXVjlLU3hoS0dFdVVDdGhMa1lxSVZJc1l5eElaU2tzYm54OGVDNTBiMU4wY21sdVp6MDliV1Y4ZkNoNExuUnZVM1J5YVc1blBXMWxLU3hoS0dFdVVDdGhMa1lxYkNobWRXNWpkR2x2YmlncGUyNWxkeUJ3S0RFcExuTnNhV05sS0NsOUtTeGpMSHR6YkdsalpUcEhaWDBwTEdFb1lTNVFLMkV1Umlvb2JDaG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJsc3hMREpkTG5SdlRHOWpZV3hsVTNSeWFXNW5LQ2toUFc1bGR5QndLRnN4TERKZEtTNTBiMHh2WTJGc1pWTjBjbWx1WnlncGZTbDhmQ0ZzS0daMWJtTjBhVzl1S0NsN2VDNTBiMHh2WTJGc1pWTjBjbWx1Wnk1allXeHNLRnN4TERKZEtYMHBLU3hqTEh0MGIweHZZMkZzWlZOMGNtbHVaenBaWlgwcExIZGJZMTA5VWo5UE9tc3Nibng4VW54OFp5aDRMSGhsTEdzcGZYMWxiSE5sSUdVdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlncGUzMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtEUXdLU3h2UFhJb01qRXBMR3c5Y2lneE1Ta3NZVDF5S0RNMktTeHpQWElvTVRBcExHazljaWczTUNrc1l6MVBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5TzNRdVpqMXlLRGdwUDJNNlpuVnVZM1JwYjI0b1pTeDBLWHRwWmlobFBXd29aU2tzZEQxaEtIUXNJVEFwTEdrcGRISjVlM0psZEhWeWJpQmpLR1VzZENsOVkyRjBZMmdvZENsN2ZYSmxkSFZ5YmlCektHVXNkQ2svYnlnaGJpNW1MbU5oYkd3b1pTeDBLU3hsVzNSZEtUcDJiMmxrSURCOWZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lnektTeHZQWElvT1Nrc2JEMXlLREV3S1N4aFBYSW9NaklwS0NkemNtTW5LU3h6UFhJb01UQXlLU3hwUFNkMGIxTjBjbWx1Wnljc1l6MG9KeWNyY3lrdWMzQnNhWFFvYVNrN2NpZ3lNQ2t1YVc1emNHVmpkRk52ZFhKalpUMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdjeTVqWVd4c0tHVXBmU3dvWlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDeHlMSE1wZTNaaGNpQnBQU2RtZFc1amRHbHZiaWM5UFhSNWNHVnZaaUJ5TzJrbUppaHNLSElzSjI1aGJXVW5LWHg4YnloeUxDZHVZVzFsSnl4MEtTazdaVnQwWFQwOVBYSjhmQ2hwSmlZb2JDaHlMR0VwZkh4dktISXNZU3hsVzNSZFB5Y25LMlZiZEYwNll5NXFiMmx1S0hRckp5Y3BLU2tzWlQwOVBXNC9aVnQwWFQxeU9uTS9aVnQwWFQ5bFczUmRQWEk2YnlobExIUXNjaWs2S0dSbGJHVjBaU0JsVzNSZExHOG9aU3gwTEhJcEtTbDlLU2hHZFc1amRHbHZiaTV3Y205MGIzUjVjR1VzYVN4bWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlkbWRXNWpkR2x2YmljOVBYUjVjR1Z2WmlCMGFHbHpKaVowYUdselcyRmRmSHh6TG1OaGJHd29kR2hwY3lsOUtYMHNablZ1WTNScGIyNG9aU2w3WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCcGMwNWhUaWhsUFN0bEtUOHdPaWd3UEdVL2NEcGpLU2hsS1gxOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RJeUtTZ25iV1YwWVNjcExHODljaWd4S1N4c1BYSW9NVEFwTEdFOWNpZzNLUzVtTEhNOU1DeHBQVTlpYW1WamRDNXBjMFY0ZEdWdWMybGliR1Y4ZkdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SVRCOUxHTTlJWElvTlNrb1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z2FTaFBZbXBsWTNRdWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5Nb2UzMHBLWDBwTEhBOVpuVnVZM1JwYjI0b1pTbDdZU2hsTEc0c2UzWmhiSFZsT250cE9pZFBKeXNnS3l0ekxIYzZlMzE5ZlNsOUxHUTlaUzVsZUhCdmNuUnpQWHRMUlZrNmJpeE9SVVZFT2lFeExHWmhjM1JMWlhrNlpuVnVZM1JwYjI0b1pTeDBLWHRwWmlnaGJ5aGxLU2x5WlhSMWNtNG5jM2x0WW05c0p6MDlkSGx3Wlc5bUlHVS9aVG9vSjNOMGNtbHVaeWM5UFhSNWNHVnZaaUJsUHlkVEp6b25VQ2NwSzJVN2FXWW9JV3dvWlN4dUtTbDdhV1lvSVdrb1pTa3BjbVYwZFhKdUowWW5PMmxtS0NGMEtYSmxkSFZ5YmlkRkp6dHdLR1VwZlhKbGRIVnliaUJsVzI1ZExtbDlMR2RsZEZkbFlXczZablZ1WTNScGIyNG9aU3gwS1h0cFppZ2hiQ2hsTEc0cEtYdHBaaWdoYVNobEtTbHlaWFIxY200aE1EdHBaaWdoZENseVpYUjFjbTRoTVR0d0tHVXBmWEpsZEhWeWJpQmxXMjVkTG5kOUxHOXVSbkpsWlhwbE9tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQmpKaVprTGs1RlJVUW1KbWtvWlNrbUppRnNLR1VzYmlrbUpuQW9aU2tzWlgxOWZTeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMWxMbVY0Y0c5eWRITTllM1psY25OcGIyNDZKekl1Tmk0MUozMDdKMjUxYldKbGNpYzlQWFI1Y0dWdlppQmZYMlVtSmloZlgyVTlkQ2w5TEdaMWJtTjBhVzl1S0dVcGUyVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFwZTNKbGRIVnlibnRsYm5WdFpYSmhZbXhsT2lFb01TWmxLU3hqYjI1bWFXZDFjbUZpYkdVNklTZ3lKbVVwTEhkeWFYUmhZbXhsT2lFb05DWmxLU3gyWVd4MVpUcDBmWDE5TEdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFRBc2NqMU5ZWFJvTG5KaGJtUnZiU2dwTzJVdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200blUzbHRZbTlzS0NjdVkyOXVZMkYwS0dVOVBUMTJiMmxrSURBL0p5YzZaU3duS1Y4bkxDZ3JLM1FyY2lrdWRHOVRkSEpwYm1jb016WXBLWDE5TEdaMWJtTjBhVzl1S0dVcGUyVXVaWGh3YjNKMGN6MGhNWDBzWm5WdVkzUnBiMjRvWlNsN1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlMmxtS0NkbWRXNWpkR2x2YmljaFBYUjVjR1Z2WmlCbEtYUm9jbTkzSUZSNWNHVkZjbkp2Y2lobEt5Y2dhWE1nYm05MElHRWdablZ1WTNScGIyNGhKeWs3Y21WMGRYSnVJR1Y5ZlN4bWRXNWpkR2x2YmlobEtYdGxMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3YVdZb1pUMDlkbTlwWkNBd0tYUm9jbTkzSUZSNWNHVkZjbkp2Y2lnblEyRnVYRnduZENCallXeHNJRzFsZEdodlpDQnZiaUFnSnl0bEtUdHlaWFIxY200Z1pYMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtEY3pLU3h2UFhJb05UY3BPMlV1Wlhod2IzSjBjejFQWW1wbFkzUXVhMlY1YzN4OFpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHNG9aU3h2S1gxOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RFcE8yVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtDRnVLR1VwZkh4bExsOTBJVDA5ZENsMGFISnZkeUJVZVhCbFJYSnliM0lvSjBsdVkyOXRjR0YwYVdKc1pTQnlaV05sYVhabGNpd2dKeXQwS3ljZ2NtVnhkV2x5WldRaEp5azdjbVYwZFhKdUlHVjlmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3hOeWs3WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDeHlLWHRtYjNJb2RtRnlJRzhnYVc0Z2RDbHVLR1VzYnl4MFcyOWRMSElwTzNKbGRIVnliaUJsZlgwc1puVnVZM1JwYjI0b1pTbDdaUzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VzZEN4eUxHNHBlMmxtS0NFb1pTQnBibk4wWVc1alpXOW1JSFFwZkh4dUlUMDlkbTlwWkNBd0ppWnVJR2x1SUdVcGRHaHliM2NnVkhsd1pVVnljbTl5S0hJckp6b2dhVzVqYjNKeVpXTjBJR2x1ZG05allYUnBiMjRoSnlrN2NtVjBkWEp1SUdWOWZTeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMTdmUzUwYjFOMGNtbHVaenRsTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUhRdVkyRnNiQ2hsS1M1emJHbGpaU2c0TEMweEtYMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtERTRLVHRsTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200Z1pUMXVLR1VwTERBK1pUOXBLR1VyZEN3d0tUcGtLR1VzZENsOWZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lnM0tTNW1MRzg5Y2lneE1Da3NiRDF5S0RRcEtDZDBiMU4wY21sdVoxUmhaeWNwTzJVdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXNjaWw3WlNZbUlXOG9aVDF5UDJVNlpTNXdjbTkwYjNSNWNHVXNiQ2ttSm00b1pTeHNMSHRqYjI1bWFXZDFjbUZpYkdVNklUQXNkbUZzZFdVNmRIMHBmWDBzWm5WdVkzUnBiMjRvWlNsN1pTNWxlSEJ2Y25SelBYdDlmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3hNQ2tzYnoxeUtERXlLU3hzUFhJb05UWXBLQ2RKUlY5UVVrOVVUeWNwTEdFOVQySnFaV04wTG5CeWIzUnZkSGx3WlR0bExtVjRjRzl5ZEhNOVQySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1mSHhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlQxdktHVXBMRzRvWlN4c0tUOWxXMnhkT2lkbWRXNWpkR2x2YmljOVBYUjVjR1Z2WmlCbExtTnZibk4wY25WamRHOXlKaVpsSUdsdWMzUmhibU5sYjJZZ1pTNWpiMjV6ZEhKMVkzUnZjajlsTG1OdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pUcGxJR2x1YzNSaGJtTmxiMllnVDJKcVpXTjBQMkU2Ym5Wc2JIMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtEUXBLQ2QxYm5OamIzQmhZbXhsY3ljcExHODlRWEp5WVhrdWNISnZkRzkwZVhCbE8yOWJibDA5UFhadmFXUWdNQ1ltY2lnNUtTaHZMRzRzZTMwcExHVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR2VzI1ZFcyVmRQU0V3Zlgwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTVNrN1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb0lXNG9aU2twY21WMGRYSnVJR1U3ZG1GeUlISXNienRwWmloMEppWW5ablZ1WTNScGIyNG5QVDEwZVhCbGIyWW9jajFsTG5SdlUzUnlhVzVuS1NZbUlXNG9iejF5TG1OaGJHd29aU2twS1hKbGRIVnliaUJ2TzJsbUtDZG1kVzVqZEdsdmJpYzlQWFI1Y0dWdlppaHlQV1V1ZG1Gc2RXVlBaaWttSmlGdUtHODljaTVqWVd4c0tHVXBLU2x5WlhSMWNtNGdienRwWmlnaGRDWW1KMloxYm1OMGFXOXVKejA5ZEhsd1pXOW1LSEk5WlM1MGIxTjBjbWx1WnlrbUppRnVLRzg5Y2k1allXeHNLR1VwS1NseVpYUjFjbTRnYnp0MGFISnZkeUJVZVhCbFJYSnliM0lvSjBOaGJseGNKM1FnWTI5dWRtVnlkQ0J2WW1wbFkzUWdkRzhnY0hKcGJXbDBhWFpsSUhaaGJIVmxKeWw5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWczTXlrc2J6MXlLRFUzS1M1amIyNWpZWFFvSjJ4bGJtZDBhQ2NzSjNCeWIzUnZkSGx3WlNjcE8zUXVaajFQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjM3g4Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUc0b1pTeHZLWDE5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLRElwTEc4OWNpZ3hNRFFwTEd3OWNpZzFOeWtzWVQxeUtEVTJLU2duU1VWZlVGSlBWRThuS1N4elBXWjFibU4wYVc5dUtDbDdmU3hqUFNkd2NtOTBiM1I1Y0dVbkxIQTlablZ1WTNScGIyNG9LWHQyWVhJZ1pTeDBQWElvTlRJcEtDZHBabkpoYldVbktTeHVQV3d1YkdWdVozUm9MRzg5Snp3bkxHRTlKejRuTzJadmNpaDBMbk4wZVd4bExtUnBjM0JzWVhrOUoyNXZibVVuTEhJb056UXBMbUZ3Y0dWdVpFTm9hV3hrS0hRcExIUXVjM0pqUFNkcVlYWmhjMk55YVhCME9pY3NaVDEwTG1OdmJuUmxiblJYYVc1a2IzY3VaRzlqZFcxbGJuUXNaUzV2Y0dWdUtDa3NaUzUzY21sMFpTaHZLeWR6WTNKcGNIUW5LMkVySjJSdlkzVnRaVzUwTGtZOVQySnFaV04wSnl0dkt5Y3ZjMk55YVhCMEp5dGhLU3hsTG1Oc2IzTmxLQ2tzY0QxbExrWTdiaTB0T3lsa1pXeGxkR1VnY0Z0alhWdHNXMjVkWFR0eVpYUjFjbTRnY0NncGZUdGxMbVY0Y0c5eWRITTlUMkpxWldOMExtTnlaV0YwWlh4OFpuVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2NqdHlaWFIxY200Z2JuVnNiRDA5UFdVL2NqMXdLQ2s2S0hOYlkxMDliaWhsS1N4eVBXNWxkeUJ6TEhOYlkxMDliblZzYkN4eVcyRmRQV1VwTEhadmFXUWdNRDA5UFhRL2NqcHZLSElzZENsOWZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lneE5Da3NiejF5S0RVMEtTeHNQWElvTVRJcExHRTljaWcyS1N4elBYSW9NVEExS1R0bExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2NqMHhQVDFsTEdrOU5EMDlaU3hqUFRZOVBXVXNjRDEwZkh4ek8zSmxkSFZ5YmlCbWRXNWpkR2x2YmloMExITXNaQ2w3Wm05eUtIWmhjaUIxTEdjc2FEMXNLSFFwTEhrOWJ5aG9LU3h0UFc0b2N5eGtMRE1wTEdZOVlTaDVMbXhsYm1kMGFDa3NSVDB3TEhnOWNqOXdLSFFzWmlrNk1qMDlaVDl3S0hRc01DazZkbTlwWkNBd08yWStSVHRGS3lzcGFXWW9LRFU5UFdWOGZHTjhmRVVnYVc0Z2VTa21KaWgxUFhsYlJWMHNaejF0S0hVc1JTeG9LU3hsS1NscFppaHlLWGhiUlYwOVp6dGxiSE5sSUdsbUtHY3BjM2RwZEdOb0tHVXBlMk5oYzJVZ016cHlaWFIxY200aE1EdGpZWE5sSURVNmNtVjBkWEp1SUhVN1kyRnpaU0EyT25KbGRIVnliaUJGTzJOaGMyVWdNanA0TG5CMWMyZ29kU2s3ZldWc2MyVWdhV1lvYVNseVpYUjFjbTRoTVR0eVpYUjFjbTRnWXo4dE1Ub3pQVDFsZkh4cFAyazZlSDE5ZlN4bWRXNWpkR2x2YmlobExIUXBlM1F1WmoxN2ZTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBYSW9NakFwTEc4OWNpZ3pLU3hzUFNkZlgyTnZjbVV0YW5OZmMyaGhjbVZrWDE4bkxHRTliMXRzWFh4OEtHOWJiRjA5ZTMwcE95aGxMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTRnWVZ0bFhYeDhLR0ZiWlYwOWREMDlQWFp2YVdRZ01EOTdmVHAwS1gwcEtDZDJaWEp6YVc5dWN5Y3NXMTBwTG5CMWMyZ29lM1psY25OcGIyNDZiaTUyWlhKemFXOXVMRzF2WkdVNmNpZ3lNeWsvSjNCMWNtVW5PaWRuYkc5aVlXd25MR052Y0hseWFXZG9kRG9uWEZ4NFFUa2dNakF4T1NCRVpXNXBjeUJRZFhOb2EyRnlaWFlnS0hwc2IybHliMk5yTG5KMUtTZDlLWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBYSW9NaWtzYnoxeUtESTBLU3hzUFhJb05Da29KM053WldOcFpYTW5LVHRsTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2l4aFBXNG9aU2t1WTI5dWMzUnlkV04wYjNJN2NtVjBkWEp1SUdFOVBUMTJiMmxrSURCOGZDaHlQVzRvWVNsYmJGMHBQVDEyYjJsa0lEQS9kRHB2S0hJcGZYMHNablZ1WTNScGIyNG9aU3gwTEhJcGV5ZDFjMlVnYzNSeWFXTjBKenQyWVhJZ2JqMXlLRE1wTEc4OWNpZzNLU3hzUFhJb09Da3NZVDF5S0RRcEtDZHpjR1ZqYVdWekp5azdaUzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVzViWlYwN2JDWW1kQ1ltSVhSYllWMG1KbTh1WmloMExHRXNlMk52Ym1acFozVnlZV0pzWlRvaE1DeG5aWFE2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGMzMTlLWDE5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLRE13S1N4dlBYSW9OQ2tvSjNSdlUzUnlhVzVuVkdGbkp5a3NiRDBuUVhKbmRXMWxiblJ6SnowOWJpaG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQmhjbWQxYldWdWRITjlLQ2twTEdFOVpuVnVZM1JwYjI0b1pTeDBLWHQwY25sN2NtVjBkWEp1SUdWYmRGMTlZMkYwWTJnb2RDbDdmWDA3WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwTEhJc2N6dHlaWFIxY200Z1pUMDlQWFp2YVdRZ01EOG5WVzVrWldacGJtVmtKenB1ZFd4c1BUMDlaVDhuVG5Wc2JDYzZKM04wY21sdVp5YzlQWFI1Y0dWdlppaHlQV0VvZEQxUFltcGxZM1FvWlNrc2J5a3BQM0k2YkQ5dUtIUXBPaWRQWW1wbFkzUW5QVDBvY3oxdUtIUXBLU1ltSjJaMWJtTjBhVzl1SnowOWRIbHdaVzltSUhRdVkyRnNiR1ZsUHlkQmNtZDFiV1Z1ZEhNbk9uTjlmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZzBLU2duYVhSbGNtRjBiM0luS1N4dlBTRXhPM1J5ZVh0MllYSWdiRDFiTjExYmJsMG9LVHRzV3lkeVpYUjFjbTRuWFQxbWRXNWpkR2x2YmlncGUyODlJVEI5TEVGeWNtRjVMbVp5YjIwb2JDeG1kVzVqZEdsdmJpZ3BlM1JvY205M0lESjlLWDFqWVhSamFDaDBLWHQ5WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvSVhRbUppRnZLWEpsZEhWeWJpRXhPM1poY2lCeVBTRXhPM1J5ZVh0MllYSWdiRDFiTjEwc1lUMXNXMjVkS0NrN1lTNXVaWGgwUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1ZTJSdmJtVTZjajBoTUgxOUxHeGJibDA5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWVgwc1pTaHNLWDFqWVhSamFDaDBLWHQ5Y21WMGRYSnVJSEo5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd4TkNrc2J6MXlLRGd3S1N4c1BYSW9OVGtwTEdFOWNpZ3lLU3h6UFhJb05pa3NhVDF5S0RZd0tTeGpQWHQ5TEhBOWUzMHNkRDFsTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MExISXNaQ3gxS1h0MllYSWdaeXhvTEhrc2JTeEZQWFUvWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWlgwNmFTaGxLU3g0UFc0b2NpeGtMSFEvTWpveEtTeG1QVEE3YVdZb0oyWjFibU4wYVc5dUp5RTlkSGx3Wlc5bUlFVXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHVXJKeUJwY3lCdWIzUWdhWFJsY21GaWJHVWhKeWs3YVdZb2JDaEZLU2w3Wm05eUtHYzljeWhsTG14bGJtZDBhQ2s3Wno1bU8yWXJLeWxwWmlodFBYUS9lQ2hoS0dnOVpWdG1YU2xiTUYwc2FGc3hYU2s2ZUNobFcyWmRLU3h0UFQwOVkzeDhiVDA5UFhBcGNtVjBkWEp1SUcwN2ZXVnNjMlVnWm05eUtIazlSUzVqWVd4c0tHVXBPeUVvYUQxNUxtNWxlSFFvS1NrdVpHOXVaVHNwYVdZb2JUMXZLSGtzZUN4b0xuWmhiSFZsTEhRcExHMDlQVDFqZkh4dFBUMDljQ2x5WlhSMWNtNGdiWDA3ZEM1Q1VrVkJTejFqTEhRdVVrVlVWVkpPUFhCOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1hzbmRYTmxJSE4wY21samRDYzdkbUZ5SUc0OWNpZ3pLU3h2UFhJb01Da3NiRDF5S0RFM0tTeGhQWElvTWpncExITTljaWd4T1Nrc2FUMXlLRFEyS1N4alBYSW9NamtwTEhBOWNpZ3hLU3hrUFhJb05Ta3NkVDF5S0RRMUtTeG5QWElvTXpJcExHZzljaWd4TVRjcE8yVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFzY2l4NUxHWXNiU2w3ZG1GeUlFVTlibHRsWFN4NFBVVXNYejFtUHlkelpYUW5PaWRoWkdRbkxGTTllQ1ltZUM1d2NtOTBiM1I1Y0dVc1ZEMTdmU3hpUFdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFZOYlpWMDdiQ2hUTEdVc0oyUmxiR1YwWlNjOVBXVS9ablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzBtSmlGd0tHVXBQeUV4T25RdVkyRnNiQ2gwYUdsekxEQTlQVDFsUHpBNlpTbDlPaWRvWVhNblBUMWxQMloxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ0SmlZaGNDaGxLVDhoTVRwMExtTmhiR3dvZEdocGN5d3dQVDA5WlQ4d09tVXBmVG9uWjJWMEp6MDlaVDltZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYlNZbUlYQW9aU2svZG05cFpDQXdPblF1WTJGc2JDaDBhR2x6TERBOVBUMWxQekE2WlNsOU9pZGhaR1FuUFQxbFAyWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQjBMbU5oYkd3b2RHaHBjeXd3UFQwOVpUOHdPbVVwTEhSb2FYTjlPbVoxYm1OMGFXOXVLR1VzY2lsN2NtVjBkWEp1SUhRdVkyRnNiQ2gwYUdsekxEQTlQVDFsUHpBNlpTeHlLU3gwYUdsemZTbDlPMmxtS0NkbWRXNWpkR2x2YmljaFBYUjVjR1Z2WmlCNGZId2hLRzE4ZkZNdVptOXlSV0ZqYUNZbUlXUW9ablZ1WTNScGIyNG9LWHR1WlhjZ2VDZ3BMbVZ1ZEhKcFpYTW9LUzV1WlhoMEtDbDlLU2twZUQxNUxtZGxkRU52Ym5OMGNuVmpkRzl5S0hRc1pTeG1MRjhwTEdFb2VDNXdjbTkwYjNSNWNHVXNjaWtzY3k1T1JVVkVQU0V3TzJWc2MyVjdkbUZ5SUZBOWJtVjNJSGdzVHoxUVcxOWRLRzAvZTMwNkxUQXNNU2toUFZBc2RqMWtLR1oxYm1OMGFXOXVLQ2w3VUM1b1lYTW9NU2w5S1N4SlBYVW9ablZ1WTNScGIyNG9aU2w3Ym1WM0lIZ29aU2w5S1N4QlBTRnRKaVprS0daMWJtTjBhVzl1S0NsN1ptOXlLSFpoY2lCbFBXNWxkeUI0TEhROU5UdDBMUzA3S1dWYlgxMG9kQ3gwS1R0eVpYUjFjbTRoWlM1b1lYTW9MVEFwZlNrN1NYeDhLSGc5ZENobWRXNWpkR2x2YmloMExISXBlMk1vZEN4NExHVXBPM1poY2lCdVBXZ29ibVYzSUVVc2RDeDRLVHR5WlhSMWNtNGdkbTlwWkNBd0lUMXlKaVpwS0hJc1ppeHVXMTlkTEc0cExHNTlLU3g0TG5CeWIzUnZkSGx3WlQxVExGTXVZMjl1YzNSeWRXTjBiM0k5ZUNrc0tIWjhmRUVwSmlZb1lpZ25aR1ZzWlhSbEp5a3NZaWduYUdGekp5a3NaaVltWWlnbloyVjBKeWtwTENoQmZIeFBLU1ltWWloZktTeHRKaVpUTG1Oc1pXRnlKaVprWld4bGRHVWdVeTVqYkdWaGNuMXlaWFIxY200Z1p5aDRMR1VwTEZSYlpWMDllQ3h2S0c4dVJ5dHZMbGNyYnk1R0tpaDRJVDFGS1N4VUtTeHRmSHg1TG5ObGRGTjBjbTl1WnloNExHVXNaaWtzZUgxOUxHWjFibU4wYVc5dUtHVXNkQ2w3ZEM1bVBVOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITjlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtETXBMRzg5Ymk1dVlYWnBaMkYwYjNJN1pTNWxlSEJ2Y25SelBXOG1KbTh1ZFhObGNrRm5aVzUwZkh3bkozMHNablZ1WTNScGIyNG9aU3gwTEhJcGV5ZDFjMlVnYzNSeWFXTjBKenQyWVhJZ2JqMXlLRFEwS1N4dlBWSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVdVpYaGxZenRsTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2oxbExtVjRaV003YVdZb0oyWjFibU4wYVc5dUp6MDlkSGx3Wlc5bUlISXBlM1poY2lCc1BYSXVZMkZzYkNobExIUXBPMmxtS0NkdlltcGxZM1FuSVQxMGVYQmxiMllnYkNsMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZFNaV2RGZUhBZ1pYaGxZeUJ0WlhSb2IyUWdjbVYwZFhKdVpXUWdjMjl0WlhSb2FXNW5JRzkwYUdWeUlIUm9ZVzRnWVc0Z1QySnFaV04wSUc5eUlHNTFiR3duS1R0eVpYUjFjbTRnYkgxcFppZ25VbVZuUlhod0p5RTlQVzRvWlNrcGRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25VbVZuUlhod0kyVjRaV01nWTJGc2JHVmtJRzl1SUdsdVkyOXRjR0YwYVdKc1pTQnlaV05sYVhabGNpY3BPM0psZEhWeWJpQnZMbU5oYkd3b1pTeDBLWDE5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHNuZFhObElITjBjbWxqZENjN2NpZ3hOalFwTzNaaGNpQnVQWElvTVRjcExHODljaWc1S1N4c1BYSW9OU2tzWVQxeUtESTFLU3h6UFhJb05Da3NhVDF5S0RZMktTeGpQWE1vSjNOd1pXTnBaWE1uS1N4d1BTRnNLR1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlMeTR2TzNKbGRIVnliaUJsTG1WNFpXTTlablZ1WTNScGIyNG9LWHQyWVhJZ1pUMWJYVHR5WlhSMWNtNGdaUzVuY205MWNITTllMkU2SnpjbmZTeGxmU3duTnljaFBUMG5KeTV5WlhCc1lXTmxLR1VzSnlROFlUNG5LWDBwTEdROVpuVnVZM1JwYjI0b0tYdDJZWElnWlQwdktEODZLUzhzZEQxbExtVjRaV003WlM1bGVHVmpQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFF1WVhCd2JIa29kR2hwY3l4aGNtZDFiV1Z1ZEhNcGZUdDJZWElnY2owbllXSW5Mbk53YkdsMEtHVXBPM0psZEhWeWJpQXlQVDA5Y2k1c1pXNW5kR2dtSmlkaEp6MDlQWEpiTUYwbUppZGlKejA5UFhKYk1WMTlLQ2s3WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2RUMXpLR1VwTEdjOUlXd29ablZ1WTNScGIyNG9LWHQyWVhJZ2REMTdmVHR5WlhSMWNtNGdkRnQxWFQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlBM2ZTdzNJVDBuSjF0bFhTaDBLWDBwTEdnOVp6OGhiQ2htZFc1amRHbHZiaWdwZTNaaGNpQjBQU0V4TEhJOUwyRXZPM0psZEhWeWJpQnlMbVY0WldNOVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2REMGhNQ3h1ZFd4c2ZTd25jM0JzYVhRblBUMDlaU1ltS0hJdVkyOXVjM1J5ZFdOMGIzSTllMzBzY2k1amIyNXpkSEoxWTNSdmNsdGpYVDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJ5ZlNrc2NsdDFYU2duSnlrc0lYUjlLVHAyYjJsa0lEQTdhV1lvSVdkOGZDRm9mSHduY21Wd2JHRmpaU2M5UFQxbEppWWhjSHg4SjNOd2JHbDBKejA5UFdVbUppRmtLWHQyWVhJZ2VUMHZMaTliZFYwc1pqMXlLR0VzZFN3bkoxdGxYU3htZFc1amRHbHZiaWhsTEhRc2NpeHVMRzhwZTNKbGRIVnliaUIwTG1WNFpXTTlQVDFwUDJjbUppRnZQM3RrYjI1bE9pRXdMSFpoYkhWbE9ua3VZMkZzYkNoMExISXNiaWw5T250a2IyNWxPaUV3TEhaaGJIVmxPbVV1WTJGc2JDaHlMSFFzYmlsOU9udGtiMjVsT2lFeGZYMHBMRzA5Wmxzd1hTeEZQV1piTVYwN2JpaFRkSEpwYm1jdWNISnZkRzkwZVhCbExHVXNiU2tzYnloU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTEhVc01qMDlkRDltZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCRkxtTmhiR3dvWlN4MGFHbHpMSFFwZlRwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1JTNWpZV3hzS0dVc2RHaHBjeWw5S1gxOWZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lneEtTeHZQWElvTXlrdVpHOWpkVzFsYm5Rc2JEMXVLRzhwSmladUtHOHVZM0psWVhSbFJXeGxiV1Z1ZENrN1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnNQMjh1WTNKbFlYUmxSV3hsYldWdWRDaGxLVHA3ZlgxOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0bWIzSW9kbUZ5SUc0c2J6MXlLRE1wTEd3OWNpZzVLU3hoUFhJb01qSXBMSE05WVNnbmRIbHdaV1JmWVhKeVlYa25LU3hqUFdFb0ozWnBaWGNuS1N4d1BTRWhLRzh1UVhKeVlYbENkV1ptWlhJbUptOHVSR0YwWVZacFpYY3BMR1E5Y0N4MVBUQXNhVDFiSjBsdWREaEJjbkpoZVNjc0oxVnBiblE0UVhKeVlYa25MQ2RWYVc1ME9FTnNZVzF3WldSQmNuSmhlU2NzSjBsdWRERTJRWEp5WVhrbkxDZFZhVzUwTVRaQmNuSmhlU2NzSjBsdWRETXlRWEp5WVhrbkxDZFZhVzUwTXpKQmNuSmhlU2NzSjBac2IyRjBNekpCY25KaGVTY3NKMFpzYjJGME5qUkJjbkpoZVNkZE8zVThPVHNwS0c0OWIxdHBXM1VySzExZEtUOG9iQ2h1TG5CeWIzUnZkSGx3WlN4ekxDRXdLU3hzS0c0dWNISnZkRzkwZVhCbExHTXNJVEFwS1Rwa1BTRXhPMlV1Wlhod2IzSjBjejE3UVVKV09uQXNRMDlPVTFSU09tUXNWRmxRUlVRNmN5eFdTVVZYT21OOWZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lnek1DazdaUzVsZUhCdmNuUnpQVTlpYW1WamRDZ25laWNwTG5CeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bEtEQXBQMDlpYW1WamREcG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNG5VM1J5YVc1bkp6MDliaWhsS1Q5bExuTndiR2wwS0NjbktUcFBZbXBsWTNRb1pTbDlmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3hNU2tzYnoxeUtEWXBMR3c5Y2lnek1TazdaUzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWgwTEhJc1lTbDdkbUZ5SUhNc2FUMXVLSFFwTEdNOWJ5aHBMbXhsYm1kMGFDa3NjRDFzS0dFc1l5azdhV1lvWlNZbWNpRTljaWw3Wm05eUtEdGpQbkE3S1dsbUtITTlhVnR3S3l0ZExITWhQWE1wY21WMGRYSnVJVEE3ZldWc2MyVWdabTl5S0R0alBuQTdjQ3NyS1dsbUtDaGxmSHh3SUdsdUlHa3BKaVpwVzNCZFBUMDljaWx5WlhSMWNtNGdaWHg4Y0h4OE1EdHlaWFIxY200aFpTWW1MVEY5Zlgwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTkRFcEtDZHJaWGx6Snlrc2J6MXlLREl5S1R0bExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHNWJaVjE4ZkNodVcyVmRQVzhvWlNrcGZYMHNablZ1WTNScGIyNG9aU2w3WlM1bGVIQnZjblJ6UFZzblkyOXVjM1J5ZFdOMGIzSW5MQ2RvWVhOUGQyNVFjbTl3WlhKMGVTY3NKMmx6VUhKdmRHOTBlWEJsVDJZbkxDZHdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2NzSjNSdlRHOWpZV3hsVTNSeWFXNW5KeXduZEc5VGRISnBibWNuTENkMllXeDFaVTltSjExOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1hzbmRYTmxJSE4wY21samRDYzdkbUZ5SUc0OWNpZ3hNaWtzYnoxeUtETXhLU3hzUFhJb05pazdaUzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTJadmNpaDJZWElnZEQxdUtIUm9hWE1wTEhJOWJDaDBMbXhsYm1kMGFDa3NZVDFoY21kMWJXVnVkSE11YkdWdVozUm9MSE05YnlneFBHRS9ZWEpuZFcxbGJuUnpXekZkT25admFXUWdNQ3h5S1N4cFBUSThZVDloY21kMWJXVnVkSE5iTWwwNmRtOXBaQ0F3TEdNOWRtOXBaQ0F3UFQwOWFUOXlPbThvYVN4eUtUdGpQbk03S1hSYmN5c3JYVDFsTzNKbGRIVnliaUIwZlgwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTXpNcExHODljaWcwS1NnbmFYUmxjbUYwYjNJbktTeHNQVUZ5Y21GNUxuQnliM1J2ZEhsd1pUdGxMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1VoUFQxMmIybGtJREFtSmlodUxrRnljbUY1UFQwOVpYeDhiRnR2WFQwOVBXVXBmWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBYSW9ORFFwTEc4OWNpZzBLU2duYVhSbGNtRjBiM0luS1N4c1BYSW9Nek1wTzJVdVpYaHdiM0owY3oxeUtESXdLUzVuWlhSSmRHVnlZWFJ2Y2sxbGRHaHZaRDFtZFc1amRHbHZiaWhsS1h0cFppaGxJVDEyYjJsa0lEQXBjbVYwZFhKdUlHVmJiMTE4ZkdWYkowQkFhWFJsY21GMGIzSW5YWHg4YkZ0dUtHVXBYWDE5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHNuZFhObElITjBjbWxqZENjN2RtRnlJRzQ5Y2lnek5Ta3NiejF5S0RjMktTeHNQWElvTXpNcExHRTljaWd4TVNrN1pTNWxlSEJ2Y25SelBYSW9OemNwS0VGeWNtRjVMQ2RCY25KaGVTY3NablZ1WTNScGIyNG9aU3gwS1h0MGFHbHpMbDkwUFdFb1pTa3NkR2hwY3k1ZmFUMHdMSFJvYVhNdVgyczlkSDBzWm5WdVkzUnBiMjRvS1h0MllYSWdaVDEwYUdsekxsOTBMSFE5ZEdocGN5NWZheXh5UFhSb2FYTXVYMmtyS3p0eVpYUjFjbTRoWlh4OGNqNDlaUzVzWlc1bmRHZy9LSFJvYVhNdVgzUTlkbTlwWkNBd0xHOG9NU2twT2lkclpYbHpKejA5ZEQ5dktEQXNjaWs2SjNaaGJIVmxjeWM5UFhRL2J5Z3dMR1ZiY2wwcE9tOG9NQ3hiY2l4bFczSmRYU2w5TENkMllXeDFaWE1uS1N4c0xrRnlaM1Z0Wlc1MGN6MXNMa0Z5Y21GNUxHNG9KMnRsZVhNbktTeHVLQ2QyWVd4MVpYTW5LU3h1S0NkbGJuUnlhV1Z6SnlsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiaXh2TEd3c1lUMXlLREUwS1N4elBYSW9PRFFwTEdrOWNpZzNOQ2tzWXoxeUtEVXlLU3h3UFhJb015a3NaRDF3TG5CeWIyTmxjM01zZFQxd0xuTmxkRWx0YldWa2FXRjBaU3huUFhBdVkyeGxZWEpKYlcxbFpHbGhkR1VzYUQxd0xrMWxjM05oWjJWRGFHRnVibVZzTEhrOWNDNUVhWE53WVhSamFDeG1QVEFzYlQxN2ZTeEZQU2R2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlVuTEhnOVpuVnVZM1JwYjI0b0tYdDJZWElnWlQwcmRHaHBjenRwWmlodExtaGhjMDkzYmxCeWIzQmxjblI1S0dVcEtYdDJZWElnZEQxdFcyVmRPMlJsYkdWMFpTQnRXMlZkTEhRb0tYMTlMRjg5Wm5WdVkzUnBiMjRvWlNsN2VDNWpZV3hzS0dVdVpHRjBZU2w5TzNVbUptZDhmQ2gxUFdaMWJtTjBhVzl1S0dVcGUyWnZjaWgyWVhJZ2REMWJYU3h5UFRFN1lYSm5kVzFsYm5SekxteGxibWQwYUQ1eU95bDBMbkIxYzJnb1lYSm5kVzFsYm5SelczSXJLMTBwTzNKbGRIVnliaUJ0V3lzclpsMDlablZ1WTNScGIyNG9LWHR6S0NkbWRXNWpkR2x2YmljOVBYUjVjR1Z2WmlCbFAyVTZSblZ1WTNScGIyNG9aU2tzZENsOUxHNG9aaWtzWm4wc1p6MW1kVzVqZEdsdmJpaGxLWHRrWld4bGRHVWdiVnRsWFgwc0ozQnliMk5sYzNNblBUMXlLRE13S1Noa0tUOXVQV1oxYm1OMGFXOXVLR1VwZTJRdWJtVjRkRlJwWTJzb1lTaDRMR1VzTVNrcGZUcDVKaVo1TG01dmR6OXVQV1oxYm1OMGFXOXVLR1VwZTNrdWJtOTNLR0VvZUN4bExERXBLWDA2YUQ4b2J6MXVaWGNnYUN4c1BXOHVjRzl5ZERJc2J5NXdiM0owTVM1dmJtMWxjM05oWjJVOVh5eHVQV0VvYkM1d2IzTjBUV1Z6YzJGblpTeHNMREVwS1Rwd0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJbUppZG1kVzVqZEdsdmJpYzlQWFI1Y0dWdlppQndiM04wVFdWemMyRm5aU1ltSVhBdWFXMXdiM0owVTJOeWFYQjBjejhvYmoxbWRXNWpkR2x2YmlobEtYdHdMbkJ2YzNSTlpYTnpZV2RsS0dVckp5Y3NKeW9uS1gwc2NDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRaWE56WVdkbEp5eGZMQ0V4S1NrNlJTQnBiaUJqS0NkelkzSnBjSFFuS1Q5dVBXWjFibU4wYVc5dUtHVXBlMmt1WVhCd1pXNWtRMmhwYkdRb1l5Z25jMk55YVhCMEp5a3BXMFZkUFdaMWJtTjBhVzl1S0NsN2FTNXlaVzF2ZG1WRGFHbHNaQ2gwYUdsektTeDRMbU5oYkd3b1pTbDlmVHB1UFdaMWJtTjBhVzl1S0dVcGUzTmxkRlJwYldWdmRYUW9ZU2g0TEdVc01Ta3NNQ2w5S1N4bExtVjRjRzl5ZEhNOWUzTmxkRHAxTEdOc1pXRnlPbWQ5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWc1TWlrc2J6MXlLREkxS1R0bExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTJsbUtHNG9kQ2twZEdoeWIzY2dWSGx3WlVWeWNtOXlLQ2RUZEhKcGJtY2pKeXR5S3ljZ1pHOWxjMjVjWENkMElHRmpZMlZ3ZENCeVpXZGxlQ0VuS1R0eVpYUjFjbTRnYnlobEtTc25KMzE5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLRFFwS0NkdFlYUmphQ2NwTzJVdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdDJZWElnZEQwdkxpODdkSEo1ZXljdkxpOG5XMlZkS0hRcGZXTmhkR05vS0hJcGUzUnllWHR5WlhSMWNtNGdkRnR1WFQwaE1Td2hKeTh1THlkYlpWMG9kQ2w5WTJGMFkyZ29aU2w3ZlgxeVpYUjFjbTRoTUgxOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1hzbmRYTmxJSE4wY21samRDYzdkbUZ5SUc0OWNpZzVNQ2tvSVRBcE8yVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN2NtVjBkWEp1SUhRcktISS9iaWhsTEhRcExteGxibWQwYURveEtYMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYc25kWE5sSUhOMGNtbGpkQ2M3ZG1GeUlHNDljaWc1TXlrc2J6MVNaV2RGZUhBdWNISnZkRzkwZVhCbExtVjRaV01zYkQxVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5KbGNHeGhZMlVzWVQxdkxITTlKMnhoYzNSSmJtUmxlQ2NzWXoxbWRXNWpkR2x2YmlncGUzWmhjaUJsUFM5aEx5eDBQUzlpS2k5bk8zSmxkSFZ5YmlCdkxtTmhiR3dvWlN3bllTY3BMRzh1WTJGc2JDaDBMQ2RoSnlrc01DRTlQV1ZiYzExOGZEQWhQVDEwVzNOZGZTZ3BMSEE5THlncFB6OHZMbVY0WldNb0p5Y3BXekZkSVQwOWRtOXBaQ0F3T3loamZIeHdLU1ltS0dFOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhRc2NpeGhMR1FzYVQxMGFHbHpPM0psZEhWeWJpQndKaVlvY2oxdVpYY2dVbVZuUlhod0tDZGVKeXRwTG5OdmRYSmpaU3NuSkNnL0lWeGNYRnh6S1Njc2JpNWpZV3hzS0drcEtTa3NZeVltS0hROWFWdHpYU2tzWVQxdkxtTmhiR3dvYVN4bEtTeGpKaVpoSmlZb2FWdHpYVDFwTG1kc2IySmhiRDloTG1sdVpHVjRLMkZiTUYwdWJHVnVaM1JvT25RcExIQW1KbUVtSmpFOFlTNXNaVzVuZEdnbUptd3VZMkZzYkNoaFd6QmRMSElzWm5WdVkzUnBiMjRvS1h0bWIzSW9aRDB4TzJROFlYSm5kVzFsYm5SekxteGxibWQwYUMweU8yUXJLeWwyYjJsa0lEQTlQVDFoY21kMWJXVnVkSE5iWkYwbUppaGhXMlJkUFhadmFXUWdNQ2w5S1N4aGZTa3NaUzVsZUhCdmNuUnpQV0Y5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHNuZFhObElITjBjbWxqZENjN2RtRnlJRzQ5Y2lnM0tTeHZQWElvTWpFcE8yVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDQnBiaUJsUDI0dVppaGxMSFFzYnlnd0xISXBLVHBsVzNSZFBYSjlmU3htZFc1amRHbHZiaWhsS1h0bExtVjRjRzl5ZEhNOVRXRjBhQzV6YVdkdWZIeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdNRDA5S0dVOUsyVXBmSHhsSVQxbFAyVTZNRDVsUHkweE9qRjlmU3htZFc1amRHbHZiaWhsS1h0MllYSWdkRDF6TzJVdVpYaHdiM0owY3owaGRIeDhNakl3TWpVdU5EWTFOemswT0RBMk56RTRQSFFvTVRBcGZId3lNakF5TlM0ME5qVTNPVFE0TURZM01UZytkQ2d4TUNsOGZDMHlaUzB4TnlFOWRDZ3RNbVV0TVRjcFAyWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQXdQVDBvWlQwclpTay9aVG90TVdVdE5qeGxKaVl4WlMwMlBtVS9aU3RsS21Vdk1qcGhLR1VwTFRGOU9uUjlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdGxMbVY0Y0c5eWRITTlJWElvT0NrbUppRnlLRFVwS0daMWJtTjBhVzl1S0NsN2NtVjBkWEp1SURjaFBVOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h5S0RVeUtTZ25aR2wySnlrc0oyRW5MSHRuWlhRNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z04zMTlLUzVoZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3hoS1hzbmRYTmxJSE4wY21samRDYzdablZ1WTNScGIyNGdjeWgwTEhJc2JpbDdkbUZ5SUc4c2JDeGhMR005UVhKeVlYa29iaWtzY0QwNEttNHRjaTB4TEdROUtERThQSEFwTFRFc2RUMWtQajR4TEdjOU1qTTlQVDF5UDNvb01pd3RNalFwTFhvb01pd3ROemNwT2pBc2FEMHdMR2s5TUQ1MGZId3dQVDA5ZENZbU1ENHhMM1EvTVRvd08yWnZjaWgwUFZZb2RDa3NkQ0U5ZEh4OGREMDlQVWcvS0d3OWREMDlkRDh3T2pFc2J6MWtLVG9vYnowa0tFc29kQ2t2Y1Nrc01UNTBLaWhoUFhvb01pd3RieWtwSmlZb2J5MHRMR0VxUFRJcExIUXJQVEU4UFc4cmRUOW5MMkU2WnlwNktESXNNUzExS1N3eVBEMTBLbUVtSmlodkt5c3NZUzg5TWlrc2J5dDFQajFrUHloc1BUQXNiejFrS1RveFBEMXZLM1UvS0d3OUtIUXFZUzB4S1NwNktESXNjaWtzYnlzOWRTazZLR3c5ZENwNktESXNkUzB4S1NwNktESXNjaWtzYnowd0tTazdPRHc5Y2p0alcyZ3JLMTA5TWpVMUptd3NiQzg5TWpVMkxISXRQVGdwTzJadmNpaHZQVzg4UEhKOGJDeHdLejF5T3pBOGNEdGpXMmdySzEwOU1qVTFKbThzYnk4OU1qVTJMSEF0UFRncE8zSmxkSFZ5YmlCald5MHRhRjE4UFRFeU9DcHBMR045Wm5WdVkzUnBiMjRnYVNoMExISXNiaWw3ZG1GeUlHOHNiRDA0S200dGNpMHhMR0U5S0RFOFBHd3BMVEVzWXoxaFBqNHhMSEE5YkMwM0xHUTliaTB4TEdrOWRGdGtMUzFkTEhNOU1USTNKbWs3Wm05eUtHaytQajAzT3pBOGNEdHpQVEkxTmlwekszUmJaRjBzWkMwdExIQXRQVGdwTzJadmNpaHZQWE1tS0RFOFBDMXdLUzB4TEhNK1BqMHRjQ3h3S3oxeU96QThjRHR2UFRJMU5pcHZLM1JiWkYwc1pDMHRMSEF0UFRncE8ybG1LREE5UFQxektYTTlNUzFqTzJWc2MyVjdhV1lvY3owOVBXRXBjbVYwZFhKdUlHOC9UbUZPT21rL0xVZzZTRHR2S3oxNktESXNjaWtzY3kwOVkzMXlaWFIxY200b2FUOHRNVG94S1Nwdktub29NaXh6TFhJcGZXWjFibU4wYVc5dUlHTW9aU2w3Y21WMGRYSnVJR1ZiTTEwOFBESTBmR1ZiTWwwOFBERTJmR1ZiTVYwOFBEaDhaVnN3WFgxbWRXNWpkR2x2YmlCa0tHVXBlM0psZEhWeWJsc3lOVFVtWlYxOVpuVnVZM1JwYjI0Z2RTaGxLWHR5WlhSMWNtNWJNalUxSm1Vc01qVTFKbVUrUGpoZGZXWjFibU4wYVc5dUlHY29aU2w3Y21WMGRYSnVXekkxTlNabExESTFOU1psUGo0NExESTFOU1psUGo0eE5pd3lOVFVtWlQ0K01qUmRmV1oxYm1OMGFXOXVJR2dvWlNsN2NtVjBkWEp1SUhNb1pTdzFNaXc0S1gxbWRXNWpkR2x2YmlCNUtHVXBlM0psZEhWeWJpQnpLR1VzTWpNc05DbDlablZ1WTNScGIyNGdaaWhsTEhRc2NpbDdUQ2hsVzBSZExIUXNlMmRsZERwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCMGFHbHpXM0pkZlgwcGZXWjFibU4wYVc5dUlHMG9aU3gwTEhJc2JpbDdkbUZ5SUc4OVVpZ3JjaWs3YVdZb2J5dDBQbVZiWldWZEtYUm9jbTkzSUZVb1F5azdkbUZ5SUd3OVpWdFJYUzVmWWl4aFBXOHJaVnQwWlYwc2N6MXNMbk5zYVdObEtHRXNZU3QwS1R0eVpYUjFjbTRnYmo5ek9uTXVjbVYyWlhKelpTZ3BmV1oxYm1OMGFXOXVJRVVvWlN4MExISXNiaXh2TEd3cGUzWmhjaUJoUFZJb0szSXBPMmxtS0dFcmRENWxXMlZsWFNsMGFISnZkeUJWS0VNcE8yWnZjaWgyWVhJZ2N6MWxXMUZkTGw5aUxHTTlZU3RsVzNSbFhTeHdQVzRvSzI4cExHUTlNRHRrUEhRN1pDc3JLWE5iWXl0a1hUMXdXMncvWkRwMExXUXRNVjE5ZG1GeUlIZzlZU2d6S1N4ZlBXRW9PQ2tzVXoxaEtESXpLU3hVUFdFb05UTXBMR0k5WVNnNUtTeFFQV0VvTWpncExFODlZU2cxS1N4MlBXRW9NamtwTEVrOVlTZ3hPQ2tzUVQxaEtEWXBMRkk5WVNnM01pa3NhejFoS0RNM0tTNW1MRXc5WVNnM0tTNW1MRVk5WVNnMU9Da3NUajFoS0RNeUtTeE5QU2RCY25KaGVVSjFabVpsY2ljc2R6MG5SR0YwWVZacFpYY25MRVE5SjNCeWIzUnZkSGx3WlNjc1F6MG5WM0p2Ym1jZ2FXNWtaWGdoSnl4WlBYaGJUVjBzUWoxNFczZGRMRWM5ZUM1TllYUm9MRlU5ZUM1U1lXNW5aVVZ5Y205eUxFZzllQzVKYm1acGJtbDBlU3hYUFZrc1ZqMXNMSG85Ynl3a1BYQXNTejF1TEhFOWNpeFlQU2RpZFdabVpYSW5MRm85SjJKNWRHVk1aVzVuZEdnbkxFbzlKMko1ZEdWUFptWnpaWFFuTEZFOVh6OG5YMkluT2xnc1pXVTlYejhuWDJ3bk9sb3NkR1U5WHo4blgyOG5Pa283YVdZb0lWUXVRVUpXS1ZrOVpuVnVZM1JwYjI0b1pTbDdkaWgwYUdsekxGa3NUU2s3ZG1GeUlIUTlVaWhsS1R0MGFHbHpMbDlpUFVZdVkyRnNiQ2hCY25KaGVTaDBLU3d3S1N4MGFHbHpXMlZsWFQxMGZTeENQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJLSFJvYVhNc1FpeDNLU3gyS0dVc1dTeDNLVHQyWVhJZ2JqMWxXMlZsWFN4dlBVa29kQ2s3YVdZb01ENXZmSHh2UG00cGRHaHliM2NnVlNnblYzSnZibWNnYjJabWMyVjBJU2NwTzJsbUtISTlkbTlwWkNBd1BUMDljajl1TFc4NlFTaHlLU3h2SzNJK2JpbDBhSEp2ZHlCVktDZFhjbTl1WnlCc1pXNW5kR2doSnlrN2RHaHBjMXRSWFQxbExIUm9hWE5iZEdWZFBXOHNkR2hwYzF0bFpWMDljbjBzWHlZbUtHWW9XU3hhTENkZmJDY3BMR1lvUWl4WUxDZGZZaWNwTEdZb1FpeGFMQ2RmYkNjcExHWW9RaXhLTENkZmJ5Y3BLU3hRS0VKYlJGMHNlMmRsZEVsdWREZzZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzBvZEdocGN5d3hMR1VwV3pCZFBEd3lORDQrTWpSOUxHZGxkRlZwYm5RNE9tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnRLSFJvYVhNc01TeGxLVnN3WFgwc1oyVjBTVzUwTVRZNlpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROWJTaDBhR2x6TERJc1pTeGhjbWQxYldWdWRITmJNVjBwTzNKbGRIVnliaWgwV3pGZFBEdzRmSFJiTUYwcFBEd3hOajQrTVRaOUxHZGxkRlZwYm5ReE5qcG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMXRLSFJvYVhNc01peGxMR0Z5WjNWdFpXNTBjMXN4WFNrN2NtVjBkWEp1SUhSYk1WMDhQRGg4ZEZzd1hYMHNaMlYwU1c1ME16STZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR01vYlNoMGFHbHpMRFFzWlN4aGNtZDFiV1Z1ZEhOYk1WMHBLWDBzWjJWMFZXbHVkRE15T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCaktHMG9kR2hwY3l3MExHVXNZWEpuZFcxbGJuUnpXekZkS1NrK1BqNHdmU3huWlhSR2JHOWhkRE15T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCcEtHMG9kR2hwY3l3MExHVXNZWEpuZFcxbGJuUnpXekZkS1N3eU15dzBLWDBzWjJWMFJteHZZWFEyTkRwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2FTaHRLSFJvYVhNc09DeGxMR0Z5WjNWdFpXNTBjMXN4WFNrc05USXNPQ2w5TEhObGRFbHVkRGc2Wm5WdVkzUnBiMjRvWlN4MEtYdEZLSFJvYVhNc01TeGxMR1FzZENsOUxITmxkRlZwYm5RNE9tWjFibU4wYVc5dUtHVXNkQ2w3UlNoMGFHbHpMREVzWlN4a0xIUXBmU3h6WlhSSmJuUXhOanBtZFc1amRHbHZiaWhsTEhRcGUwVW9kR2hwY3l3eUxHVXNkU3gwTEdGeVozVnRaVzUwYzFzeVhTbDlMSE5sZEZWcGJuUXhOanBtZFc1amRHbHZiaWhsTEhRcGUwVW9kR2hwY3l3eUxHVXNkU3gwTEdGeVozVnRaVzUwYzFzeVhTbDlMSE5sZEVsdWRETXlPbVoxYm1OMGFXOXVLR1VzZENsN1JTaDBhR2x6TERRc1pTeG5MSFFzWVhKbmRXMWxiblJ6V3pKZEtYMHNjMlYwVldsdWRETXlPbVoxYm1OMGFXOXVLR1VzZENsN1JTaDBhR2x6TERRc1pTeG5MSFFzWVhKbmRXMWxiblJ6V3pKZEtYMHNjMlYwUm14dllYUXpNanBtZFc1amRHbHZiaWhsTEhRcGUwVW9kR2hwY3l3MExHVXNlU3gwTEdGeVozVnRaVzUwYzFzeVhTbDlMSE5sZEVac2IyRjBOalE2Wm5WdVkzUnBiMjRvWlN4MEtYdEZLSFJvYVhNc09DeGxMR2dzZEN4aGNtZDFiV1Z1ZEhOYk1sMHBmWDBwTzJWc2MyVjdhV1lvSVU4b1puVnVZM1JwYjI0b0tYdFpLREVwZlNsOGZDRlBLR1oxYm1OMGFXOXVLQ2w3Ym1WM0lGa29MVEVwZlNsOGZFOG9ablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdibVYzSUZrc2JtVjNJRmtvTVM0MUtTeHVaWGNnV1NoT1lVNHBMRmt1Ym1GdFpTRTlUWDBwS1h0WlBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQjJLSFJvYVhNc1dTa3NibVYzSUZjb1VpaGxLU2w5TzJadmNpaDJZWElnY21Vc2JtVTlXVnRFWFQxWFcwUmRMRzlsUFdzb1Z5a3NiR1U5TUR0dlpTNXNaVzVuZEdnK2JHVTdLU2h5WlQxdlpWdHNaU3NyWFNscGJpQlpmSHhpS0Zrc2NtVXNWMXR5WlYwcE8xTjhmQ2h1WlM1amIyNXpkSEoxWTNSdmNqMVpLWDEyWVhJZ2FqMXVaWGNnUWlodVpYY2dXU2d5S1Nrc1lXVTlRbHRFWFM1elpYUkpiblE0TzJvdWMyVjBTVzUwT0Nnd0xESXhORGMwT0RNMk5EZ3BMR291YzJWMFNXNTBPQ2d4TERJeE5EYzBPRE0yTkRrcExDaHFMbWRsZEVsdWREZ29NQ2w4ZkNGcUxtZGxkRWx1ZERnb01Ta3BKaVpRS0VKYlJGMHNlM05sZEVsdWREZzZablZ1WTNScGIyNG9aU3gwS1h0aFpTNWpZV3hzS0hSb2FYTXNaU3gwUER3eU5ENCtNalFwZlN4elpYUlZhVzUwT0RwbWRXNWpkR2x2YmlobExIUXBlMkZsTG1OaGJHd29kR2hwY3l4bExIUThQREkwUGo0eU5DbDlmU3doTUNsOVRpaFpMRTBwTEU0b1FpeDNLU3hpS0VKYlJGMHNWQzVXU1VWWExDRXdLU3gwVzAxZFBWa3NkRnQzWFQxQ2ZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lneE9Da3NiejF5S0RZcE8yVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHRwWmlobFBUMDlkbTlwWkNBd0tYSmxkSFZ5YmlBd08zWmhjaUIwUFc0b1pTa3NjajF2S0hRcE8ybG1LSFFoUFQxeUtYUm9jbTkzSUZKaGJtZGxSWEp5YjNJb0oxZHliMjVuSUd4bGJtZDBhQ0VuS1R0eVpYUjFjbTRnY24xOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RFd0tTeHZQWElvTVRFcExHdzljaWcxTlNrb0lURXBMR0U5Y2lnMU5pa29KMGxGWDFCU1QxUlBKeWs3WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUhJc2N6MXZLR1VwTEdNOU1DeHBQVnRkTzJadmNpaHlJR2x1SUhNcGNpRTlZU1ltYmloekxISXBKaVpwTG5CMWMyZ29jaWs3Wm05eUtEdDBMbXhsYm1kMGFENWpPeWx1S0hNc2NqMTBXMk1ySzEwcEppWW9mbXdvYVN4eUtYeDhhUzV3ZFhOb0tISXBLVHR5WlhSMWNtNGdhWDE5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLRE1wTG1SdlkzVnRaVzUwTzJVdVpYaHdiM0owY3oxdUppWnVMbVJ2WTNWdFpXNTBSV3hsYldWdWRIMHNablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhJb016QXBPMlV1Wlhod2IzSjBjejFCY25KaGVTNXBjMEZ5Y21GNWZIeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNG5RWEp5WVhrblBUMXVLR1VwZlgwc1puVnVZM1JwYjI0b1pTbDdaUzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1ZTNaaGJIVmxPblFzWkc5dVpUb2hJV1Y5Zlgwc1puVnVZM1JwYjI0b1pTeDBMSElwZXlkMWMyVWdjM1J5YVdOMEp6dDJZWElnYmoxeUtESXpLU3h2UFhJb01Da3NiRDF5S0RFM0tTeGhQWElvT1Nrc2N6MXlLRE16S1N4cFBYSW9NVEEzS1N4alBYSW9NeklwTEhBOWNpZ3pOQ2tzWkQxeUtEUXBLQ2RwZEdWeVlYUnZjaWNwTEhVOUlTaGJYUzVyWlhsekppWW5ibVY0ZENkcGJsdGRMbXRsZVhNb0tTa3NaejBuYTJWNWN5Y3NhRDBuZG1Gc2RXVnpKeXg1UFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTjlPMlV1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRc2NpeG1MRzBzUlN4NEtYdHBLSElzZEN4bUtUdDJZWElnWHl4VExGUXNZajFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRoZFNZbVpTQnBiaUJKUDBsYlpWMDZaVDA5UFdjL1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z2JtVjNJSElvZEdocGN5eGxLWDA2WlQwOVBXZy9ablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdibVYzSUhJb2RHaHBjeXhsS1gwNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2JtVjNJSElvZEdocGN5eGxLWDE5TEZBOWRDc25JRWwwWlhKaGRHOXlKeXhQUFcwOVBXZ3NkajBoTVN4SlBXVXVjSEp2ZEc5MGVYQmxMRUU5U1Z0a1hYeDhTVnNuUUVCcGRHVnlZWFJ2Y2lkZGZIeHRKaVpKVzIxZExGSTlRWHg4WWlodEtTeHJQVzAvVHo5aUtDZGxiblJ5YVdWekp5azZVanAyYjJsa0lEQXNURDBuUVhKeVlYa25QVDEwUDBrdVpXNTBjbWxsYzN4OFFUcEJPMmxtS0V3bUppaFVQWEFvVEM1allXeHNLRzVsZHlCbEtTa3NWQ0U5UFU5aWFtVmpkQzV3Y205MGIzUjVjR1VtSmxRdWJtVjRkQ1ltS0dNb1ZDeFFMQ0V3S1N3aGJpWW1KMloxYm1OMGFXOXVKeUU5ZEhsd1pXOW1JRlJiWkYwbUptRW9WQ3hrTEhrcEtTa3NUeVltUVNZbVFTNXVZVzFsSVQwOWFDWW1LSFk5SVRBc1VqMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQkJMbU5oYkd3b2RHaHBjeWw5S1N3b0lXNThmSGdwSmlZb2RYeDhkbng4SVVsYlpGMHBKaVpoS0Vrc1pDeFNLU3h6VzNSZFBWSXNjMXRRWFQxNUxHMHBhV1lvWHoxN2RtRnNkV1Z6T2s4L1VqcGlLR2dwTEd0bGVYTTZSVDlTT21Jb1p5a3NaVzUwY21sbGN6cHJmU3g0S1dadmNpaFRJR2x1SUY4cFV5QnBiaUJKZkh4c0tFa3NVeXhmVzFOZEtUdGxiSE5sSUc4b2J5NVFLMjh1Umlvb2RYeDhkaWtzZEN4ZktUdHlaWFIxY200Z1gzMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYc25kWE5sSUhOMGNtbGpkQ2M3ZG1GeUlHNDljaWd4TWlrc2J6MXlLRE14S1N4c1BYSW9OaWs3WlM1bGVIQnZjblJ6UFZ0ZExtTnZjSGxYYVhSb2FXNThmR1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJSEk5YmloMGFHbHpLU3hoUFd3b2NpNXNaVzVuZEdncExITTlieWhsTEdFcExHazlieWgwTEdFcExHTTlNanhoY21kMWJXVnVkSE11YkdWdVozUm9QMkZ5WjNWdFpXNTBjMXN5WFRwMmIybGtJREFzY0Qxa0tDaGpQVDA5ZG05cFpDQXdQMkU2YnloakxHRXBLUzFwTEdFdGN5a3NkVDB4TzJadmNpaHBQSE1tSm5NOGFTdHdKaVlvZFQwdE1TeHBLejF3TFRFc2N5czljQzB4S1Rzd1BIQXRMVHNwYVNCcGJpQnlQM0piYzEwOWNsdHBYVHBrWld4bGRHVWdjbHR6WFN4ekt6MTFMR2tyUFhVN2NtVjBkWEp1SUhKOWZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN0ozVnpaU0J6ZEhKcFkzUW5PM1poY2lCdVBYSW9OeWt1Wml4dlBYSW9NemdwTEd3OWNpZ3lPQ2tzWVQxeUtERTBLU3h6UFhJb01qa3BMR2s5Y2lnME5pa3NZejF5S0RjM0tTeHdQWElvTnpZcExHUTljaWcwTXlrc2RUMXlLRGdwTEdjOWNpZ3hPU2t1Wm1GemRFdGxlU3hvUFhJb01qY3BMSGs5ZFQ4blgzTW5PaWR6YVhwbEp5eG1QV1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJSElzYmoxbktIUXBPMmxtS0NkR0p5RTlQVzRwY21WMGRYSnVJR1V1WDJsYmJsMDdabTl5S0hJOVpTNWZaanR5TzNJOWNpNXVLV2xtS0hJdWF6MDlkQ2x5WlhSMWNtNGdjbjA3WlM1bGVIQnZjblJ6UFh0blpYUkRiMjV6ZEhKMVkzUnZjanBtZFc1amRHbHZiaWhsTEhRc2NpeGpLWHQyWVhJZ2NEMWxLR1oxYm1OMGFXOXVLR1VzYmlsN2N5aGxMSEFzZEN3blgya25LU3hsTGw5MFBYUXNaUzVmYVQxdktHNTFiR3dwTEdVdVgyWTlkbTlwWkNBd0xHVXVYMnc5ZG05cFpDQXdMR1ZiZVYwOU1DeDJiMmxrSURBaFBXNG1KbWtvYml4eUxHVmJZMTBzWlNsOUtUdHlaWFIxY200Z2JDaHdMbkJ5YjNSdmRIbHdaU3g3WTJ4bFlYSTZablZ1WTNScGIyNG9LWHRtYjNJb2RtRnlJR1U5YUNoMGFHbHpMSFFwTEhJOVpTNWZhU3h1UFdVdVgyWTdianR1UFc0dWJpbHVMbkk5SVRBc2JpNXdKaVlvYmk1d1BXNHVjQzV1UFhadmFXUWdNQ2tzWkdWc1pYUmxJSEpiYmk1cFhUdGxMbDltUFdVdVgydzlkbTlwWkNBd0xHVmJlVjA5TUgwc1pHVnNaWFJsT21aMWJtTjBhVzl1S0dVcGUzWmhjaUJ5UFdnb2RHaHBjeXgwS1N4dVBXWW9jaXhsS1R0cFppaHVLWHQyWVhJZ2J6MXVMbTRzYkQxdUxuQTdaR1ZzWlhSbElISXVYMmxiYmk1cFhTeHVMbkk5SVRBc2JDWW1LR3d1YmoxdktTeHZKaVlvYnk1d1BXd3BMSEl1WDJZOVBXNG1KaWh5TGw5bVBXOHBMSEl1WDJ3OVBXNG1KaWh5TGw5c1BXd3BMSEpiZVYwdExYMXlaWFIxY200aElXNTlMR1p2Y2tWaFkyZzZablZ1WTNScGIyNG9aU2w3YUNoMGFHbHpMSFFwTzJadmNpaDJZWElnY2l4dVBXRW9aU3d4UEdGeVozVnRaVzUwY3k1c1pXNW5kR2cvWVhKbmRXMWxiblJ6V3pGZE9uWnZhV1FnTUN3ektUdHlQWEkvY2k1dU9uUm9hWE11WDJZN0tXWnZjaWh1S0hJdWRpeHlMbXNzZEdocGN5azdjaVltY2k1eU95bHlQWEl1Y0gwc2FHRnpPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUVoWmlob0tIUm9hWE1zZENrc1pTbDlmU2tzZFNZbWJpaHdMbkJ5YjNSdmRIbHdaU3duYzJsNlpTY3NlMmRsZERwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCb0tIUm9hWE1zZENsYmVWMTlmU2tzY0gwc1pHVm1PbVoxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYml4dkxHdzlaaWhsTEhRcE8zSmxkSFZ5YmlCc1Ayd3VkajF5T2lobExsOXNQV3c5ZTJrNmJ6MW5LSFFzSVRBcExHczZkQ3gyT25Jc2NEcHVQV1V1WDJ3c2JqcDJiMmxrSURBc2Nqb2hNWDBzSVdVdVgyWW1KaWhsTGw5bVBXd3BMRzRtSmlodUxtNDliQ2tzWlZ0NVhTc3JMQ2RHSnlFOVBXOG1KaWhsTGw5cFcyOWRQV3dwS1N4bGZTeG5aWFJGYm5SeWVUcG1MSE5sZEZOMGNtOXVaenBtZFc1amRHbHZiaWhsTEhRc2NpbDdZeWhsTEhRc1puVnVZM1JwYjI0b1pTeHlLWHQwYUdsekxsOTBQV2dvWlN4MEtTeDBhR2x6TGw5clBYSXNkR2hwY3k1ZmJEMTJiMmxrSURCOUxHWjFibU4wYVc5dUtDbDdabTl5S0haaGNpQmxQWFJvYVhNc2REMWxMbDlyTEhJOVpTNWZiRHR5SmlaeUxuSTdLWEk5Y2k1d08zSmxkSFZ5YmlCbExsOTBKaVlvWlM1ZmJEMXlQWEkvY2k1dU9tVXVYM1F1WDJZcFB5ZHJaWGx6SnowOWREOXdLREFzY2k1cktUb25kbUZzZFdWekp6MDlkRDl3S0RBc2NpNTJLVHB3S0RBc1czSXVheXh5TG5aZEtUb29aUzVmZEQxMmIybGtJREFzY0NneEtTbDlMSEkvSjJWdWRISnBaWE1uT2lkMllXeDFaWE1uTENGeUxDRXdLU3hrS0hRcGZYMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtESXBPMlV1Wlhod2IzSjBjejFtZFc1amRHbHZiaWgwTEdVc2NpeHZLWHQwY25sN2NtVjBkWEp1SUc4L1pTaHVLSElwV3pCZExISmJNVjBwT21Vb2NpbDlZMkYwWTJnb2NpbDdkbUZ5SUd3OWRGc25jbVYwZFhKdUoxMDdkR2h5YjNjZ2RtOXBaQ0F3SVQwOWJDWW1iaWhzTG1OaGJHd29kQ2twTEhKOWZYMHNablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhJb01Ta3NiejF5S0RJcExHdzlablZ1WTNScGIyNG9aU3gwS1h0cFppaHZLR1VwTENGdUtIUXBKaVp1ZFd4c0lUMDlkQ2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9kQ3NuT2lCallXNWNYQ2QwSUhObGRDQmhjeUJ3Y205MGIzUjVjR1VoSnlsOU8yVXVaWGh3YjNKMGN6MTdjMlYwT2s5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFpueDhLQ2RmWDNCeWIzUnZYMThuYVc1N2ZUOW1kVzVqZEdsdmJpaGxMSFFzYmlsN2RISjVlMjQ5Y2lneE5Da29SblZ1WTNScGIyNHVZMkZzYkN4eUtERTJLUzVtS0U5aWFtVmpkQzV3Y205MGIzUjVjR1VzSjE5ZmNISnZkRzlmWHljcExuTmxkQ3d5S1N4dUtHVXNXMTBwTEhROUlTaGxJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BmV05oZEdOb0tISXBlM1E5SVRCOWNtVjBkWEp1SUdaMWJtTjBhVzl1S0dVc2NpbDdjbVYwZFhKdUlHd29aU3h5S1N4MFAyVXVYMTl3Y205MGIxOWZQWEk2YmlobExISXBMR1Y5ZlNoN2ZTd2hNU2s2ZG05cFpDQXdLU3hqYUdWamF6cHNmWDBzWm5WdVkzUnBiMjRvWlN4MExISXBleWQxYzJVZ2MzUnlhV04wSnp0MllYSWdiajF5S0RJMktTeHZQWElvTkRncExHdzljaWcwTUNrc1lUMXlLREV5S1N4elBYSW9OVFFwTEdrOVQySnFaV04wTG1GemMybG5ianRsTG1WNGNHOXlkSE05SVdsOGZISW9OU2tvWm5WdVkzUnBiMjRvS1h0MllYSWdaVDE3ZlN4MFBYdDlMSEk5VTNsdFltOXNLQ2tzYmowbllXSmpaR1ZtWjJocGFtdHNiVzV2Y0hGeWMzUW5PM0psZEhWeWJpQmxXM0pkUFRjc2JpNXpjR3hwZENnbkp5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpaGxLWHQwVzJWZFBXVjlLU3czSVQxcEtIdDlMR1VwVzNKZGZIeFBZbXBsWTNRdWEyVjVjeWhwS0h0OUxIUXBLUzVxYjJsdUtDY25LU0U5Ym4wcFAyWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkRDFoS0dVcExISTlZWEpuZFcxbGJuUnpMbXhsYm1kMGFDeHBQVEVzWXoxdkxtWXNjRDFzTG1ZN2NqNXBPeWxtYjNJb2RtRnlJR1FzZFQxektHRnlaM1Z0Wlc1MGMxdHBLeXRkS1N4blBXTS9iaWgxS1M1amIyNWpZWFFvWXloMUtTazZiaWgxS1N4b1BXY3ViR1Z1WjNSb0xIazlNRHRvUG5rN0tYQXVZMkZzYkNoMUxHUTlaMXQ1S3l0ZEtTWW1LSFJiWkYwOWRWdGtYU2s3Y21WMGRYSnVJSFI5T21sOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1hzbmRYTmxJSE4wY21samRDYzdkbUZ5SUc0OWNpZ3lPQ2tzYnoxeUtERTVLUzVuWlhSWFpXRnJMR3c5Y2lneUtTeGhQWElvTVNrc2N6MXlLREk1S1N4cFBYSW9ORFlwTEdNOWNpZ3pPU2tzY0QxeUtERXdLU3hrUFhJb01qY3BMSFU5WXlnMUtTeG5QV01vTmlrc2FEMHdMSGs5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdVdVgyeDhmQ2hsTGw5c1BXNWxkeUJtS1gwc1pqMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdVlUMWJYWDBzYlQxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQjFLR1V1WVN4bWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1pWc3dYVDA5UFhSOUtYMDdaaTV3Y205MGIzUjVjR1U5ZTJkbGREcG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMXRLSFJvYVhNc1pTazdhV1lvZENseVpYUjFjbTRnZEZzeFhYMHNhR0Z6T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlFaGJTaDBhR2x6TEdVcGZTeHpaWFE2Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2oxdEtIUm9hWE1zWlNrN2NqOXlXekZkUFhRNmRHaHBjeTVoTG5CMWMyZ29XMlVzZEYwcGZTeGtaV3hsZEdVNlpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVp5aDBhR2x6TG1Fc1puVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlIUmJNRjA5UFQxbGZTazdjbVYwZFhKdWZuUW1KblJvYVhNdVlTNXpjR3hwWTJVb2RDd3hLU3doSVg1MGZYMHNaUzVsZUhCdmNuUnpQWHRuWlhSRGIyNXpkSEoxWTNSdmNqcG1kVzVqZEdsdmJpaGxMSFFzY2l4c0tYdDJZWElnWXoxbEtHWjFibU4wYVc5dUtHVXNiaWw3Y3lobExHTXNkQ3duWDJrbktTeGxMbDkwUFhRc1pTNWZhVDFvS3lzc1pTNWZiRDEyYjJsa0lEQXNkbTlwWkNBd0lUMXVKaVpwS0c0c2NpeGxXMnhkTEdVcGZTazdjbVYwZFhKdUlHNG9ZeTV3Y205MGIzUjVjR1VzZTJSbGJHVjBaVHBtZFc1amRHbHZiaWhsS1h0cFppZ2hZU2hsS1NseVpYUjFjbTRoTVR0MllYSWdjajF2S0dVcE8zSmxkSFZ5YmlFd1BUMDljajk1S0dRb2RHaHBjeXgwS1NsYkoyUmxiR1YwWlNkZEtHVXBPbkltSm5Bb2NpeDBhR2x6TGw5cEtTWW1aR1ZzWlhSbElISmJkR2hwY3k1ZmFWMTlMR2hoY3pwbWRXNWpkR2x2YmlobEtYdHBaaWdoWVNobEtTbHlaWFIxY200aE1UdDJZWElnY2oxdktHVXBPM0psZEhWeWJpRXdQVDA5Y2o5NUtHUW9kR2hwY3l4MEtTa3VhR0Z6S0dVcE9uSW1KbkFvY2l4MGFHbHpMbDlwS1gxOUtTeGpmU3hrWldZNlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQVzhvYkNoMEtTd2hNQ2s3Y21WMGRYSnVJVEE5UFQxdVAza29aU2t1YzJWMEtIUXNjaWs2Ymx0bExsOXBYVDF5TEdWOUxIVm1jM1J2Y21VNmVYMTlMR1oxYm1OMGFXOXVLR1VwZTJVdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljajA5UFhadmFXUWdNRHR6ZDJsMFkyZ29kQzVzWlc1bmRHZ3BlMk5oYzJVZ01EcHlaWFIxY200Z2JqOWxLQ2s2WlM1allXeHNLSElwTzJOaGMyVWdNVHB5WlhSMWNtNGdiajlsS0hSYk1GMHBPbVV1WTJGc2JDaHlMSFJiTUYwcE8yTmhjMlVnTWpweVpYUjFjbTRnYmo5bEtIUmJNRjBzZEZzeFhTazZaUzVqWVd4c0tISXNkRnN3WFN4MFd6RmRLVHRqWVhObElETTZjbVYwZFhKdUlHNC9aU2gwV3pCZExIUmJNVjBzZEZzeVhTazZaUzVqWVd4c0tISXNkRnN3WFN4MFd6RmRMSFJiTWwwcE8yTmhjMlVnTkRweVpYUjFjbTRnYmo5bEtIUmJNRjBzZEZzeFhTeDBXekpkTEhSYk0xMHBPbVV1WTJGc2JDaHlMSFJiTUYwc2RGc3hYU3gwV3pKZExIUmJNMTBwTzMxeVpYUjFjbTRnWlM1aGNIQnNlU2h5TEhRcGZYMHNablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhJb016Y3BMRzg5Y2lnME9Da3NiRDF5S0RJcExHRTljaWd6S1M1U1pXWnNaV04wTzJVdVpYaHdiM0owY3oxaEppWmhMbTkzYmt0bGVYTjhmR1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVzR1Wmloc0tHVXBLU3h5UFc4dVpqdHlaWFIxY200Z2NqOTBMbU52Ym1OaGRDaHlLR1VwS1RwMGZYMHNablZ1WTNScGIyNG9aU3gwTEhJcGV5ZDFjMlVnYzNSeWFXTjBKenRtZFc1amRHbHZiaUJ1S0dVcGUzWmhjaUIwTEhJN2RHaHBjeTV3Y205dGFYTmxQVzVsZHlCbEtHWjFibU4wYVc5dUtHVXNiaWw3YVdZb2RDRTlkbTlwWkNBd2ZIeHlJVDEyYjJsa0lEQXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZENZV1FnVUhKdmJXbHpaU0JqYjI1emRISjFZM1J2Y2ljcE8zUTlaU3h5UFc1OUtTeDBhR2x6TG5KbGMyOXNkbVU5YnloMEtTeDBhR2x6TG5KbGFtVmpkRDF2S0hJcGZYWmhjaUJ2UFhJb01qUXBPMlV1Wlhod2IzSjBjeTVtUFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCdVpYY2diaWhsS1gxOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtWTljaWcwS1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTVRFcExHODljaWd6TnlrdVppeHNQWHQ5TG5SdlUzUnlhVzVuTEdFOUoyOWlhbVZqZENjOVBYUjVjR1Z2WmlCM2FXNWtiM2NtSm5kcGJtUnZkeVltVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE0vVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vZDJsdVpHOTNLVHBiWFN4elBXWjFibU4wYVc5dUtHVXBlM1J5ZVh0eVpYUjFjbTRnYnlobEtYMWpZWFJqYUNoMEtYdHlaWFIxY200Z1lTNXpiR2xqWlNncGZYMDdaUzVsZUhCdmNuUnpMbVk5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdFbUppZGJiMkpxWldOMElGZHBibVJ2ZDEwblBUMXNMbU5oYkd3b1pTay9jeWhsS1RwdktHNG9aU2twZlgwc1puVnVZM1JwYjI0b1pTbDdaUzVsZUhCdmNuUnpQVTlpYW1WamRDNXBjM3g4Wm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200Z1pUMDlQWFEvTUNFOVBXVjhmREV2WlQwOU1TOTBPbVVoUFdVbUpuUWhQWFI5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd4T0Nrc2J6MXlLREkxS1R0bExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtIUXNjaWw3ZG1GeUlHTXNZU3h3UFc4b2RDa3JKeWNzY3oxdUtISXBMR2s5Y0M1c1pXNW5kR2c3Y21WMGRYSnVJREErYzN4OGN6NDlhVDlsUHljbk9uWnZhV1FnTURvb1l6MXdMbU5vWVhKRGIyUmxRWFFvY3lrc05UVXlPVFkrWTN4OE5UWXpNVGs4WTN4OGN5c3hQVDA5YVh4OE5UWXpNakErS0dFOWNDNWphR0Z5UTI5a1pVRjBLSE1yTVNrcGZIdzFOek0wTXp4aFAyVS9jQzVqYUdGeVFYUW9jeWs2WXpwbFAzQXVjMnhwWTJVb2N5eHpLeklwT2loakxUVTFNamsyUER3eE1Da3JLR0V0TlRZek1qQXBLelkxTlRNMktYMTlmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdKM1Z6WlNCemRISnBZM1FuTzNaaGNpQnZQWElvTVRncExHdzljaWd5TlNrN1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM1poY2lCMFBXd29kR2hwY3lrckp5Y3NjajBuSnl4aFBXOG9aU2s3YVdZb01ENWhmSHhoUFQxSmJtWnBibWwwZVNsMGFISnZkeUJTWVc1blpVVnljbTl5S0NkRGIzVnVkQ0JqWVc1Y1hDZDBJR0psSUc1bFoyRjBhWFpsSnlrN1ptOXlLRHN3UEdFN0tHRStQajQ5TVNrbUppaDBLejEwS1NreEptRW1KaWh5S3oxMEtUdHlaWFIxY200Z2NuMTlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtERXBMRzg5Y2lnek1Da3NiRDF5S0RRcEtDZHRZWFJqYUNjcE8yVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REdHlaWFIxY200Z2JpaGxLU1ltS0NoMFBXVmJiRjBwUFQwOWRtOXBaQ0F3UHlkU1pXZEZlSEFuUFQxdktHVXBPaUVoZENsOWZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN0ozVnpaU0J6ZEhKcFkzUW5PM1poY2lCdVBYSW9NaWs3WlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0NsN2RtRnlJR1U5YmloMGFHbHpLU3gwUFNjbk8zSmxkSFZ5YmlCbExtZHNiMkpoYkNZbUtIUXJQU2RuSnlrc1pTNXBaMjV2Y21WRFlYTmxKaVlvZENzOUoya25LU3hsTG0xMWJIUnBiR2x1WlNZbUtIUXJQU2R0Snlrc1pTNTFibWxqYjJSbEppWW9kQ3M5SjNVbktTeGxMbk4wYVdOcmVTWW1LSFFyUFNkNUp5a3NkSDE5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLREVwTzJVdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200aGJpaGxLU1ltYVhOR2FXNXBkR1VvWlNrbUpuQW9aU2s5UFQxbGZYMHNablZ1WTNScGIyNG9aU2w3WlM1bGVIQnZjblJ6UFUxaGRHZ3ViRzluTVhCOGZHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpMHhaUzA0UENobFBTdGxLU1ltTVdVdE9ENWxQMlV0WlNwbEx6STZiaWd4SzJVcGZYMHNablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhJb01qWXBMRzg5Y2lneE1Ta3NiRDF5S0RRd0tTNW1PMlV1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWm5WdVkzUnBiMjRvZENsN1ptOXlLSFpoY2lCeUxHRTlieWgwS1N4elBXNG9ZU2tzWXoxekxteGxibWQwYUN4d1BUQXNhVDFiWFR0alBuQTdLV3d1WTJGc2JDaGhMSEk5YzF0d0t5dGRLU1ltYVM1d2RYTm9LR1UvVzNJc1lWdHlYVjA2WVZ0eVhTazdjbVYwZFhKdUlHbDlmWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBYSW9OaWtzYnoxeUtEa3hLU3hzUFhJb01qVXBPMlV1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRc2NpeGhLWHQyWVhJZ2N6MXNLR1VwS3ljbkxHazljeTVzWlc1bmRHZ3NjRDEyYjJsa0lEQTlQVDF5UHljZ0p6cHlLeWNuTEdROWJpaDBLVHRwWmloa1BEMXBmSHduSnowOWNDbHlaWFIxY200Z2N6dDJZWElnZFQxa0xXa3NaejF2TG1OaGJHd29jQ3hqS0hVdmNDNXNaVzVuZEdncEtUdHlaWFIxY200Z1p5NXNaVzVuZEdnK2RTWW1LR2M5Wnk1emJHbGpaU2d3TEhVcEtTeGhQMmNyY3pweksyZDlmU3htZFc1amRHbHZiaWhsTEhRcGV5ZDFjMlVnYzNSeWFXTjBKenRtZFc1amRHbHZiaUJ5S0dVc2RDeHlLWHQyWVhJZ2JqMXVaWGNnUlhKeWIzSW9kQzV0WlhOellXZGxmSHgwTG0xbGMzTmhaMlZmZEc5ZlkyeHBaVzUwZkh4MEtUdHlaWFIxY200Z2JpNXVZVzFsUFhRdVkyOWtaWHg4WlN4dUxuQmhjM04wYUhKdmRXZG9QWElzYm4xbWRXNWpkR2x2YmlCdUtHVXNkQ2w3Wm05eUtIWmhjaUJ5UFc1bGR5QlZhVzUwT0VGeWNtRjVLR1V1YkdWdVozUm9LM1F1YkdWdVozUm9LU3h1UFRBN2JqeGxMbXhsYm1kMGFEdHVLeXNwY2x0dVhUMWxXMjVkTzJadmNpaDJZWElnYnowd08yODhkQzVzWlc1bmRHZzdieXNyS1hKYmJ5dGxMbXhsYm1kMGFGMDlkRnR2WFR0eVpYUjFjbTRnY24xbWRXNWpkR2x2YmlCdktHVXBlM1poY2lCMFBXNWxkeUJWYVc1ME9FRnljbUY1S0d3cExISTlibVYzSUVSaGRHRldhV1YzS0hRdVluVm1abVZ5S1R0eVpYUjFjbTRnY2k1elpYUlZhVzUwTXpJb01DeGxLU3gwZlU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBMQ2RmWDJWelRXOWtkV3hsSnl4N2RtRnNkV1U2SVRCOUtTeDBMbUZrWkUxbGRHRmtZWFJoUFdaMWJtTjBhVzl1S0dVc2RDbDdabTl5S0haaGNpQnlQWFF1ZFhCc2IyRmtTV1FzYkQxMExtTmhiR3hVZVhCbExHRTlieWh5S1N4elBXOG9iQ2tzYVQxbExHTTlablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlieWhsTG14bGJtZDBhQ2tzY2oxdVpYY2dWV2x1ZERoQmNuSmhlU2hiWFNrN2NtVjBkWEp1SUhJOWJpaHlMSE1wTEhJOWJpaHlMR0VwTEhJOWJpaHlMSFFwTEhJOWJpaHlMR1VwTEhKOUxIQTlXMTBzWkQwd08yUThhUzVzWlc1bmRHZzdaQ3NyS1hBdWNIVnphQ2hqS0dsYlpGMHNaQ3hwS1NrN2NtVjBkWEp1SUhCOUxIUXViRzluUFdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwTzJsbUtHVXBlMlp2Y2loMllYSWdjajFoY21kMWJXVnVkSE11YkdWdVozUm9MRzQ5UVhKeVlYa29NVHh5UDNJdE1Ub3dLU3h2UFRFN2J6eHlPMjhyS3lsdVcyOHRNVjA5WVhKbmRXMWxiblJ6VzI5ZE95aDBQV052Ym5OdmJHVXBMbXh2Wnk1aGNIQnNlU2gwTEZ0dVpYY2dSR0YwWlNzbk9pZGRMbU52Ym1OaGRDaHVLU2w5ZlN4MExtTnlaV0YwWlVWeWNtOXlQWElzZEM1d2RYTm9WRzlDZFdabVpYSTliaXgwTG1kbGRFWnBiR1U5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5VDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3hsS1R0eVpYUjFjbTRnZEM1aWRXWm1aWEk5Ym1WM0lGVnBiblE0UVhKeVlYa29aUzVpZFdabVpYSXBMSFI5TEhRdVkyaGxZMnRQY0hScGIyNXpQV1oxYm1OMGFXOXVLR1VwZTJsbUtDRmxLWFJvY205M0lFVnljbTl5S0NkUGNIUnBiMjV6SUdseklISmxjWFZwY21Wa0p5azdabTl5S0haaGNpQjBQVnNuWm1sc1pXNWhiV1VuTENkaWRXWm1aWEluTENka2IyTjFiV1Z1ZEZSNWNHVW5MQ2RrYjJOMWJXVnVkRVp2Y20xaGRDZGRMRzQ5ZEN4dlBXWjFibU4wYVc5dUtIUXBlMmxtS0NFb2RDQnBiaUJsS1NsMGFISnZkeUJ5S0NkSmJuWnZZMkYwYVc5dVJYSnliM0luTENkU1pYRjFhWEpsWkNCdmNIUnBiMjRnUENjcmRDc25QaUJwY3lCdWIzUWdabTkxYm1RZ2FXNGdkR2hsSUdkcGRtVnVJRzl3ZEdsdmJuTW5LWDBzYkQwd08ydzhiaTVzWlc1bmRHZzdiQ3NyS1c4b2JsdHNYU3hzTEc0cE8ybG1LR1V1WW5WbVptVnlMbXhsYm1kMGFENWhLWFJvY205M0lISW9KMFpwYkdWVGFYcGxSWEp5YjNJbkxDZFVhR1VnYldGNGFXMTFiU0JoWTJObGNIUmhZbXhsSUdacGJHVWdjMmw2WlNCcGN5QW5LM01wZlR0MllYSWdiRDAwTEdFOWRDNU5RVmhmVTBsYVJUMDRNemc0TmpBNExITTlkQzVJVlUxQlRsOVNSVUZFUVVKTVJWOU5RVmhmVTBsYVJUMG5PQ0JOUWljc2FUMTBMbWRsYm1WeVlYUmxRMmgxYm10elBXWjFibU4wYVc5dUtHVXNkQ2w3Wm05eUtIWmhjaUJ5TEc0OWRDNWphSFZ1YTFOcGVtVXNiejF1UFQwOWRtOXBaQ0F3UHpFMk16ZzBPbTRzYkQxYlhTeGhQVEE3WVR4bExteGxibWQwYUR0aEt5c3BjajFsVzJGZExEQTlQV0VsYno5c0xuQjFjMmdvVzNKZEtUcHNXMnd1YkdWdVozUm9MVEZkTG5CMWMyZ29jaWs3Wm05eUtIWmhjaUJ6UFd3c2FUMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdibVYzSUZWcGJuUTRRWEp5WVhrb1pTbDlMR005VzEwc2NEMHdPM0E4Y3k1c1pXNW5kR2c3Y0NzcktXTXVjSFZ6YUNocEtITmJjRjBzY0N4ektTazdjbVYwZFhKdUlHTXVZMjl1WTJGMEtHNWxkeUJWYVc1ME9FRnljbUY1S0Z0ZEtTbDlmU3htZFc1amRHbHZiaWhsS1h0MllYSWdjajE3ZFhSbU9EcDdjM1J5YVc1blZHOUNlWFJsY3pwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2NpNWlhVzR1YzNSeWFXNW5WRzlDZVhSbGN5aDFibVZ6WTJGd1pTaGxibU52WkdWVlVrbERiMjF3YjI1bGJuUW9aU2twS1gwc1lubDBaWE5VYjFOMGNtbHVaenBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0dWelkyRndaU2h5TG1KcGJpNWllWFJsYzFSdlUzUnlhVzVuS0dVcEtTbDlmU3hpYVc0NmUzTjBjbWx1WjFSdlFubDBaWE02Wm5WdVkzUnBiMjRvWlNsN1ptOXlLSFpoY2lCMFBWdGRMSEk5TUR0eVBHVXViR1Z1WjNSb08zSXJLeWwwTG5CMWMyZ29NalUxSm1VdVkyaGhja052WkdWQmRDaHlLU2s3Y21WMGRYSnVJSFI5TEdKNWRHVnpWRzlUZEhKcGJtYzZablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUJ5UFZ0ZExHNDlNRHR1UEdVdWJHVnVaM1JvTzI0ckt5bHlMbkIxYzJnb2RDaGxXMjVkS1NrN2NtVjBkWEp1SUhJdWFtOXBiaWduSnlsOWZYMDdaUzVsZUhCdmNuUnpQWEo5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHNuZFhObElITjBjbWxqZENjN1puVnVZM1JwYjI0Z2JpaGxMSFFwZTJsbUtDRW9aU0JwYm5OMFlXNWpaVzltSUhRcEtYUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KME5oYm01dmRDQmpZV3hzSUdFZ1kyeGhjM01nWVhNZ1lTQm1kVzVqZEdsdmJpY3BmVTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMExDZGZYMlZ6VFc5a2RXeGxKeXg3ZG1Gc2RXVTZJVEI5S1R0MllYSWdiejFtZFc1amRHbHZiaWdwZTJaMWJtTjBhVzl1SUdVb1pTeDBLWHRtYjNJb2RtRnlJSElzYmowd08yNDhkQzVzWlc1bmRHZzdiaXNyS1hJOWRGdHVYU3h5TG1WdWRXMWxjbUZpYkdVOWNpNWxiblZ0WlhKaFlteGxmSHdoTVN4eUxtTnZibVpwWjNWeVlXSnNaVDBoTUN3bmRtRnNkV1VuYVc0Z2NpWW1LSEl1ZDNKcGRHRmliR1U5SVRBcExFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsTEhJdWEyVjVMSElwZlhKbGRIVnliaUJtZFc1amRHbHZiaWgwTEhJc2JpbDdjbVYwZFhKdUlISW1KbVVvZEM1d2NtOTBiM1I1Y0dVc2Npa3NiaVltWlNoMExHNHBMSFI5ZlNncE8zSW9NVEF4S1N4eUtERXdNeWtzY2lneE1EZ3BMSElvTVRBNUtTeHlLREV4TUNrc2NpZ3hNVEVwTEhJb01URXlLU3h5S0RFeE15a3NjaWd4TVRRcExISW9NVEUxS1N4eUtERXhOaWtzY2lneE1UZ3BMSElvTVRFNUtTeHlLREV5TUNrc2NpZ3hNakVwTEhJb01USXlLU3h5S0RFeU5Da3NjaWd4TWpVcExISW9NVEkyS1N4eUtERXlOeWtzY2lneE1qZ3BMSElvTVRJNUtTeHlLREV6TUNrc2NpZ3hNekVwTEhJb01UTXlLU3h5S0RFek15a3NjaWd4TXpRcExISW9NVE0xS1N4eUtERXpPU2tzY2lneE5ESXBMSElvTVRRektTeHlLREUwTkNrc2NpZ3hORFVwTEhJb01UUTJLU3h5S0RFME55a3NjaWd4TkRncExISW9NVFE1S1N4eUtERTFNQ2tzY2lneE5URXBMSElvTVRVeUtTeHlLREUxTXlrc2NpZ3hOVFFwTEhJb01UVTFLU3h5S0RFMU5pa3NjaWd4TlRjcExISW9NVFU0S1N4eUtERTFPU2tzY2lneE5qQXBMSElvTVRZeEtTeHlLREUyTWlrc2NpZ3hOak1wTEhJb01UWTFLU3h5S0RFMk5pa3NjaWd4TmpjcExISW9NVFk0S1N4eUtERTJPU2tzY2lneE56QXBMSElvTVRjeEtTeHlLREUzTWlrc2NpZ3hOek1wTEhJb05qRXBMSElvTVRjMEtTeHlLREUzTlNrc2NpZ3hOellwTEhJb01UYzNLU3h5S0RFM09Da3NjaWd4TnprcExISW9NVGd3S1N4eUtERTRNU2tzY2lneE9ESXBMSElvTVRnektTeHlLREU0TkNrc2NpZ3hPRFVwTEhJb01UZzJLU3h5S0RFNE55a3NjaWd4T0RncExISW9NVGt3S1N4eUtERTVNU2tzY2lneE9USXBMSElvTVRrektTeHlLREU1TkNrc2NpZ3hPVFVwTEhJb01UazJLU3h5S0RFNU55a3NjaWd4T1RncExISW9NVGs1S1N4eUtESXdNQ2tzY2lneU1ERXBMSElvTWpBeUtTeHlLREl3TXlrc2NpZ3lNRFFwTEhJb01qQTFLU3h5S0RJd05pa3NjaWd5TURjcExISW9NakE0S1R0MllYSWdiRDF5S0RrNEtTeGhQWElvTWpBNUtTeHpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsSmlabExsOWZaWE5OYjJSMWJHVS9aVHA3WkdWbVlYVnNkRHBsZlgwb1lTa3NhVDB3TEdNOVpuVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmxLSFFwZTI0b2RHaHBjeXhsS1N4MGFHbHpMbU52Ym1acFp6MTBMSFJvYVhNdVkyeHBaVzUwY3oxN2ZTeDBhR2x6TG5keVlYQkRiMjV1WldOMGFXOXVLQ2w5Y21WMGRYSnVJRzhvWlN4YmUydGxlVG9uZFhCc2IyRmtKeXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMTBhR2x6TEhJOWRHaHBjeTVqYjI1bWFXY3VaR1ZpZFdjc2JqMG9NQ3hzTG1kbGRFWnBiR1VwS0dVcE95Z3dMR3d1WTJobFkydFBjSFJwYjI1ektTaHVLU3hwS3oweE8zWmhjaUJ2UFc1bGR5QnpMbVJsWm1GMWJIUW9lM05sYm1RNmRHaHBjeTV6Wlc1a0xHWnBiR1U2Yml4eVpYRkpaRHBwZlNrN2NtVjBkWEp1SUhSb2FYTXVZMnhwWlc1MGMxdHBYVDE3WTJ4cFpXNTBPbTk5TEc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtHVXNZU2w3ZEM1amJHbGxiblJ6VzJsZExuQnliMjFwYzJVOWUzSmxjMjlzZG1VNlpTeHlaV3BsWTNRNllYMHNLREFzYkM1c2IyY3BLSFp2YVdRZ01DRTlQWEltSm5Jc0oxVndiRzloWkdsdVp5QnpkR0Z5ZEdWa0xDQkdhV3hsSUc5d2RHbHZibk02Snl4dUtTeHZMbkpsY1hWbGMzUlZjR3h2WVdRb0tYMHBmWDBzZTJ0bGVUb25kM0poY0VOdmJtNWxZM1JwYjI0bkxIWmhiSFZsT21aMWJtTjBhVzl1S0NsN2RtRnlJR1U5ZEdocGN5eDBQWFJvYVhNdVkyOXVabWxuTEhJOWRDNWpiMjV1WldOMGFXOXVMRzQ5ZEM1a1pXSjFaeXh2UFhadmFXUWdNQ0U5UFc0bUptNDdhV1lvSVhKOGZERWhQVDF5TG5KbFlXUjVVM1JoZEdVcGRHaHliM2NvTUN4c0xtTnlaV0YwWlVWeWNtOXlLU2duUTI5dWJtVmpkR2x2YmtWeWNtOXlKeXduUTI5dWJtVmpkR2x2YmlCcGN5QnViM1FnY21WaFpIa2hKeWs3ZEdocGN5NWpiMjV1WldOMGFXOXVQWElzZEdocGN5NXpaVzVrUFdaMWJtTjBhVzl1S0dVcGV5Z3dMR3d1Ykc5bktTaHZMQ2M4VTJWdWRENDZKeXhsS1N4eUxuTmxibVFvWlNsOU8zWmhjaUJoUFhJdWIyNXRaWE56WVdkbE8zSXViMjV0WlhOellXZGxQV1oxYm1OMGFXOXVLSFFwZTNaaGNpQnVQWFF1WkdGMFlUc29NQ3hzTG14dlp5a29ieXduUEZKbFkyVnBkbVZrUGpvbkxHNHBPM1poY2lCelBVcFRUMDR1Y0dGeWMyVW9iaWs3YVdZb1lTWW1LQ0Z6TG5CaGMzTjBhSEp2ZFdkb2ZId2hjeTV3WVhOemRHaHliM1ZuYUM1a2IyTjFiV1Z1ZEY5MWNHeHZZV1FwS1hKbGRIVnliaUIyYjJsa0lHRXVZMkZzYkNoeUxIUXBPM1poY2lCcFBYTXVjR0Z6YzNSb2NtOTFaMmd1Wkc5amRXMWxiblJmZFhCc2IyRmtPMmxtS0dFbUppRnBLWEpsZEhWeWJpQjJiMmxrSUdFdVkyRnNiQ2h5TEhRcE8ybG1LSE11Y21WeFgybGtJR2x1SUdVdVkyeHBaVzUwY3lsN2RtRnlJR005WlM1amJHbGxiblJ6VzNNdWNtVnhYMmxrWFN4d1BXTXVZMnhwWlc1MExHUTlZeTV3Y205dGFYTmxPM1J5ZVh0MllYSWdkVDF3TG1oaGJtUnNaVTFsYzNOaFoyVW9jeWs3ZFNZbUtDZ3dMR3d1Ykc5bktTaHZMQ2RWY0d4dllXUWdjM1ZqWTJWemMyWjFiQ3dnZFhCc2IyRmtJR2x1Wm04Nkp5eDFLU3hrTG5KbGMyOXNkbVVvZFNrcGZXTmhkR05vS0hRcGUyUXVjbVZxWldOMEtIUXBMQ2d3TEd3dWJHOW5LU2h2TEhRcGZYMTlmWDFkS1N4bGZTZ3BPM1F1WkdWbVlYVnNkRDFqZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3SjNWelpTQnpkSEpwWTNRbk8zWmhjaUJ1UFhJb01Da3NiejF5S0RVektTeHNQWElvTnpFcExHRTljaWd5S1N4elBYSW9NekVwTEdrOWNpZzJLU3hqUFhJb01Ta3NjRDF5S0RNcExrRnljbUY1UW5WbVptVnlMR1E5Y2lnME1pa3NkVDFzTGtGeWNtRjVRblZtWm1WeUxHYzliQzVFWVhSaFZtbGxkeXhvUFc4dVFVSldKaVp3TG1selZtbGxkeXg1UFhVdWNISnZkRzkwZVhCbExuTnNhV05sTEdZOWJ5NVdTVVZYTEcwOUowRnljbUY1UW5WbVptVnlKenR1S0c0dVJ5dHVMbGNyYmk1R0tpaHdJVDA5ZFNrc2UwRnljbUY1UW5WbVptVnlPblY5S1N4dUtHNHVVeXR1TGtZcUlXOHVRMDlPVTFSU0xHMHNlMmx6Vm1sbGR6cG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdhQ1ltYUNobEtYeDhZeWhsS1NZbVppQnBiaUJsZlgwcExHNG9iaTVRSzI0dVZTdHVMa1lxY2lnMUtTaG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpRnVaWGNnZFNneUtTNXpiR2xqWlNneExIWnZhV1FnTUNrdVlubDBaVXhsYm1kMGFIMHBMRzBzZTNOc2FXTmxPbVoxYm1OMGFXOXVLR1VzZENsN2FXWW9lU0U5UFhadmFXUWdNQ1ltZEQwOVBYWnZhV1FnTUNseVpYUjFjbTRnZVM1allXeHNLR0VvZEdocGN5a3NaU2s3Wm05eUtIWmhjaUJ5UFdFb2RHaHBjeWt1WW5sMFpVeGxibWQwYUN4dVBYTW9aU3h5S1N4dlBYTW9kbTlwWkNBd1BUMDlkRDl5T25Rc2Npa3NiRDF1Wlhjb1pDaDBhR2x6TEhVcEtTaHBLRzh0YmlrcExHTTlibVYzSUdjb2RHaHBjeWtzY0QxdVpYY2daeWhzS1N4b1BUQTdianh2T3lsd0xuTmxkRlZwYm5RNEtHZ3JLeXhqTG1kbGRGVnBiblE0S0c0ckt5a3BPM0psZEhWeWJpQnNmWDBwTEhJb05ETXBLRzBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3WlM1bGVIQnZjblJ6UFhJb05ERXBLQ2R1WVhScGRtVXRablZ1WTNScGIyNHRkRzh0YzNSeWFXNW5KeXhHZFc1amRHbHZiaTUwYjFOMGNtbHVaeWw5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHR5S0RFMUtTZ25TVzUwT0Njc01TeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdablZ1WTNScGIyNG9kQ3h5TEc0cGUzSmxkSFZ5YmlCbEtIUm9hWE1zZEN4eUxHNHBmWDBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWczS1N4dlBYSW9NaWtzYkQxeUtESTJLVHRsTG1WNGNHOXlkSE05Y2lnNEtUOVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3pwbWRXNWpkR2x2YmlobExIUXBlMjhvWlNrN1ptOXlLSFpoY2lCeUxHRTliQ2gwS1N4elBXRXViR1Z1WjNSb0xHTTlNRHR6UG1NN0tXNHVaaWhsTEhJOVlWdGpLeXRkTEhSYmNsMHBPM0psZEhWeWJpQmxmWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBYSW9NVEEyS1R0bExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBLWHR5WlhSMWNtNGdibVYzS0c0b1pTa3BLSFFwZlgwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTVNrc2J6MXlLRGMxS1N4c1BYSW9OQ2tvSjNOd1pXTnBaWE1uS1R0bExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhRN2NtVjBkWEp1SUc4b1pTa21KaWgwUFdVdVkyOXVjM1J5ZFdOMGIzSXNKMloxYm1OMGFXOXVKejA5ZEhsd1pXOW1JSFFtSmloMFBUMDlRWEp5WVhsOGZHOG9kQzV3Y205MGIzUjVjR1VwS1NZbUtIUTlkbTlwWkNBd0tTeHVLSFFwSmlZb2REMTBXMnhkTEc1MWJHdzlQVDEwSmlZb2REMTJiMmxrSURBcEtTa3NkbTlwWkNBd1BUMDlkRDlCY25KaGVUcDBmWDBzWm5WdVkzUnBiMjRvWlN4MExISXBleWQxYzJVZ2MzUnlhV04wSnp0MllYSWdiajF5S0RNNEtTeHZQWElvTWpFcExHdzljaWd6TWlrc1lUMTdmVHR5S0RrcEtHRXNjaWcwS1NnbmFYUmxjbUYwYjNJbktTeG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6ZlNrc1pTNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ3h5S1h0bExuQnliM1J2ZEhsd1pUMXVLR0VzZTI1bGVIUTZieWd4TEhJcGZTa3NiQ2hsTEhRckp5QkpkR1Z5WVhSdmNpY3BmWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM0lvTVRVcEtDZFZhVzUwT0Njc01TeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdablZ1WTNScGIyNG9kQ3h5TEc0cGUzSmxkSFZ5YmlCbEtIUm9hWE1zZEN4eUxHNHBmWDBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3Y2lneE5Ta29KMVZwYm5RNEp5d3hMR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWgwTEhJc2JpbDdjbVYwZFhKdUlHVW9kR2hwY3l4MExISXNiaWw5ZlN3aE1DbDlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdHlLREUxS1NnblNXNTBNVFluTERJc1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtIUXNjaXh1S1h0eVpYUjFjbTRnWlNoMGFHbHpMSFFzY2l4dUtYMTlLWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM0lvTVRVcEtDZFZhVzUwTVRZbkxESXNablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1oxYm1OMGFXOXVLSFFzY2l4dUtYdHlaWFIxY200Z1pTaDBhR2x6TEhRc2NpeHVLWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNJb01UVXBLQ2RKYm5Rek1pY3NOQ3htZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWm5WdVkzUnBiMjRvZEN4eUxHNHBlM0psZEhWeWJpQmxLSFJvYVhNc2RDeHlMRzRwZlgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2NpZ3hOU2tvSjFWcGJuUXpNaWNzTkN4bWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1puVnVZM1JwYjI0b2RDeHlMRzRwZTNKbGRIVnliaUJsS0hSb2FYTXNkQ3h5TEc0cGZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdjaWd4TlNrb0owWnNiMkYwTXpJbkxEUXNablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1oxYm1OMGFXOXVLSFFzY2l4dUtYdHlaWFIxY200Z1pTaDBhR2x6TEhRc2NpeHVLWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNJb01UVXBLQ2RHYkc5aGREWTBKeXc0TEdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmloMExISXNiaWw3Y21WMGRYSnVJR1VvZEdocGN5eDBMSElzYmlsOWZTbDlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYc25kWE5sSUhOMGNtbGpkQ2M3ZG1GeUlHNDljaWczT1Nrc2J6MXlLREkzS1N4c1BTZE5ZWEFuTzJVdVpYaHdiM0owY3oxeUtEUTNLU2hzTEdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCbEtIUm9hWE1zTUR4aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUDJGeVozVnRaVzUwYzFzd1hUcDJiMmxrSURBcGZYMHNlMmRsZERwbWRXNWpkR2x2YmlobEtYdDJZWElnZEQxdUxtZGxkRVZ1ZEhKNUtHOG9kR2hwY3l4c0tTeGxLVHR5WlhSMWNtNGdkQ1ltZEM1MmZTeHpaWFE2Wm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200Z2JpNWtaV1lvYnloMGFHbHpMR3dwTERBOVBUMWxQekE2WlN4MEtYMTlMRzRzSVRBcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lneEtTeHZQWElvT0RFcExuTmxkRHRsTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCc0xHRTlkQzVqYjI1emRISjFZM1J2Y2p0eVpYUjFjbTRnWVNFOVBYSW1KaWRtZFc1amRHbHZiaWM5UFhSNWNHVnZaaUJoSmlZb2JEMWhMbkJ5YjNSdmRIbHdaU2toUFQxeUxuQnliM1J2ZEhsd1pTWW1iaWhzS1NZbWJ5WW1ieWhsTEd3cExHVjlmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdKM1Z6WlNCemRISnBZM1FuTzNaaGNpQnVQWElvTnprcExHODljaWd5Tnlrc2JEMG5VMlYwSnp0bExtVjRjRzl5ZEhNOWNpZzBOeWtvYkN4bWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z1pTaDBhR2x6TERBOFlYSm5kVzFsYm5SekxteGxibWQwYUQ5aGNtZDFiV1Z1ZEhOYk1GMDZkbTlwWkNBd0tYMTlMSHRoWkdRNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHNHVaR1ZtS0c4b2RHaHBjeXhzS1N4bFBUQTlQVDFsUHpBNlpTeGxLWDE5TEc0cGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN0ozVnpaU0J6ZEhKcFkzUW5PM1poY2lCdUxHODljaWd6S1N4c1BYSW9NemtwS0RBcExHRTljaWd4Tnlrc2N6MXlLREU1S1N4cFBYSW9PRElwTEdNOWNpZzRNeWtzY0QxeUtERXBMR1E5Y2lneU55a3NkVDF5S0RJM0tTeG5QU0Z2TGtGamRHbDJaVmhQWW1wbFkzUW1KaWRCWTNScGRtVllUMkpxWldOMEoybHVJRzhzYUQwblYyVmhhMDFoY0Njc2VUMXpMbWRsZEZkbFlXc3NaajFQWW1wbFkzUXVhWE5GZUhSbGJuTnBZbXhsTEcwOVl5NTFabk4wYjNKbExFVTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR1VvZEdocGN5d3dQR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZy9ZWEpuZFcxbGJuUnpXekJkT25admFXUWdNQ2w5ZlN4NFBYdG5aWFE2Wm5WdVkzUnBiMjRvWlNsN2FXWW9jQ2hsS1NsN2RtRnlJSFE5ZVNobEtUdHlaWFIxY200aE1EMDlQWFEvYlNoa0tIUm9hWE1zYUNrcExtZGxkQ2hsS1RwMFAzUmJkR2hwY3k1ZmFWMDZkbTlwWkNBd2ZYMHNjMlYwT21aMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlHTXVaR1ZtS0dRb2RHaHBjeXhvS1N4bExIUXBmWDBzWHoxbExtVjRjRzl5ZEhNOWNpZzBOeWtvYUN4RkxIZ3NZeXdoTUN3aE1DazdkU1ltWnlZbUtHNDlZeTVuWlhSRGIyNXpkSEoxWTNSdmNpaEZMR2dwTEdrb2JpNXdjbTkwYjNSNWNHVXNlQ2tzY3k1T1JVVkVQU0V3TEd3b1d5ZGtaV3hsZEdVbkxDZG9ZWE1uTENkblpYUW5MQ2R6WlhRblhTeG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMWZMbkJ5YjNSdmRIbHdaU3h5UFhSYlpWMDdZU2gwTEdVc1puVnVZM1JwYjI0b2RDeHZLWHRwWmlod0tIUXBKaVloWmloMEtTbDdkR2hwY3k1ZlpueDhLSFJvYVhNdVgyWTlibVYzSUc0cE8zWmhjaUJzUFhSb2FYTXVYMlpiWlYwb2RDeHZLVHR5WlhSMWNtNG5jMlYwSnowOVpUOTBhR2x6T214OWNtVjBkWEp1SUhJdVkyRnNiQ2gwYUdsekxIUXNieWw5S1gwcEtYMHNablZ1WTNScGIyNG9aU3gwTEhJcGV5ZDFjMlVnYzNSeWFXTjBKenQyWVhJZ2JqMXlLRGd6S1N4dlBYSW9NamNwTEd3OUoxZGxZV3RUWlhRbk8zSW9ORGNwS0d3c1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHVW9kR2hwY3l3d1BHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnL1lYSm5kVzFsYm5Seld6QmRPblp2YVdRZ01DbDlmU3g3WVdSa09tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnVMbVJsWmlodktIUm9hWE1zYkNrc1pTd2hNQ2w5ZlN4dUxDRXhMQ0V3S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrc2J6MXlLREkwS1N4c1BYSW9NaWtzWVQwb2NpZ3pLUzVTWldac1pXTjBmSHg3ZlNrdVlYQndiSGtzY3oxR2RXNWpkR2x2Ymk1aGNIQnNlVHR1S0c0dVV5dHVMa1lxSVhJb05Ta29ablZ1WTNScGIyNG9LWHRoS0daMWJtTjBhVzl1S0NsN2ZTbDlLU3duVW1WbWJHVmpkQ2NzZTJGd2NHeDVPbVoxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxdktHVXBMR2s5YkNoeUtUdHlaWFIxY200Z1lUOWhLRzRzZEN4cEtUcHpMbU5oYkd3b2JpeDBMR2twZlgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lnd0tTeHZQWElvTXpncExHdzljaWd5TkNrc1lUMXlLRElwTEhNOWNpZ3hLU3hwUFhJb05Ta3NZejF5S0RFeU15a3NjRDBvY2lnektTNVNaV1pzWldOMGZIeDdmU2t1WTI5dWMzUnlkV04wTEdROWFTaG1kVzVqZEdsdmJpZ3BlMloxYm1OMGFXOXVJR1VvS1h0OWNtVjBkWEp1SVNod0tHWjFibU4wYVc5dUtDbDdmU3hiWFN4bEtXbHVjM1JoYm1ObGIyWWdaU2w5S1N4MVBTRnBLR1oxYm1OMGFXOXVLQ2w3Y0NobWRXNWpkR2x2YmlncGUzMHBmU2s3YmlodUxsTXJiaTVHS2loa2ZIeDFLU3duVW1WbWJHVmpkQ2NzZTJOdmJuTjBjblZqZERwbWRXNWpkR2x2YmlobExIUXBlMndvWlNrc1lTaDBLVHQyWVhJZ2NqMHpQbUZ5WjNWdFpXNTBjeTVzWlc1bmRHZy9aVHBzS0dGeVozVnRaVzUwYzFzeVhTazdhV1lvZFNZbUlXUXBjbVYwZFhKdUlIQW9aU3gwTEhJcE8ybG1LR1U5UFhJcGUzTjNhWFJqYUNoMExteGxibWQwYUNsN1kyRnpaU0F3T25KbGRIVnliaUJ1WlhjZ1pUdGpZWE5sSURFNmNtVjBkWEp1SUc1bGR5QmxLSFJiTUYwcE8yTmhjMlVnTWpweVpYUjFjbTRnYm1WM0lHVW9kRnN3WFN4MFd6RmRLVHRqWVhObElETTZjbVYwZFhKdUlHNWxkeUJsS0hSYk1GMHNkRnN4WFN4MFd6SmRLVHRqWVhObElEUTZjbVYwZFhKdUlHNWxkeUJsS0hSYk1GMHNkRnN4WFN4MFd6SmRMSFJiTTEwcE8zMTJZWElnYmoxYmJuVnNiRjA3Y21WMGRYSnVJRzR1Y0hWemFDNWhjSEJzZVNodUxIUXBMRzVsZHloakxtRndjR3g1S0dVc2Jpa3BmWFpoY2lCcFBYSXVjSEp2ZEc5MGVYQmxMR2M5YnloektHa3BQMms2VDJKcVpXTjBMbkJ5YjNSdmRIbHdaU2tzYUQxR2RXNWpkR2x2Ymk1aGNIQnNlUzVqWVd4c0tHVXNaeXgwS1R0eVpYUjFjbTRnY3lob0tUOW9PbWQ5ZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1hzbmRYTmxJSE4wY21samRDYzdkbUZ5SUc0OWNpZ3lOQ2tzYnoxeUtERXBMR3c5Y2lnNE5Da3NZVDFiWFM1emJHbGpaU3h6UFh0OUxHazlablZ1WTNScGIyNG9aU3gwTEhJcGUybG1LQ0VvZENCcGJpQnpLU2w3Wm05eUtIWmhjaUJ2UFZ0ZExHNDlNRHR1UEhRN2Jpc3JLVzliYmwwOUoyRmJKeXR1S3lkZEp6dHpXM1JkUFVaMWJtTjBhVzl1S0NkR0xHRW5MQ2R5WlhSMWNtNGdibVYzSUVZb0p5dHZMbXB2YVc0b0p5d25LU3NuS1NjcGZYSmxkSFZ5YmlCelczUmRLR1VzY2lsOU8yVXVaWGh3YjNKMGN6MUdkVzVqZEdsdmJpNWlhVzVrZkh4bWRXNWpkR2x2YmlobEtYdDJZWElnZEQxdUtIUm9hWE1wTEhJOVlTNWpZV3hzS0dGeVozVnRaVzUwY3l3eEtTeHpQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHNDljaTVqYjI1allYUW9ZUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5a3BPM0psZEhWeWJpQjBhR2x6SUdsdWMzUmhibU5sYjJZZ2N6OXBLSFFzYmk1c1pXNW5kR2dzYmlrNmJDaDBMRzRzWlNsOU8zSmxkSFZ5YmlCdktIUXVjSEp2ZEc5MGVYQmxLU1ltS0hNdWNISnZkRzkwZVhCbFBYUXVjSEp2ZEc5MGVYQmxLU3h6Zlgwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTnlrc2J6MXlLREFwTEd3OWNpZ3lLU3hoUFhJb016WXBPMjhvYnk1VEsyOHVSaXB5S0RVcEtHWjFibU4wYVc5dUtDbDdVbVZtYkdWamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodUxtWW9lMzBzTVN4N2RtRnNkV1U2TVgwcExERXNlM1poYkhWbE9qSjlLWDBwTENkU1pXWnNaV04wSnl4N1pHVm1hVzVsVUhKdmNHVnlkSGs2Wm5WdVkzUnBiMjRvWlN4MExISXBlMndvWlNrc2REMWhLSFFzSVRBcExHd29jaWs3ZEhKNWUzSmxkSFZ5YmlCdUxtWW9aU3gwTEhJcExDRXdmV05oZEdOb0tIUXBlM0psZEhWeWJpRXhmWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrc2J6MXlLREUyS1M1bUxHdzljaWd5S1R0dUtHNHVVeXduVW1WbWJHVmpkQ2NzZTJSbGJHVjBaVkJ5YjNCbGNuUjVPbVoxYm1OMGFXOXVLR1VzZENsN2RtRnlJSEk5Ynloc0tHVXBMSFFwTzNKbGRIVnliaUJ5SmlZaGNpNWpiMjVtYVdkMWNtRmliR1UvSVRFNlpHVnNaWFJsSUdWYmRGMTlmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHRtZFc1amRHbHZiaUJ1S0dVc2RDbDdkbUZ5SUhJc2N5eHdQVE0rWVhKbmRXMWxiblJ6TG14bGJtZDBhRDlsT21GeVozVnRaVzUwYzFzeVhUdHlaWFIxY200Z1l5aGxLVDA5UFhBL1pWdDBYVG9vY2oxdkxtWW9aU3gwS1NrL1lTaHlMQ2QyWVd4MVpTY3BQM0l1ZG1Gc2RXVTZkbTlwWkNBd1BUMDljaTVuWlhRL2RtOXBaQ0F3T25JdVoyVjBMbU5oYkd3b2NDazZhU2h6UFd3b1pTa3BQMjRvY3l4MExIQXBPblp2YVdRZ01IMTJZWElnYnoxeUtERTJLU3hzUFhJb016UXBMR0U5Y2lneE1Da3NjejF5S0RBcExHazljaWd4S1N4alBYSW9NaWs3Y3loekxsTXNKMUpsWm14bFkzUW5MSHRuWlhRNmJuMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3hOaWtzYnoxeUtEQXBMR3c5Y2lneUtUdHZLRzh1VXl3blVtVm1iR1ZqZENjc2UyZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2pwbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQnVMbVlvYkNobEtTeDBLWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrc2J6MXlLRE0wS1N4c1BYSW9NaWs3YmlodUxsTXNKMUpsWm14bFkzUW5MSHRuWlhSUWNtOTBiM1I1Y0dWUFpqcG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdieWhzS0dVcEtYMTlLWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBYSW9NQ2s3YmlodUxsTXNKMUpsWm14bFkzUW5MSHRvWVhNNlpuVnVZM1JwYjI0b1pTeDBLWHR5WlhSMWNtNGdkQ0JwYmlCbGZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3dLU3h2UFhJb01pa3NiRDFQWW1wbFkzUXVhWE5GZUhSbGJuTnBZbXhsTzI0b2JpNVRMQ2RTWldac1pXTjBKeXg3YVhORmVIUmxibk5wWW14bE9tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnZLR1VwTENGc2ZIeHNLR1VwZlgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lnd0tUdHVLRzR1VXl3blVtVm1iR1ZqZENjc2UyOTNia3RsZVhNNmNpZzROU2w5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrc2J6MXlLRElwTEd3OVQySnFaV04wTG5CeVpYWmxiblJGZUhSbGJuTnBiMjV6TzI0b2JpNVRMQ2RTWldac1pXTjBKeXg3Y0hKbGRtVnVkRVY0ZEdWdWMybHZibk02Wm5WdVkzUnBiMjRvWlNsN2J5aGxLVHQwY25sN2NtVjBkWEp1SUd3bUptd29aU2tzSVRCOVkyRjBZMmdvZENsN2NtVjBkWEp1SVRGOWZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdablZ1WTNScGIyNGdiaWhsTEhRc2NpbDdkbUZ5SUdrc2RTeG5QVFErWVhKbmRXMWxiblJ6TG14bGJtZDBhRDlsT21GeVozVnRaVzUwYzFzelhTeG9QV3d1Wmlod0tHVXBMSFFwTzJsbUtDRm9LWHRwWmloa0tIVTlZU2hsS1NrcGNtVjBkWEp1SUc0b2RTeDBMSElzWnlrN2FEMWpLREFwZldsbUtITW9hQ3duZG1Gc2RXVW5LU2w3YVdZb0lURTlQVDFvTG5keWFYUmhZbXhsZkh3aFpDaG5LU2x5WlhSMWNtNGhNVHRwWmlocFBXd3VaaWhuTEhRcEtYdHBaaWhwTG1kbGRIeDhhUzV6WlhSOGZDRXhQVDA5YVM1M2NtbDBZV0pzWlNseVpYUjFjbTRoTVR0cExuWmhiSFZsUFhJc2J5NW1LR2NzZEN4cEtYMWxiSE5sSUc4dVppaG5MSFFzWXlnd0xISXBLVHR5WlhSMWNtNGhNSDF5WlhSMWNtNGdhQzV6WlhRaFBUMTJiMmxrSURBbUppaG9Mbk5sZEM1allXeHNLR2NzY2lrc0lUQXBmWFpoY2lCdlBYSW9OeWtzYkQxeUtERTJLU3hoUFhJb016UXBMSE05Y2lneE1Da3NhVDF5S0RBcExHTTljaWd5TVNrc2NEMXlLRElwTEdROWNpZ3hLVHRwS0drdVV5d25VbVZtYkdWamRDY3NlM05sZERwdWZTbDlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtEQXBMRzg5Y2lnNE1TazdieVltYmlodUxsTXNKMUpsWm14bFkzUW5MSHR6WlhSUWNtOTBiM1I1Y0dWUFpqcG1kVzVqZEdsdmJpaGxMSFFwZTI4dVkyaGxZMnNvWlN4MEtUdDBjbmw3Y21WMGRYSnVJRzh1YzJWMEtHVXNkQ2tzSVRCOVkyRjBZMmdvZENsN2NtVjBkWEp1SVRGOWZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdKM1Z6WlNCemRISnBZM1FuTzNaaGNpQnVMRzhzYkN4aExITTljaWd5TXlrc2FUMXlLRE1wTEdNOWNpZ3hOQ2tzY0QxeUtEUTBLU3hrUFhJb01Da3NkVDF5S0RFcExHYzljaWd5TkNrc2FEMXlLREk1S1N4NVBYSW9ORFlwTEdZOWNpZzBNaWtzYlQxeUtEWXlLUzV6WlhRc1JUMXlLREV6Tmlrb0tTeDRQWElvT0RZcExGODljaWd4TXpjcExGTTljaWcwT1Nrc1ZEMXlLREV6T0Nrc1lqMG5VSEp2YldselpTY3NVRDFwTGxSNWNHVkZjbkp2Y2l4UFBXa3VjSEp2WTJWemN5eDJQVThtSms4dWRtVnljMmx2Ym5Nc1NUMTJKaVoyTG5ZNGZId25KeXhCUFdsYllsMHNVajBuY0hKdlkyVnpjeWM5UFhBb1R5a3NhejFtZFc1amRHbHZiaWdwZTMwc1REMXZQWGd1Wml4R1BTRWhablZ1WTNScGIyNG9LWHQwY25sN2RtRnlJR1U5UVM1eVpYTnZiSFpsS0RFcExIUTlLR1V1WTI5dWMzUnlkV04wYjNJOWUzMHBXM0lvTkNrb0ozTndaV05wWlhNbktWMDlablZ1WTNScGIyNG9aU2w3WlNockxHc3BmVHR5WlhSMWNtNG9Vbng4SjJaMWJtTjBhVzl1SnowOWRIbHdaVzltSUZCeWIyMXBjMlZTWldwbFkzUnBiMjVGZG1WdWRDa21KbVV1ZEdobGJpaHJLV2x1YzNSaGJtTmxiMllnZENZbU1DRTlQVWt1YVc1a1pYaFBaaWduTmk0Mkp5a21KaTB4UFQwOVV5NXBibVJsZUU5bUtDZERhSEp2YldVdk5qWW5LWDFqWVhSamFDaDBLWHQ5ZlNncExFNDlablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTdjbVYwZFhKdUlIVW9aU2ttSmlkbWRXNWpkR2x2YmljOVBYUjVjR1Z2WmloMFBXVXVkR2hsYmlrbUpuUjlMRTA5Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWdoWlM1ZmJpbDdaUzVmYmowaE1EdDJZWElnY2oxbExsOWpPMFVvWm5WdVkzUnBiMjRvS1h0bWIzSW9kbUZ5SUc0OVpTNWZkaXh2UFRFOVBXVXVYM01zYkQwd0xHRTlablZ1WTNScGIyNG9kQ2w3ZG1GeUlISXNiQ3hoTEhNOWJ6OTBMbTlyT25RdVptRnBiQ3hwUFhRdWNtVnpiMngyWlN4alBYUXVjbVZxWldOMExIQTlkQzVrYjIxaGFXNDdkSEo1ZTNNL0tDRnZKaVlvTWowOVpTNWZhQ1ltUXlobEtTeGxMbDlvUFRFcExDRXdQVDA5Y3o5eVBXNDZLSEFtSm5BdVpXNTBaWElvS1N4eVBYTW9iaWtzY0NZbUtIQXVaWGhwZENncExHRTlJVEFwS1N4eVBUMDlkQzV3Y205dGFYTmxQMk1vVUNnblVISnZiV2x6WlMxamFHRnBiaUJqZVdOc1pTY3BLVG9vYkQxT0tISXBLVDlzTG1OaGJHd29jaXhwTEdNcE9ta29jaWtwT21Nb2JpbDlZMkYwWTJnb2RDbDdjQ1ltSVdFbUpuQXVaWGhwZENncExHTW9kQ2w5ZlR0eUxteGxibWQwYUQ1c095bGhLSEpiYkNzclhTazdaUzVmWXoxYlhTeGxMbDl1UFNFeExIUW1KaUZsTGw5b0ppWjNLR1VwZlNsOWZTeDNQV1oxYm1OMGFXOXVLR1VwZTIwdVkyRnNiQ2hwTEdaMWJtTjBhVzl1S0NsN2RtRnlJSFFzY2l4dUxHODlaUzVmZGl4c1BVUW9aU2s3YVdZb2JDWW1LSFE5WHlobWRXNWpkR2x2YmlncGUxSS9UeTVsYldsMEtDZDFibWhoYm1Sc1pXUlNaV3BsWTNScGIyNG5MRzhzWlNrNktISTlhUzV2Ym5WdWFHRnVaR3hsWkhKbGFtVmpkR2x2YmlrL2NpaDdjSEp2YldselpUcGxMSEpsWVhOdmJqcHZmU2s2S0c0OWFTNWpiMjV6YjJ4bEtTWW1iaTVsY25KdmNpWW1iaTVsY25KdmNpZ25WVzVvWVc1a2JHVmtJSEJ5YjIxcGMyVWdjbVZxWldOMGFXOXVKeXh2S1gwcExHVXVYMmc5VW54OFJDaGxLVDh5T2pFcExHVXVYMkU5ZG05cFpDQXdMR3dtSm5RdVpTbDBhSEp2ZHlCMExuWjlLWDBzUkQxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z01TRTlQV1V1WDJnbUpqQTlQVDBvWlM1ZllYeDhaUzVmWXlrdWJHVnVaM1JvZlN4RFBXWjFibU4wYVc5dUtHVXBlMjB1WTJGc2JDaHBMR1oxYm1OMGFXOXVLQ2w3ZG1GeUlIUTdVajlQTG1WdGFYUW9KM0psYW1WamRHbHZia2hoYm1Sc1pXUW5MR1VwT2loMFBXa3ViMjV5WldwbFkzUnBiMjVvWVc1a2JHVmtLU1ltZENoN2NISnZiV2x6WlRwbExISmxZWE52YmpwbExsOTJmU2w5S1gwc2FqMW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMTBhR2x6TzNRdVgyUjhmQ2gwTGw5a1BTRXdMSFE5ZEM1ZmQzeDhkQ3gwTGw5MlBXVXNkQzVmY3oweUxDRjBMbDloSmlZb2RDNWZZVDEwTGw5akxuTnNhV05sS0NrcExFMG9kQ3doTUNrcGZTeFpQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBMSEk5ZEdocGN6dHBaaWdoY2k1ZlpDbDdjaTVmWkQwaE1DeHlQWEl1WDNkOGZISTdkSEo1ZTJsbUtISTlQVDFsS1hSb2NtOTNJRkFvSjFCeWIyMXBjMlVnWTJGdVhGd25kQ0JpWlNCeVpYTnZiSFpsWkNCcGRITmxiR1luS1Rzb2REMU9LR1VwS1Q5RktHWjFibU4wYVc5dUtDbDdkbUZ5SUc0OWUxOTNPbklzWDJRNklURjlPM1J5ZVh0MExtTmhiR3dvWlN4aktGa3NiaXd4S1N4aktHb3NiaXd4S1NsOVkyRjBZMmdvZENsN2FpNWpZV3hzS0c0c2RDbDlmU2s2S0hJdVgzWTlaU3h5TGw5elBURXNUU2h5TENFeEtTbDlZMkYwWTJnb2RDbDdhaTVqWVd4c0tIdGZkenB5TEY5a09pRXhmU3gwS1gxOWZUdEdmSHdvUVQxbWRXNWpkR2x2YmlobEtYdG9LSFJvYVhNc1FTeGlMQ2RmYUNjcExHY29aU2tzYmk1allXeHNLSFJvYVhNcE8zUnllWHRsS0dNb1dTeDBhR2x6TERFcExHTW9haXgwYUdsekxERXBLWDFqWVhSamFDaGxLWHRxTG1OaGJHd29kR2hwY3l4bEtYMTlMRzQ5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbDlqUFZ0ZExIUm9hWE11WDJFOWRtOXBaQ0F3TEhSb2FYTXVYM005TUN4MGFHbHpMbDlrUFNFeExIUm9hWE11WDNZOWRtOXBaQ0F3TEhSb2FYTXVYMmc5TUN4MGFHbHpMbDl1UFNFeGZTeHVMbkJ5YjNSdmRIbHdaVDF5S0RJNEtTaEJMbkJ5YjNSdmRIbHdaU3g3ZEdobGJqcG1kVzVqZEdsdmJpaGxMSFFwZTNaaGNpQnlQVXdvWmloMGFHbHpMRUVwS1R0eVpYUjFjbTRnY2k1dmF6MG5ablZ1WTNScGIyNG5JVDEwZVhCbGIyWWdaWHg4WlN4eUxtWmhhV3c5SjJaMWJtTjBhVzl1SnowOWRIbHdaVzltSUhRbUpuUXNjaTVrYjIxaGFXNDlVajlQTG1SdmJXRnBianAyYjJsa0lEQXNkR2hwY3k1Zll5NXdkWE5vS0hJcExIUm9hWE11WDJFbUpuUm9hWE11WDJFdWNIVnphQ2h5S1N4MGFHbHpMbDl6SmlaTktIUm9hWE1zSVRFcExISXVjSEp2YldselpYMHNZMkYwWTJnNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlIUm9hWE11ZEdobGJpaDJiMmxrSURBc1pTbDlmU2tzYkQxbWRXNWpkR2x2YmlncGUzWmhjaUJsUFc1bGR5QnVPM1JvYVhNdWNISnZiV2x6WlQxbExIUm9hWE11Y21WemIyeDJaVDFqS0Zrc1pTd3hLU3gwYUdsekxuSmxhbVZqZEQxaktHb3NaU3d4S1gwc2VDNW1QVXc5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdVOVBUMUJmSHhsUFQwOVlUOXVaWGNnYkNobEtUcHZLR1VwZlNrc1pDaGtMa2NyWkM1WEsyUXVSaW9oUml4N1VISnZiV2x6WlRwQmZTa3NjaWd6TWlrb1FTeGlLU3h5S0RRektTaGlLU3hoUFhJb01qQXBXMkpkTEdRb1pDNVRLMlF1UmlvaFJpeGlMSHR5WldwbFkzUTZablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlUQ2gwYUdsektTeHlQWFF1Y21WcVpXTjBPM0psZEhWeWJpQnlLR1VwTEhRdWNISnZiV2x6WlgxOUtTeGtLR1F1VXl0a0xrWXFLSE44ZkNGR0tTeGlMSHR5WlhOdmJIWmxPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJVS0hNbUpuUm9hWE05UFQxaFAwRTZkR2hwY3l4bEtYMTlLU3hrS0dRdVV5dGtMa1lxSVNoR0ppWnlLRFExS1NobWRXNWpkR2x2YmlobEtYdEJMbUZzYkNobEtWc25ZMkYwWTJnblhTaHJLWDBwS1N4aUxIdGhiR3c2Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5ZEdocGN5eHlQVXdvZENrc2JqMXlMbkpsYzI5c2RtVXNiejF5TG5KbGFtVmpkQ3hzUFY4b1puVnVZM1JwYjI0b0tYdDJZWElnY2oxYlhTeHNQVEFzWVQweE8za29aU3doTVN4bWRXNWpkR2x2YmlobEtYdDJZWElnY3oxc0t5c3NhVDBoTVR0eUxuQjFjMmdvZG05cFpDQXdLU3hoS3lzc2RDNXlaWE52YkhabEtHVXBMblJvWlc0b1puVnVZM1JwYjI0b1pTbDdhWHg4S0drOUlUQXNjbHR6WFQxbExDMHRZWHg4YmloeUtTbDlMRzhwZlNrc0xTMWhmSHh1S0hJcGZTazdjbVYwZFhKdUlHd3VaU1ltYnloc0xuWXBMSEl1Y0hKdmJXbHpaWDBzY21GalpUcG1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMTBhR2x6TEhJOVRDaDBLU3h1UFhJdWNtVnFaV04wTEc4OVh5aG1kVzVqZEdsdmJpZ3BlM2tvWlN3aE1TeG1kVzVqZEdsdmJpaGxLWHQwTG5KbGMyOXNkbVVvWlNrdWRHaGxiaWh5TG5KbGMyOXNkbVVzYmlsOUtYMHBPM0psZEhWeWJpQnZMbVVtSm00b2J5NTJLU3h5TG5CeWIyMXBjMlY5ZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RNcExHODljaWcyTWlrdWMyVjBMR3c5Ymk1TmRYUmhkR2x2Yms5aWMyVnlkbVZ5Zkh4dUxsZGxZa3RwZEUxMWRHRjBhVzl1VDJKelpYSjJaWElzWVQxdUxuQnliMk5sYzNNc2N6MXVMbEJ5YjIxcGMyVXNhVDBuY0hKdlkyVnpjeWM5UFhJb016QXBLR0VwTzJVdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlncGUzWmhjaUIwTEhJc1l5eGxQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVXNianRtYjNJb2FTWW1LR1U5WVM1a2IyMWhhVzRwSmlabExtVjRhWFFvS1R0ME95bDdiajEwTG1adUxIUTlkQzV1WlhoME8zUnllWHR1S0NsOVkyRjBZMmdvYmlsN2RHaHliM2NnZEQ5aktDazZjajEyYjJsa0lEQXNibjE5Y2oxMmIybGtJREFzWlNZbVpTNWxiblJsY2lncGZUdHBaaWhwS1dNOVpuVnVZM1JwYjI0b0tYdGhMbTVsZUhSVWFXTnJLR1VwZlR0bGJITmxJR2xtS0d3bUppRW9iaTV1WVhacFoyRjBiM0ltSm00dWJtRjJhV2RoZEc5eUxuTjBZVzVrWVd4dmJtVXBLWHQyWVhJZ2NEMGhNQ3hrUFdSdlkzVnRaVzUwTG1OeVpXRjBaVlJsZUhST2IyUmxLQ2NuS1R0dVpYY2diQ2hsS1M1dlluTmxjblpsS0dRc2UyTm9ZWEpoWTNSbGNrUmhkR0U2SVRCOUtTeGpQV1oxYm1OMGFXOXVLQ2w3WkM1a1lYUmhQWEE5SVhCOWZXVnNjMlVnYVdZb2N5WW1jeTV5WlhOdmJIWmxLWHQyWVhJZ2RUMXpMbkpsYzI5c2RtVW9kbTlwWkNBd0tUdGpQV1oxYm1OMGFXOXVLQ2w3ZFM1MGFHVnVLR1VwZlgxbGJITmxJR005Wm5WdVkzUnBiMjRvS1h0dkxtTmhiR3dvYml4bEtYMDdjbVYwZFhKdUlHWjFibU4wYVc5dUtHVXBlM1poY2lCdVBYdG1ianBsTEc1bGVIUTZkbTlwWkNBd2ZUdHlKaVlvY2k1dVpYaDBQVzRwTEhSOGZDaDBQVzRzWXlncEtTeHlQVzU5Zlgwc1puVnVZM1JwYjI0b1pTbDdaUzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNSeWVYdHlaWFIxY201N1pUb2hNU3gyT21Vb0tYMTlZMkYwWTJnb2RDbDdjbVYwZFhKdWUyVTZJVEFzZGpwMGZYMTlmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3lLU3h2UFhJb01Ta3NiRDF5S0RnMktUdGxMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0cFppaHVLR1VwTEc4b2RDa21KblF1WTI5dWMzUnlkV04wYjNJOVBUMWxLWEpsZEhWeWJpQjBPM1poY2lCeVBXd3VaaWhsS1N4aFBYSXVjbVZ6YjJ4MlpUdHlaWFIxY200Z1lTaDBLU3h5TG5CeWIyMXBjMlY5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3SjNWelpTQnpkSEpwWTNRbk8zWmhjaUJ1UFhJb015a3NiejF5S0RFd0tTeHNQWElvT0Nrc1lUMXlLREFwTEhNOWNpZ3hOeWtzWXoxeUtERTVLUzVMUlZrc2FUMXlLRFVwTEhBOWNpZzBNU2tzWkQxeUtETXlLU3gxUFhJb01qSXBMR2M5Y2lnMEtTeG9QWElvT0RjcExIazljaWd4TkRBcExHWTljaWd4TkRFcExHMDljaWczTlNrc1JUMXlLRElwTEhnOWNpZ3hLU3hmUFhJb01URXBMRk05Y2lnek5pa3NWRDF5S0RJeEtTeGlQWElvTXpncExGQTljaWc0T0Nrc1R6MXlLREUyS1N4MlBYSW9OeWtzU1QxeUtESTJLU3hCUFU4dVppeFNQWFl1Wml4TVBWQXVaaXhHUFc0dVUzbHRZbTlzTEU0OWJpNUtVMDlPTEUwOVRpWW1UaTV6ZEhKcGJtZHBabmtzZHowbmNISnZkRzkwZVhCbEp5eERQV2NvSjE5b2FXUmtaVzRuS1N4RVBXY29KM1J2VUhKcGJXbDBhWFpsSnlrc1dUMTdmUzV3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlN4Q1BYQW9KM041YldKdmJDMXlaV2RwYzNSeWVTY3BMRWM5Y0NnbmMzbHRZbTlzY3ljcExGVTljQ2duYjNBdGMzbHRZbTlzY3ljcExFZzlUMkpxWldOMFczZGRMRmM5SjJaMWJtTjBhVzl1SnowOWRIbHdaVzltSUVZc1ZqMXVMbEZQWW1wbFkzUXNlajBoVm54OElWWmJkMTE4ZkNGV1czZGRMbVpwYm1SRGFHbHNaQ3drUFd3bUpta29ablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdOeUU5WWloU0tIdDlMQ2RoSnl4N1oyVjBPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRklvZEdocGN5d25ZU2NzZTNaaGJIVmxPamQ5S1M1aGZYMHBLUzVoZlNrL1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQVUVvU0N4MEtUdHVKaVprWld4bGRHVWdTRnQwWFN4U0tHVXNkQ3h5S1N4dUppWmxJVDA5U0NZbVVpaElMSFFzYmlsOU9sSXNTejFtZFc1amRHbHZiaWhsS1h0MllYSWdkRDFIVzJWZFBXSW9SbHQzWFNrN2NtVjBkWEp1SUhRdVgyczlaU3gwZlN4eFBWY21KaWR6ZVcxaWIyd25QVDEwZVhCbGIyWWdSaTVwZEdWeVlYUnZjajltZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRuYzNsdFltOXNKejA5ZEhsd1pXOW1JR1Y5T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbElHbHVjM1JoYm1ObGIyWWdSbjBzV0QxbWRXNWpkR2x2YmlobExIUXNjaWw3Y21WMGRYSnVJR1U5UFQxSUppWllLRlVzZEN4eUtTeEZLR1VwTEhROVV5aDBMQ0V3S1N4RktISXBMRzhvUnl4MEtUOG9jaTVsYm5WdFpYSmhZbXhsUHlodktHVXNReWttSm1WYlExMWJkRjBtSmlobFcwTmRXM1JkUFNFeEtTeHlQV0lvY2l4N1pXNTFiV1Z5WVdKc1pUcFVLREFzSVRFcGZTa3BPaWdoYnlobExFTXBKaVpTS0dVc1F5eFVLREVzZTMwcEtTeGxXME5kVzNSZFBTRXdLU3drS0dVc2RDeHlLU2s2VWlobExIUXNjaWw5TEZvOVpuVnVZM1JwYjI0b1pTeDBLWHRGS0dVcE8yWnZjaWgyWVhJZ2NpeHVQV1lvZEQxZktIUXBLU3h2UFRBc1lUMXVMbXhsYm1kMGFEdGhQbTg3S1Znb1pTeHlQVzViYnlzclhTeDBXM0pkS1R0eVpYUjFjbTRnWlgwc1NqMW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMVpMbU5oYkd3b2RHaHBjeXhsUFZNb1pTd2hNQ2twTzNKbGRIVnliaUIwYUdselBUMDlTQ1ltYnloSExHVXBKaVloYnloVkxHVXBQeUV4T25SOGZDRnZLSFJvYVhNc1pTbDhmQ0Z2S0Vjc1pTbDhmRzhvZEdocGN5eERLU1ltZEdocGMxdERYVnRsWFQ5ME9pRXdmU3hSUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvWlQxZktHVXBMSFE5VXloMExDRXdLU3hsSVQwOVNIeDhJVzhvUnl4MEtYeDhieWhWTEhRcEtYdDJZWElnY2oxQktHVXNkQ2s3Y21WMGRYSnVJSEltSm04b1J5eDBLU1ltSVNodktHVXNReWttSm1WYlExMWJkRjBwSmlZb2NpNWxiblZ0WlhKaFlteGxQU0V3S1N4eWZYMHNaV1U5Wm5WdVkzUnBiMjRvWlNsN1ptOXlLSFpoY2lCMExISTlUQ2hmS0dVcEtTeHVQVnRkTEd3OU1EdHlMbXhsYm1kMGFENXNPeWx2S0Vjc2REMXlXMndySzEwcGZIeDBQVDFEZkh4MFBUMWpmSHh1TG5CMWMyZ29kQ2s3Y21WMGRYSnVJRzU5TEhSbFBXWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkQ3h5UFdVOVBUMUlMRzQ5VENoeVAxVTZYeWhsS1Nrc2JEMWJYU3hoUFRBN2JpNXNaVzVuZEdnK1lUc3BieWhITEhROWJsdGhLeXRkS1NZbUtDRnlmSHh2S0Vnc2RDa3BKaVpzTG5CMWMyZ29SMXQwWFNrN2NtVjBkWEp1SUd4OU8xZDhmQ2hHUFdaMWJtTjBhVzl1S0NsN2FXWW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlFWXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZFRlVzFpYjJ3Z2FYTWdibTkwSUdFZ1kyOXVjM1J5ZFdOMGIzSWhKeWs3ZG1GeUlHVTlkU2d3UEdGeVozVnRaVzUwY3k1c1pXNW5kR2cvWVhKbmRXMWxiblJ6V3pCZE9uWnZhV1FnTUNrc2REMW1kVzVqZEdsdmJpaHlLWHQwYUdselBUMDlTQ1ltZEM1allXeHNLRlVzY2lrc2J5aDBhR2x6TEVNcEppWnZLSFJvYVhOYlExMHNaU2ttSmloMGFHbHpXME5kVzJWZFBTRXhLU3drS0hSb2FYTXNaU3hVS0RFc2Npa3BmVHR5WlhSMWNtNGdiQ1ltZWlZbUpDaElMR1VzZTJOdmJtWnBaM1Z5WVdKc1pUb2hNQ3h6WlhRNmRIMHBMRXNvWlNsOUxITW9SbHQzWFN3bmRHOVRkSEpwYm1jbkxHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11WDJ0OUtTeFBMbVk5VVN4MkxtWTlXQ3h5S0RNM0tTNW1QVkF1WmoxbFpTeHlLRFF3S1M1bVBVb3NjaWcwT0NrdVpqMTBaU3hzSmlZaGNpZ3lNeWttSm5Nb1NDd25jSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VuTEVvc0lUQXBMR2d1WmoxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1N5aG5LR1VwS1gwcExHRW9ZUzVISzJFdVZ5dGhMa1lxSVZjc2UxTjViV0p2YkRwR2ZTazdabTl5S0haaGNpQnlaVDFiSjJoaGMwbHVjM1JoYm1ObEp5d25hWE5EYjI1allYUlRjSEpsWVdSaFlteGxKeXduYVhSbGNtRjBiM0luTENkdFlYUmphQ2NzSjNKbGNHeGhZMlVuTENkelpXRnlZMmduTENkemNHVmphV1Z6Snl3bmMzQnNhWFFuTENkMGIxQnlhVzFwZEdsMlpTY3NKM1J2VTNSeWFXNW5WR0ZuSnl3bmRXNXpZMjl3WVdKc1pYTW5YU3h1WlQwd08zSmxMbXhsYm1kMGFENXVaVHNwWnloeVpWdHVaU3NyWFNrN1ptOXlLSFpoY2lCcVBVa29aeTV6ZEc5eVpTa3NiMlU5TUR0cUxteGxibWQwYUQ1dlpUc3BlU2hxVzI5bEt5dGRLVHRoS0dFdVV5dGhMa1lxSVZjc0oxTjViV0p2YkNjc2UyWnZjanBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYnloQ0xHVXJQU2NuS1Q5Q1cyVmRPa0piWlYwOVJpaGxLWDBzYTJWNVJtOXlPbVoxYm1OMGFXOXVLR1VwZTJsbUtDRnhLR1VwS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhsS3ljZ2FYTWdibTkwSUdFZ2MzbHRZbTlzSVNjcE8yWnZjaWgyWVhJZ2RDQnBiaUJDS1dsbUtFSmJkRjA5UFQxbEtYSmxkSFZ5YmlCMGZTeDFjMlZUWlhSMFpYSTZablZ1WTNScGIyNG9LWHQ2UFNFd2ZTeDFjMlZUYVcxd2JHVTZablZ1WTNScGIyNG9LWHQ2UFNFeGZYMHBMR0VvWVM1VEsyRXVSaW9oVnl3blQySnFaV04wSnl4N1kzSmxZWFJsT21aMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlIUTlQVDEyYjJsa0lEQS9ZaWhsS1RwYUtHSW9aU2tzZENsOUxHUmxabWx1WlZCeWIzQmxjblI1T2xnc1pHVm1hVzVsVUhKdmNHVnlkR2xsY3pwYUxHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2pwUkxHZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTTZaV1VzWjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ek9uUmxmU2tzVGlZbVlTaGhMbE1yWVM1R0tpZ2hWM3g4YVNobWRXNWpkR2x2YmlncGUzWmhjaUJsUFVZb0tUdHlaWFIxY200blcyNTFiR3hkSnlFOVRTaGJaVjBwZkh3bmUzMG5JVDFOS0h0aE9tVjlLWHg4SjN0OUp5RTlUU2hQWW1wbFkzUW9aU2twZlNrcExDZEtVMDlPSnl4N2MzUnlhVzVuYVdaNU9tWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkQ3h5TEc0OVcyVmRMRzg5TVR0aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUG04N0tXNHVjSFZ6YUNoaGNtZDFiV1Z1ZEhOYmJ5c3JYU2s3YVdZb2NqMTBQVzViTVYwc0tIZ29kQ2w4ZkhadmFXUWdNQ0U5UFdVcEppWWhjU2hsS1NseVpYUjFjbTRnYlNoMEtYeDhLSFE5Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWduWm5WdVkzUnBiMjRuUFQxMGVYQmxiMllnY2lZbUtIUTljaTVqWVd4c0tIUm9hWE1zWlN4MEtTa3NJWEVvZENrcGNtVjBkWEp1SUhSOUtTeHVXekZkUFhRc1RTNWhjSEJzZVNoT0xHNHBmWDBwTEVaYmQxMWJSRjE4ZkhJb09Ta29SbHQzWFN4RUxFWmJkMTB1ZG1Gc2RXVlBaaWtzWkNoR0xDZFRlVzFpYjJ3bktTeGtLRTFoZEdnc0owMWhkR2duTENFd0tTeGtLRzR1U2xOUFRpd25TbE5QVGljc0lUQXBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3pLU3h2UFhJb01qQXBMR3c5Y2lneU15a3NZVDF5S0RnM0tTeHpQWElvTnlrdVpqdGxMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlieTVUZVcxaWIyeDhmQ2h2TGxONWJXSnZiRDFzUDN0OU9tNHVVM2x0WW05c2ZIeDdmU2s3SjE4blBUMWxMbU5vWVhKQmRDZ3dLWHg4WlNCcGJpQjBmSHh6S0hRc1pTeDdkbUZzZFdVNllTNW1LR1VwZlNsOWZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lneU5pa3NiejF5S0RRNEtTeHNQWElvTkRBcE8yVXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMXVLR1VwTEhJOWJ5NW1PMmxtS0hJcFptOXlLSFpoY2lCaExITTljaWhsS1N4alBXd3VaaXh3UFRBN2N5NXNaVzVuZEdnK2NEc3BZeTVqWVd4c0tHVXNZVDF6VzNBcksxMHBKaVowTG5CMWMyZ29ZU2s3Y21WMGRYSnVJSFI5ZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd4S1N4dlBYSW9NVGtwTG05dVJuSmxaWHBsTzNJb01UTXBLQ2RtY21WbGVtVW5MR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWgwS1h0eVpYUjFjbTRnWlNZbWJpaDBLVDlsS0c4b2RDa3BPblI5ZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RFcExHODljaWd4T1NrdWIyNUdjbVZsZW1VN2NpZ3hNeWtvSjNObFlXd25MR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWgwS1h0eVpYUjFjbTRnWlNZbWJpaDBLVDlsS0c4b2RDa3BPblI5ZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RFcExHODljaWd4T1NrdWIyNUdjbVZsZW1VN2NpZ3hNeWtvSjNCeVpYWmxiblJGZUhSbGJuTnBiMjV6Snl4bWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1puVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlHVW1KbTRvZENrL1pTaHZLSFFwS1RwMGZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3hLVHR5S0RFektTZ25hWE5HY205NlpXNG5MR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJtZFc1amRHbHZiaWgwS1h0eVpYUjFjbTRoYmloMEtYeDhJU0ZsSmlabEtIUXBmWDBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd4S1R0eUtERXpLU2duYVhOVFpXRnNaV1FuTEdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmloMEtYdHlaWFIxY200aGJpaDBLWHg4SVNGbEppWmxLSFFwZlgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lneEtUdHlLREV6S1NnbmFYTkZlSFJsYm5OcFlteGxKeXhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWm5WdVkzUnBiMjRvZENsN2NtVjBkWEp1SVNGdUtIUXBKaVlvSVdWOGZHVW9kQ2twZlgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lneE1Ta3NiejF5S0RFMktTNW1PM0lvTVRNcEtDZG5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJbkxHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJRzhvYmlobEtTeDBLWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTVRJcExHODljaWd6TkNrN2NpZ3hNeWtvSjJkbGRGQnliM1J2ZEhsd1pVOW1KeXhtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYnlodUtHVXBLWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTVRJcExHODljaWd5TmlrN2NpZ3hNeWtvSjJ0bGVYTW5MR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ2S0c0b1pTa3BmWDBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3Y2lneE15a29KMmRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1uTEdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhJb09EZ3BMbVo5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrN2JpaHVMbE1yYmk1R0xDZFBZbXBsWTNRbkxIdGhjM05wWjI0NmNpZzRNaWw5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrN2JpaHVMbE1zSjA5aWFtVmpkQ2NzZTJsek9uSW9PRGtwZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RjcExtWXNiejFHZFc1amRHbHZiaTV3Y205MGIzUjVjR1VzYkQwdlhseGNjeXBtZFc1amRHbHZiaUFvVzE0Z0tGMHFLUzhzWVQwbmJtRnRaU2M3WVNCcGJpQnZmSHh5S0RncEppWnVLRzhzWVN4N1kyOXVabWxuZFhKaFlteGxPaUV3TEdkbGREcG1kVzVqZEdsdmJpZ3BlM1J5ZVh0eVpYUjFjbTRvSnljcmRHaHBjeWt1YldGMFkyZ29iQ2xiTVYxOVkyRjBZMmdvZENsN2NtVjBkWEp1SnlkOWZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3dLU3h2UFhJb01URXBMR3c5Y2lnMktUdHVLRzR1VXl3blUzUnlhVzVuSnl4N2NtRjNPbVoxYm1OMGFXOXVLR1VwZTJadmNpaDJZWElnZEQxdktHVXVjbUYzS1N4eVBXd29kQzVzWlc1bmRHZ3BMRzQ5WVhKbmRXMWxiblJ6TG14bGJtZDBhQ3hoUFZ0ZExITTlNRHR5UG5NN0tXRXVjSFZ6YUNoMFczTXJLMTBySnljcExITThiaVltWVM1d2RYTm9LR0Z5WjNWdFpXNTBjMXR6WFNzbkp5azdjbVYwZFhKdUlHRXVhbTlwYmlnbkp5bDlmU2w5TEdaMWJtTjBhVzl1S0dVc2NpeHVLWHQyWVhJZ2J6MXVLREFwTEd3OWJpZ3pNU2tzWVQxMExITTlVM1J5YVc1bkxtWnliMjFEYjJSbFVHOXBiblE3YnlodkxsTXJieTVHS2lnaElYTW1KakVoUFhNdWJHVnVaM1JvS1N3blUzUnlhVzVuSnl4N1puSnZiVU52WkdWUWIybHVkRHBtZFc1amRHbHZiaWdwZTJadmNpaDJZWElnWlN4MFBWdGRMSEk5WVhKbmRXMWxiblJ6TG14bGJtZDBhQ3h1UFRBN2NqNXVPeWw3YVdZb1pUMHJZWEpuZFcxbGJuUnpXMjRySzEwc2JDaGxMREV4TVRReE1URXBJVDA5WlNsMGFISnZkeUJTWVc1blpVVnljbTl5S0dVckp5QnBjeUJ1YjNRZ1lTQjJZV3hwWkNCamIyUmxJSEJ2YVc1MEp5azdkQzV3ZFhOb0tEWTFOVE0yUG1VL1lTaGxLVHBoS0Nnb1pTMDlOalUxTXpZcFBqNHhNQ2tyTlRVeU9UWXNaU1V4TURJMEt6VTJNekl3S1NsOWNtVjBkWEp1SUhRdWFtOXBiaWduSnlsOWZTbDlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYc25kWE5sSUhOMGNtbGpkQ2M3ZG1GeUlHNDljaWd3S1N4dlBYSW9PVEFwS0NFeEtUdHVLRzR1VUN3blUzUnlhVzVuSnl4N1kyOWtaVkJ2YVc1MFFYUTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzhvZEdocGN5eGxLWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrN2JpaHVMbEFzSjFOMGNtbHVaeWNzZTNKbGNHVmhkRHB5S0RreEtYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdKM1Z6WlNCemRISnBZM1FuTzNaaGNpQnVQWElvTUNrc2J6MXlLRFlwTEd3OWNpZzJNeWtzWVQwbmMzUmhjblJ6VjJsMGFDY3NjejBuSjF0aFhUdHVLRzR1VUN0dUxrWXFjaWcyTkNrb1lTa3NKMU4wY21sdVp5Y3NlM04wWVhKMGMxZHBkR2c2Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5YkNoMGFHbHpMR1VzWVNrc2NqMXZLR1FvTVR4aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUDJGeVozVnRaVzUwYzFzeFhUcDJiMmxrSURBc2RDNXNaVzVuZEdncEtTeHVQV1VySnljN2NtVjBkWEp1SUhRdWMyeHBZMlVvY2l4eUsyNHViR1Z1WjNSb0tUMDlQVzU5ZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1hzbmRYTmxJSE4wY21samRDYzdkbUZ5SUc0OWNpZ3dLU3h2UFhJb05pa3NiRDF5S0RZektTeGhQU2RsYm1SelYybDBhQ2NzY3owbkoxdGhYVHR1S0c0dVVDdHVMa1lxY2lnMk5Da29ZU2tzSjFOMGNtbHVaeWNzZTJWdVpITlhhWFJvT21aMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFd3b2RHaHBjeXhsTEdFcExISTlNVHhoY21kMWJXVnVkSE11YkdWdVozUm9QMkZ5WjNWdFpXNTBjMXN4WFRwMmIybGtJREFzYmoxdktIUXViR1Z1WjNSb0tTeHpQWEk5UFQxMmIybGtJREEvYmpwa0tHOG9jaWtzYmlrc2FUMWxLeWNuTzNKbGRIVnliaUIwTG5Oc2FXTmxLSE10YVM1c1pXNW5kR2dzY3lrOVBUMXBmWDBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3SjNWelpTQnpkSEpwWTNRbk8zWmhjaUJ1UFhJb01Da3NiejF5S0RZektTeHNQU2RwYm1Oc2RXUmxjeWM3YmlodUxsQXJiaTVHS25Jb05qUXBLR3dwTENkVGRISnBibWNuTEh0cGJtTnNkV1JsY3pwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200aElYNXZLSFJvYVhNc1pTeHNLUzVwYm1SbGVFOW1LR1VzTVR4aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUDJGeVozVnRaVzUwYzFzeFhUcDJiMmxrSURBcGZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdjaWc0S1NZbUoyY25JVDB2TGk5bkxtWnNZV2R6SmlaeUtEY3BMbVlvVW1WblJYaHdMbkJ5YjNSdmRIbHdaU3duWm14aFozTW5MSHRqYjI1bWFXZDFjbUZpYkdVNklUQXNaMlYwT25Jb09UTXBmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHNuZFhObElITjBjbWxqZENjN2RtRnlJRzg5Y2lneUtTeHNQWElvTmlrc1lUMXlLRFkxS1N4elBYSW9OVEFwTzNJb05URXBLQ2R0WVhSamFDY3NNU3htZFc1amRHbHZiaWhsTEhRc2NpeHBLWHR5WlhSMWNtNWJablZ1WTNScGIyNG9jaWw3ZG1GeUlHNDlaU2gwYUdsektTeHZQWEk5UFhadmFXUWdNRDkyYjJsa0lEQTZjbHQwWFR0eVpYUjFjbTRnYnowOVBYWnZhV1FnTUQ5dVpYY2dVbVZuUlhod0tISXBXM1JkS0c0ckp5Y3BPbTh1WTJGc2JDaHlMRzRwZlN4bWRXNWpkR2x2YmlobEtYdDJZWElnZEQxcEtISXNaU3gwYUdsektUdHBaaWgwTG1SdmJtVXBjbVYwZFhKdUlIUXVkbUZzZFdVN2RtRnlJR005YnlobEtTeHdQWFJvYVhNckp5YzdhV1lvSVdNdVoyeHZZbUZzS1hKbGRIVnliaUJ6S0dNc2NDazdkbUZ5SUdROVl5NTFibWxqYjJSbE8yTXViR0Z6ZEVsdVpHVjRQVEE3Wm05eUtIWmhjaUIxTEdjOVcxMHNhRDB3TzI1MWJHd2hQVDBvZFQxektHTXNjQ2twT3lsN2RtRnlJRzQ5ZFZzd1hTc25KenRuVzJoZFBXNHNKeWM5UFQxdUppWW9ZeTVzWVhOMFNXNWtaWGc5WVNod0xHd29ZeTVzWVhOMFNXNWtaWGdwTEdRcEtTeG9LeXQ5Y21WMGRYSnVJREE5UFdnL2JuVnNiRHBuZlYxOUtYMHNablZ1WTNScGIyNG9aU3gwTEhJcGV5ZDFjMlVnYzNSeWFXTjBKenQyWVhJZ2JqMXlLRFkyS1R0eUtEQXBLSHQwWVhKblpYUTZKMUpsWjBWNGNDY3NjSEp2ZEc4NklUQXNabTl5WTJWa09tNGhQVDB2TGk4dVpYaGxZMzBzZTJWNFpXTTZibjBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3SjNWelpTQnpkSEpwWTNRbk8zWmhjaUJ1UFhJb01pa3NiejF5S0RFeUtTeHNQWElvTmlrc1lUMXlLREU0S1N4elBYSW9OalVwTEdNOWNpZzFNQ2tzZFQwdlhGd2tLRnNrSm1BblhYeGNYR1JjWEdRL2ZEeGJYajVkS2o0cEwyY3NaejB2WEZ3a0tGc2tKbUFuWFh4Y1hHUmNYR1EvS1M5bkxHZzlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1U5UFQxMmIybGtJREEvWlRwbEt5Y25mVHR5S0RVeEtTZ25jbVZ3YkdGalpTY3NNaXhtZFc1amRHbHZiaWhsTEhRc2NpeDVLWHRtZFc1amRHbHZiaUJtS0dVc2RDeHNMR0VzY3l4dUtYdDJZWElnYVQxc0syVXViR1Z1WjNSb0xHTTlZUzVzWlc1bmRHZ3NaRDFuTzNKbGRIVnliaUIyYjJsa0lEQWhQVDF6SmlZb2N6MXZLSE1wTEdROWRTa3NjaTVqWVd4c0tHNHNaQ3htZFc1amRHbHZiaWh5TEc4cGUzWmhjaUJrTzNOM2FYUmphQ2h2TG1Ob1lYSkJkQ2d3S1NsN1kyRnpaU2NrSnpweVpYUjFjbTRuSkNjN1kyRnpaU2NtSnpweVpYUjFjbTRnWlR0allYTmxKMkFuT25KbGRIVnliaUIwTG5Oc2FXTmxLREFzYkNrN1kyRnpaU2RjWENjbk9uSmxkSFZ5YmlCMExuTnNhV05sS0drcE8yTmhjMlVuUENjNlpEMXpXMjh1YzJ4cFkyVW9NU3d0TVNsZE8ySnlaV0ZyTzJSbFptRjFiSFE2ZG1GeUlIVTlLMjg3YVdZb01EMDlkU2x5WlhSMWNtNGdjanRwWmloMVBtTXBlM1poY2lCdVBYQW9kUzh4TUNrN2NtVjBkWEp1SURBOVBUMXVQM0k2Ymp3OVl6OTJiMmxrSURBOVBUMWhXMjR0TVYwL2J5NWphR0Z5UVhRb01TazZZVnR1TFRGZEsyOHVZMmhoY2tGMEtERXBPbko5WkQxaFczVXRNVjA3ZlhKbGRIVnliaUIyYjJsa0lEQTlQVDFrUHljbk9tUjlLWDF5WlhSMWNtNWJablZ1WTNScGIyNG9iaXh2S1h0MllYSWdiRDFsS0hSb2FYTXBMR0U5YmowOWRtOXBaQ0F3UDNadmFXUWdNRHB1VzNSZE8zSmxkSFZ5YmlCaFBUMDlkbTlwWkNBd1AzSXVZMkZzYkNoc0t5Y25MRzRzYnlrNllTNWpZV3hzS0c0c2JDeHZLWDBzWm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnYnoxNUtISXNaU3gwYUdsekxIUXBPMmxtS0c4dVpHOXVaU2x5WlhSMWNtNGdieTUyWVd4MVpUdDJZWElnY0QxdUtHVXBMSFU5ZEdocGN5c25KeXhuUFNkbWRXNWpkR2x2YmljOVBYUjVjR1Z2WmlCME8yZDhmQ2gwUFhRckp5Y3BPM1poY2lCdFBYQXVaMnh2WW1Gc08ybG1LRzBwZTNaaGNpQkZQWEF1ZFc1cFkyOWtaVHR3TG14aGMzUkpibVJsZUQwd2ZXWnZjaWgyWVhJZ2VDeGZQVnRkT3loNFBXTW9jQ3gxS1N4dWRXeHNJVDA5ZUNrbUppRW9YeTV3ZFhOb0tIZ3BMQ0Z0S1RzcGUzWmhjaUJUUFhoYk1GMHJKeWM3SnljOVBUMVRKaVlvY0M1c1lYTjBTVzVrWlhnOWN5aDFMR3dvY0M1c1lYTjBTVzVrWlhncExFVXBLWDFtYjNJb2RtRnlJRlE5Snljc1lqMHdMRkE5TUR0UVBGOHViR1Z1WjNSb08xQXJLeWw3ZUQxZlcxQmRPMlp2Y2loMllYSWdUejE0V3pCZEt5Y25MSFk5YVNoa0tHRW9lQzVwYm1SbGVDa3NkUzVzWlc1bmRHZ3BMREFwTEVrOVcxMHNRVDB4TzBFOGVDNXNaVzVuZEdnN1FTc3JLVWt1Y0hWemFDaG9LSGhiUVYwcEtUdDJZWElnVWoxNExtZHliM1Z3Y3p0cFppaG5LWHQyWVhJZ2F6MWJUMTB1WTI5dVkyRjBLRWtzZGl4MUtUdFNJVDA5ZG05cFpDQXdKaVpyTG5CMWMyZ29VaWs3ZG1GeUlFdzlkQzVoY0hCc2VTaDJiMmxrSURBc2F5a3JKeWQ5Wld4elpTQk1QV1lvVHl4MUxIWXNTU3hTTEhRcE8zWStQV0ltSmloVUt6MTFMbk5zYVdObEtHSXNkaWtyVEN4aVBYWXJUeTVzWlc1bmRHZ3BmWEpsZEhWeWJpQlVLM1V1YzJ4cFkyVW9ZaWw5WFgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN0ozVnpaU0J6ZEhKcFkzUW5PM1poY2lCdVBYSW9PVElwTEc4OWNpZ3lLU3hzUFhJb05ESXBMR0U5Y2lnMk5Ta3NjejF5S0RZcExHTTljaWcxTUNrc2FUMXlLRFkyS1N4d1BYSW9OU2tzZFQxYlhTNXdkWE5vTEdjOUozTndiR2wwSnl4b1BTZHNaVzVuZEdnbkxIazlKMnhoYzNSSmJtUmxlQ2NzWmowME1qazBPVFkzTWprMUxHMDlJWEFvWm5WdVkzUnBiMjRvS1h0U1pXZEZlSEFvWml3bmVTY3BmU2s3Y2lnMU1Ta29KM053YkdsMEp5d3lMR1oxYm1OMGFXOXVLR1VzZEN4eUxFVXBlM1poY2lCNE8zSmxkSFZ5YmlCNFBTZGpKejA5SjJGaVltTW5XMmRkS0M4b1lpa3FMeWxiTVYxOGZEUWhQU2QwWlhOMEoxdG5YU2d2S0Q4NktTOHNMVEVwVzJoZGZId3lJVDBuWVdJblcyZGRLQzhvUHpwaFlpa3FMeWxiYUYxOGZEUWhQU2N1SjF0blhTZ3ZLQzQvS1NndVB5a3ZLVnRvWFh4OE1Ud25MaWRiWjEwb0x5Z3BLQ2t2S1Z0b1hYeDhKeWRiWjEwb0x5NC9MeWxiYUYwL1puVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2J6MTBhR2x6S3ljbk8ybG1LSFp2YVdRZ01EMDlQV1VtSmpBOVBUMTBLWEpsZEhWeWJsdGRPMmxtS0NGdUtHVXBLWEpsZEhWeWJpQnlMbU5oYkd3b2J5eGxMSFFwTzJadmNpaDJZWElnYkN4aExITXNZejFiWFN4d1BTaGxMbWxuYm05eVpVTmhjMlUvSjJrbk9pY25LU3NvWlM1dGRXeDBhV3hwYm1VL0oyMG5PaWNuS1Nzb1pTNTFibWxqYjJSbFB5ZDFKem9uSnlrcktHVXVjM1JwWTJ0NVB5ZDVKem9uSnlrc1pEMHdMR2M5ZG05cFpDQXdQVDA5ZEQ5bU9uUStQajR3TEcwOWJtVjNJRkpsWjBWNGNDaGxMbk52ZFhKalpTeHdLeWRuSnlrN0tHdzlhUzVqWVd4c0tHMHNieWtwSmlZb1lUMXRXM2xkTENFb1lUNWtKaVlvWXk1d2RYTm9LRzh1YzJ4cFkyVW9aQ3hzTG1sdVpHVjRLU2tzTVR4c1cyaGRKaVpzTG1sdVpHVjRQRzliYUYwbUpuVXVZWEJ3Ykhrb1l5eHNMbk5zYVdObEtERXBLU3h6UFd4Yk1GMWJhRjBzWkQxaExHTmJhRjArUFdjcEtTazdLVzFiZVYwOVBUMXNMbWx1WkdWNEppWnRXM2xkS3lzN2NtVjBkWEp1SUdROVBUMXZXMmhkUHloemZId2hiUzUwWlhOMEtDY25LU2ttSm1NdWNIVnphQ2duSnlrNll5NXdkWE5vS0c4dWMyeHBZMlVvWkNrcExHTmJhRjArWno5akxuTnNhV05sS0RBc1p5azZZMzA2SnpBblcyZGRLSFp2YVdRZ01Dd3dLVnRvWFQ5bWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQjJiMmxrSURBOVBUMWxKaVl3UFQwOWREOWJYVHB5TG1OaGJHd29kR2hwY3l4bExIUXBmVHB5TEZ0bWRXNWpkR2x2YmloeUxHNHBlM1poY2lCdlBXVW9kR2hwY3lrc2JEMTJiMmxrSURBOVBYSS9kbTlwWkNBd09uSmJkRjA3Y21WMGRYSnVJSFp2YVdRZ01EMDlQV3cvZUM1allXeHNLRzhySnljc2NpeHVLVHBzTG1OaGJHd29jaXh2TEc0cGZTeG1kVzVqZEdsdmJpaDBMRzRwZTNaaGNpQjFQVVVvZUN4MExIUm9hWE1zYml4NElUMDljaWs3YVdZb2RTNWtiMjVsS1hKbGRIVnliaUIxTG5aaGJIVmxPM1poY2lCblBXOG9kQ2tzYUQxMGFHbHpLeWNuTEhrOWJDaG5MRkpsWjBWNGNDa3NYejFuTG5WdWFXTnZaR1VzVXowb1p5NXBaMjV2Y21WRFlYTmxQeWRwSnpvbkp5a3JLR2N1YlhWc2RHbHNhVzVsUHlkdEp6b25KeWtyS0djdWRXNXBZMjlrWlQ4bmRTYzZKeWNwS3lodFB5ZDVKem9uWnljcExGUTlibVYzSUhrb2JUOW5PaWRlS0Q4Nkp5dG5Mbk52ZFhKalpTc25LU2NzVXlrc1lqMTJiMmxrSURBOVBUMXVQMlk2Ymo0K1BqQTdhV1lvTUQwOVlpbHlaWFIxY201YlhUdHBaaWd3UFQwOWFDNXNaVzVuZEdncGNtVjBkWEp1SUc1MWJHdzlQVDFqS0ZRc2FDay9XMmhkT2x0ZE8yWnZjaWgyWVhJZ1VEMHdMSEE5TUN4UFBWdGRPM0E4YUM1c1pXNW5kR2c3S1h0VUxteGhjM1JKYm1SbGVEMXRQM0E2TUR0MllYSWdkaXhsUFdNb1ZDeHRQMmc2YUM1emJHbGpaU2h3S1NrN2FXWW9iblZzYkQwOVBXVjhmQ2gyUFdRb2N5aFVMbXhoYzNSSmJtUmxlQ3NvYlQ4d09uQXBLU3hvTG14bGJtZDBhQ2twUFQwOVVDbHdQV0VvYUN4d0xGOHBPMlZzYzJWN2FXWW9UeTV3ZFhOb0tHZ3VjMnhwWTJVb1VDeHdLU2tzVHk1c1pXNW5kR2c5UFQxaUtYSmxkSFZ5YmlCUE8yWnZjaWgyWVhJZ1NUMHhPMGs4UFdVdWJHVnVaM1JvTFRFN1NTc3JLV2xtS0U4dWNIVnphQ2hsVzBsZEtTeFBMbXhsYm1kMGFEMDlQV0lwY21WMGRYSnVJRTg3Y0QxUVBYWjlmWEpsZEhWeWJpQlBMbkIxYzJnb2FDNXpiR2xqWlNoUUtTa3NUMzFkZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1hzbmRYTmxJSE4wY21samRDYzdkbUZ5SUc0OWNpZ3lLU3h2UFhJb09Ea3BMR3c5Y2lnMU1DazdjaWcxTVNrb0ozTmxZWEpqYUNjc01TeG1kVzVqZEdsdmJpaGxMSFFzY2l4aEtYdHlaWFIxY201YlpuVnVZM1JwYjI0b2NpbDdkbUZ5SUc0OVpTaDBhR2x6S1N4dlBYSTlQWFp2YVdRZ01EOTJiMmxrSURBNmNsdDBYVHR5WlhSMWNtNGdiejA5UFhadmFXUWdNRDl1WlhjZ1VtVm5SWGh3S0hJcFczUmRLRzRySnljcE9tOHVZMkZzYkNoeUxHNHBmU3htZFc1amRHbHZiaWhsS1h0MllYSWdkRDFoS0hJc1pTeDBhR2x6S1R0cFppaDBMbVJ2Ym1VcGNtVjBkWEp1SUhRdWRtRnNkV1U3ZG1GeUlITTliaWhsS1N4cFBYUm9hWE1ySnljc1l6MXpMbXhoYzNSSmJtUmxlRHR2S0dNc01DbDhmQ2h6TG14aGMzUkpibVJsZUQwd0tUdDJZWElnY0Qxc0tITXNhU2s3Y21WMGRYSnVJRzhvY3k1c1lYTjBTVzVrWlhnc1l5bDhmQ2h6TG14aGMzUkpibVJsZUQxaktTeHVkV3hzUFQwOWNEOHRNVHB3TG1sdVpHVjRmVjE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZXlkMWMyVWdjM1J5YVdOMEp6dDJZWElnYmoxeUtERTBLU3h2UFhJb01Da3NiRDF5S0RFeUtTeGhQWElvT0RBcExITTljaWcxT1Nrc2FUMXlLRFlwTEdNOWNpZzJOeWtzY0QxeUtEWXdLVHR2S0c4dVV5dHZMa1lxSVhJb05EVXBLR1oxYm1OMGFXOXVLR1VwZTBGeWNtRjVMbVp5YjIwb1pTbDlLU3duUVhKeVlYa25MSHRtY205dE9tWjFibU4wYVc5dUtHVXBlM1poY2lCMExISXNieXhrTEhVOWJDaGxLU3huUFNkbWRXNWpkR2x2YmljOVBYUjVjR1Z2WmlCMGFHbHpQM1JvYVhNNlFYSnlZWGtzYUQxaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTEhrOU1UeG9QMkZ5WjNWdFpXNTBjMXN4WFRwMmIybGtJREFzWmoxMmIybGtJREFoUFQxNUxHMDlNQ3hGUFhBb2RTazdhV1lvWmlZbUtIazliaWg1TERJOGFEOWhjbWQxYldWdWRITmJNbDA2ZG05cFpDQXdMRElwS1N4MmIybGtJREFoUFVVbUppRW9aejA5UVhKeVlYa21Kbk1vUlNrcEtXWnZjaWhrUFVVdVkyRnNiQ2gxS1N4eVBXNWxkeUJuT3lFb2J6MWtMbTVsZUhRb0tTa3VaRzl1WlR0dEt5c3BZeWh5TEcwc1pqOWhLR1FzZVN4YmJ5NTJZV3gxWlN4dFhTd2hNQ2s2Ynk1MllXeDFaU2s3Wld4elpTQm1iM0lvZEQxcEtIVXViR1Z1WjNSb0tTeHlQVzVsZHlCbktIUXBPM1ErYlR0dEt5c3BZeWh5TEcwc1pqOTVLSFZiYlYwc2JTazZkVnR0WFNrN2NtVjBkWEp1SUhJdWJHVnVaM1JvUFcwc2NuMTlLWDBzWm5WdVkzUnBiMjRvWlN4MExISXBleWQxYzJVZ2MzUnlhV04wSnp0MllYSWdiajF5S0RBcExHODljaWcyTnlrN2JpaHVMbE1yYmk1R0tuSW9OU2tvWm5WdVkzUnBiMjRvS1h0bWRXNWpkR2x2YmlCbEtDbDdmWEpsZEhWeWJpRW9RWEp5WVhrdWIyWXVZMkZzYkNobEtXbHVjM1JoYm1ObGIyWWdaU2w5S1N3blFYSnlZWGtuTEh0dlpqcG1kVzVqZEdsdmJpZ3BlMlp2Y2loMllYSWdaVDB3TEhROVlYSm5kVzFsYm5SekxteGxibWQwYUN4eVBXNWxkeWduWm5WdVkzUnBiMjRuUFQxMGVYQmxiMllnZEdocGN6OTBhR2x6T2tGeWNtRjVLU2gwS1R0MFBtVTdLVzhvY2l4bExHRnlaM1Z0Wlc1MGMxdGxLeXRkS1R0eVpYUjFjbTRnY2k1c1pXNW5kR2c5ZEN4eWZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3dLVHR1S0c0dVVDd25RWEp5WVhrbkxIdGpiM0I1VjJsMGFHbHVPbklvTnpncGZTa3NjaWd6TlNrb0oyTnZjSGxYYVhSb2FXNG5LWDBzWm5WdVkzUnBiMjRvWlN4MExISXBleWQxYzJVZ2MzUnlhV04wSnp0MllYSWdiajF5S0RBcExHODljaWd6T1Nrb05Ta3NiRDBuWm1sdVpDY3NZVDBoTUR0c0lHbHVXMTBtSmxzc1hWdHNYU2htZFc1amRHbHZiaWdwZTJFOUlURjlLU3h1S0c0dVVDdHVMa1lxWVN3blFYSnlZWGtuTEh0bWFXNWtPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ2S0hSb2FYTXNaU3d4UEdGeVozVnRaVzUwY3k1c1pXNW5kR2cvWVhKbmRXMWxiblJ6V3pGZE9uWnZhV1FnTUNsOWZTa3NjaWd6TlNrb2JDbDlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYc25kWE5sSUhOMGNtbGpkQ2M3ZG1GeUlHNDljaWd3S1N4dlBYSW9NemtwS0RZcExHdzlKMlpwYm1SSmJtUmxlQ2NzWVQwaE1EdHNJR2x1VzEwbUpsc3NYVnRzWFNobWRXNWpkR2x2YmlncGUyRTlJVEY5S1N4dUtHNHVVQ3R1TGtZcVlTd25RWEp5WVhrbkxIdG1hVzVrU1c1a1pYZzZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzhvZEdocGN5eGxMREU4WVhKbmRXMWxiblJ6TG14bGJtZDBhRDloY21kMWJXVnVkSE5iTVYwNmRtOXBaQ0F3S1gxOUtTeHlLRE0xS1Noc0tYMHNablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhJb01DazdiaWh1TGxBc0owRnljbUY1Snl4N1ptbHNiRHB5S0RVNEtYMHBMSElvTXpVcEtDZG1hV3hzSnlsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RBcExHODljaWd6S1M1cGMwWnBibWwwWlR0dUtHNHVVeXduVG5WdFltVnlKeXg3YVhOR2FXNXBkR1U2Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SjI1MWJXSmxjaWM5UFhSNWNHVnZaaUJsSmladktHVXBmWDBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd3S1R0dUtHNHVVeXduVG5WdFltVnlKeXg3YVhOSmJuUmxaMlZ5T25Jb09UUXBmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLREFwTEc4OWNpZzVOQ2s3YmlodUxsTXNKMDUxYldKbGNpY3NlMmx6VTJGbVpVbHVkR1ZuWlhJNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHOG9aU2ttSmprd01EY3hPVGt5TlRRM05EQTVPVEUrUFd3b1pTbDlmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLREFwTzI0b2JpNVRMQ2RPZFcxaVpYSW5MSHRwYzA1aFRqcG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdaU0U5WlgxOUtYMHNablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhJb01DazdiaWh1TGxNc0owNTFiV0psY2ljc2UwVlFVMGxNVDA0Nk1pNHlNakEwTkRZd05Ea3lOVEF6TVRObExURTJmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLREFwTzI0b2JpNVRMQ2RPZFcxaVpYSW5MSHROU1U1ZlUwRkdSVjlKVGxSRlIwVlNPaTA1TURBM01UazVNalUwTnpRd09Ua3hmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLREFwTzI0b2JpNVRMQ2RPZFcxaVpYSW5MSHROUVZoZlUwRkdSVjlKVGxSRlIwVlNPamt3TURjeE9Ua3lOVFEzTkRBNU9URjlLWDBzWm5WdVkzUnBiMjRvZEN4dkxHd3BlM1poY2lCaFBXd29NQ2tzY3oxc0tEazFLU3hwUFdVc1l6MU5ZWFJvTG1GamIzTm9PMkVvWVM1VEsyRXVSaW9oS0dNbUpqY3hNRDA5Y0NoaktFNTFiV0psY2k1TlFWaGZWa0ZNVlVVcEtTWW1ZeWhKYm1acGJtbDBlU2s5UFVsdVptbHVhWFI1S1N3blRXRjBhQ2NzZTJGamIzTm9PbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUF4UGlobFBTdGxLVDlPWVU0Nk9UUTVNRFl5TmpVdU5qSTBNalV4TlRZOFpUOXVLR1VwSzNJNmN5aGxMVEVyYVNobExURXBLbWtvWlNzeEtTbDlmU2w5TEdaMWJtTjBhVzl1S0hRc2NpeHZLWHRtZFc1amRHbHZiaUJzS0hRcGUzSmxkSFZ5YmlCcGMwWnBibWwwWlNoMFBTdDBLU1ltTUNFOWREOHdQblEvTFd3b0xYUXBPbTRvZEN0bEtIUXFkQ3N4S1NrNmRIMTJZWElnWVQxdktEQXBMSE05VFdGMGFDNWhjMmx1YUR0aEtHRXVVeXRoTGtZcUlTaHpKaVl3UERFdmN5Z3dLU2tzSjAxaGRHZ25MSHRoYzJsdWFEcHNmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2J6MXlLREFwTEd3OVRXRjBhQzVoZEdGdWFEdHZLRzh1VXl0dkxrWXFJU2hzSmlZd1BqRXZiQ2d0TUNrcExDZE5ZWFJvSnl4N1lYUmhibWc2Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SURBOVBTaGxQU3RsS1Q5bE9tNG9LREVyWlNrdktERXRaU2twTHpKOWZTbDlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtEQXBMR0U5Y2lnMk9DazdiaWh1TGxNc0owMWhkR2duTEh0alluSjBPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJoS0dVOUsyVXBLbThvYkNobEtTd3hMek1wZlgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzg5Y2lnd0tUdHZLRzh1VXl3blRXRjBhQ2NzZTJOc2VqTXlPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaWhsUGo0K1BUQXBQek14TFhBb2JpaGxLekF1TlNrcVRXRjBhQzVNVDBjeVJTazZNeko5ZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RBcExHODlZVHR1S0c0dVV5d25UV0YwYUNjc2UyTnZjMmc2Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1S0c4b1pUMHJaU2tyYnlndFpTa3BMeko5ZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajF5S0RBcExHODljaWcyT1NrN2JpaHVMbE1yYmk1R0tpaHZJVDF6S1N3blRXRjBhQ2NzZTJWNGNHMHhPbTk5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrN2JpaHVMbE1zSjAxaGRHZ25MSHRtY205MWJtUTZjaWd4T0RrcGZTbDlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtEWTRLU3hoUFc4c2N6MWhLRElzTFRVeUtTeHBQV0VvTWl3dE1qTXBMR005WVNneUxERXlOeWtxS0RJdGFTa3NjRDFoS0RJc0xURXlOaWtzWkQxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1pTc3hMM010TVM5emZUdGxMbVY0Y0c5eWRITTlUV0YwYUM1bWNtOTFibVI4ZkdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwTEhJc2J6MXNLR1VwTEdFOWJpaGxLVHR5WlhSMWNtNGdienh3UDJFcVpDaHZMM0F2YVNrcWNDcHBPaWgwUFNneEsya3ZjeWtxYnl4eVBYUXRLSFF0Ynlrc2NqNWpmSHh5SVQxeVAyRXFTVzVtYVc1cGRIazZZU3B5S1gxOUxHWjFibU4wYVc5dUtIUXNjaXh1S1h0MllYSWdiejF1S0RBcE8yOG9ieTVUTENkTllYUm9KeXg3YUhsd2IzUTZablZ1WTNScGIyNG9LWHRtYjNJb2RtRnlJSFFzY2l4dVBUQXNiejB3TEdFOVlYSm5kVzFsYm5SekxteGxibWQwYUN4elBUQTdienhoT3lsMFBXd29ZWEpuZFcxbGJuUnpXMjhySzEwcExITThkRDhvY2oxekwzUXNiajF1S25JcWNpc3hMSE05ZENrNk1EeDBQeWh5UFhRdmN5eHVLejF5S25JcE9tNHJQWFE3Y21WMGRYSnVJSE05UFVsdVptbHVhWFI1UDBsdVptbHVhWFI1T25NcVpTaHVLWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrc2J6MU5ZWFJvTG1sdGRXdzdiaWh1TGxNcmJpNUdLbklvTlNrb1puVnVZM1JwYjI0b0tYdHlaWFIxY200dE5TRTlieWcwTWprME9UWTNNamsxTERVcGZId3lJVDF2TG14bGJtZDBhSDBwTENkTllYUm9KeXg3YVcxMWJEcG1kVzVqZEdsdmJpaGxMSFFwZTNaaGNpQnlQVFkxTlRNMUxHNDlLMlVzYnowcmRDeHNQWEltYml4aFBYSW1ienR5WlhSMWNtNGdNSHhzS21FcktDaHlKbTQrUGo0eE5pa3FZU3RzS2loeUptOCtQajR4TmlrOFBERTJQajQrTUNsOWZTbDlMR1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxeUtEQXBPMjRvYmk1VExDZE5ZWFJvSnl4N2JHOW5NWEE2Y2lnNU5TbDlLWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdlBYSW9NQ2s3YnlodkxsTXNKMDFoZEdnbkxIdHNiMmN4TURwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2JpaGxLU3BOWVhSb0xreFBSekV3UlgxOUtYMHNablZ1WTNScGIyNG9aU3gwTEc4cGUzWmhjaUJzUFc4b01DazdiQ2hzTGxNc0owMWhkR2duTEh0c2IyY3lPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ1S0dVcEwzSjlmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLREFwTzI0b2JpNVRMQ2ROWVhSb0p5eDdjMmxuYmpweUtEWTRLWDBwZlN4bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDljaWd3S1N4dlBYSW9OamtwTEhNOVlUdHVLRzR1VXl0dUxrWXFjaWcxS1NobWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlFd2ZTa3NKMDFoZEdnbkxIdHphVzVvT21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlBeFBtd29aVDByWlNrL0tHOG9aU2t0YnlndFpTa3BMekk2S0hNb1pTMHhLUzF6S0MxbExURXBLU29vVFdGMGFDNUZMeklwZlgwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lnd0tTeHZQWElvTmprcExHdzlZVHR1S0c0dVV5d25UV0YwYUNjc2UzUmhibWc2Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5YnlobFBTdGxLU3h5UFc4b0xXVXBPM0psZEhWeWJpQjBQVDFKYm1acGJtbDBlVDh4T25JOVBVbHVabWx1YVhSNVB5MHhPaWgwTFhJcEx5aHNLR1VwSzJ3b0xXVXBLWDE5S1gwc1puVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWElvTUNrN2JpaHVMbE1zSjAxaGRHZ25MSHQwY25WdVl6cG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNG9NRHhsUDNBNll5a29aU2w5ZlNsOUxHWjFibU4wYVc5dUtHVXNkQ3h5S1hzbmRYTmxJSE4wY21samRDYzdkbUZ5SUc0OWNpZ3dLU3h2UFhJb05UVXBLQ0V3S1R0dUtHNHVVQ3duUVhKeVlYa25MSHRwYm1Oc2RXUmxjenBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYnloMGFHbHpMR1VzTVR4aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUDJGeVozVnRaVzUwYzFzeFhUcDJiMmxrSURBcGZYMHBMSElvTXpVcEtDZHBibU5zZFdSbGN5Y3BmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3dLU3h2UFhJb09UWXBLQ0V4S1R0dUtHNHVVeXduVDJKcVpXTjBKeXg3ZG1Gc2RXVnpPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ2S0dVcGZYMHBmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWNpZ3dLU3h2UFhJb09UWXBLQ0V3S1R0dUtHNHVVeXduVDJKcVpXTjBKeXg3Wlc1MGNtbGxjenBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYnlobEtYMTlLWDBzWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBYSW9NQ2tzYnoxeUtEZzFLU3hzUFhJb01URXBMR0U5Y2lneE5pa3NjejF5S0RZM0tUdHVLRzR1VXl3blQySnFaV04wSnl4N1oyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5Y3pwbWRXNWpkR2x2YmlobEtYdG1iM0lvZG1GeUlIUXNjaXh1UFd3b1pTa3NZejFoTG1Zc2NEMXZLRzRwTEdROWUzMHNkVDB3TzNBdWJHVnVaM1JvUG5VN0tYSTlZeWh1TEhROWNGdDFLeXRkS1N4MmIybGtJREFoUFQxeUppWnpLR1FzZEN4eUtUdHlaWFIxY200Z1pIMTlLWDBzWm5WdVkzUnBiMjRvWlN4MExISXBleWQxYzJVZ2MzUnlhV04wSnp0MllYSWdiajF5S0RBcExHODljaWc1Tnlrc2JEMXlLRFE1S1N4aFBTOVdaWEp6YVc5dVhGd3ZNVEJjWEM1Y1hHUXJLRnhjTGx4Y1pDc3BQeWdnVFc5aWFXeGxYRnd2WEZ4M0t5ay9JRk5oWm1GeWFWeGNMeTh1ZEdWemRDaHNLVHR1S0c0dVVDdHVMa1lxWVN3blUzUnlhVzVuSnl4N2NHRmtVM1JoY25RNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHOG9kR2hwY3l4bExERThZWEpuZFcxbGJuUnpMbXhsYm1kMGFEOWhjbWQxYldWdWRITmJNVjA2ZG05cFpDQXdMQ0V3S1gxOUtYMHNablZ1WTNScGIyNG9aU3gwTEhJcGV5ZDFjMlVnYzNSeWFXTjBKenQyWVhJZ2JqMXlLREFwTEc4OWNpZzVOeWtzYkQxeUtEUTVLU3hoUFM5V1pYSnphVzl1WEZ3dk1UQmNYQzVjWEdRcktGeGNMbHhjWkNzcFB5Z2dUVzlpYVd4bFhGd3ZYRngzS3lrL0lGTmhabUZ5YVZ4Y0x5OHVkR1Z6ZENoc0tUdHVLRzR1VUN0dUxrWXFZU3duVTNSeWFXNW5KeXg3Y0dGa1JXNWtPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ2S0hSb2FYTXNaU3d4UEdGeVozVnRaVzUwY3k1c1pXNW5kR2cvWVhKbmRXMWxiblJ6V3pGZE9uWnZhV1FnTUN3aE1TbDlmU2w5TEdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMXlLRE1wTEc4OWNpZ3dLU3hzUFhJb05Ea3BMR0U5VzEwdWMyeHBZMlVzY3owdlRWTkpSU0F1WEZ3dUx5NTBaWE4wS0d3cExHazlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1oxYm1OMGFXOXVLSFFzY2lsN2RtRnlJRzQ5TWp4aGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTEc4OUlTRnVKaVpoTG1OaGJHd29ZWEpuZFcxbGJuUnpMRElwTzNKbGRIVnliaUJsS0c0L1puVnVZM1JwYjI0b0tYc29KMloxYm1OMGFXOXVKejA5ZEhsd1pXOW1JSFEvZERwR2RXNWpkR2x2YmloMEtTa3VZWEJ3Ykhrb2RHaHBjeXh2S1gwNmRDeHlLWDE5TzI4b2J5NUhLMjh1UWl0dkxrWXFjeXg3YzJWMFZHbHRaVzkxZERwcEtHNHVjMlYwVkdsdFpXOTFkQ2tzYzJWMFNXNTBaWEoyWVd3NmFTaHVMbk5sZEVsdWRHVnlkbUZzS1gwcGZTeG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5Y2lnd0tTeHZQWElvTmpJcE8yNG9iaTVISzI0dVFpeDdjMlYwU1cxdFpXUnBZWFJsT204dWMyVjBMR05zWldGeVNXMXRaV1JwWVhSbE9tOHVZMnhsWVhKOUtYMHNablZ1WTNScGIyNG9aU3gwTEhJcGUyWnZjaWgyWVhJZ2JqMXlLRFl4S1N4dlBYSW9NallwTEd3OWNpZ3hOeWtzWVQxeUtETXBMSE05Y2lnNUtTeGpQWElvTXpNcExIQTljaWcwS1N4a1BYQW9KMmwwWlhKaGRHOXlKeWtzZFQxd0tDZDBiMU4wY21sdVoxUmhaeWNwTEdjOVl5NUJjbkpoZVN4b1BYdERVMU5TZFd4bFRHbHpkRG9oTUN4RFUxTlRkSGxzWlVSbFkyeGhjbUYwYVc5dU9pRXhMRU5UVTFaaGJIVmxUR2x6ZERvaE1TeERiR2xsYm5SU1pXTjBUR2x6ZERvaE1TeEVUMDFTWldOMFRHbHpkRG9oTVN4RVQwMVRkSEpwYm1kTWFYTjBPaUV4TEVSUFRWUnZhMlZ1VEdsemREb2hNQ3hFWVhSaFZISmhibk5tWlhKSmRHVnRUR2x6ZERvaE1TeEdhV3hsVEdsemREb2hNU3hJVkUxTVFXeHNRMjlzYkdWamRHbHZiam9oTVN4SVZFMU1RMjlzYkdWamRHbHZiam9oTVN4SVZFMU1SbTl5YlVWc1pXMWxiblE2SVRFc1NGUk5URk5sYkdWamRFVnNaVzFsYm5RNklURXNUV1ZrYVdGTWFYTjBPaUV3TEUxcGJXVlVlWEJsUVhKeVlYazZJVEVzVG1GdFpXUk9iMlJsVFdGd09pRXhMRTV2WkdWTWFYTjBPaUV3TEZCaGFXNTBVbVZ4ZFdWemRFeHBjM1E2SVRFc1VHeDFaMmx1T2lFeExGQnNkV2RwYmtGeWNtRjVPaUV4TEZOV1IweGxibWQwYUV4cGMzUTZJVEVzVTFaSFRuVnRZbVZ5VEdsemREb2hNU3hUVmtkUVlYUm9VMlZuVEdsemREb2hNU3hUVmtkUWIybHVkRXhwYzNRNklURXNVMVpIVTNSeWFXNW5UR2x6ZERvaE1TeFRWa2RVY21GdWMyWnZjbTFNYVhOME9pRXhMRk52ZFhKalpVSjFabVpsY2t4cGMzUTZJVEVzVTNSNWJHVlRhR1ZsZEV4cGMzUTZJVEFzVkdWNGRGUnlZV05yUTNWbFRHbHpkRG9oTVN4VVpYaDBWSEpoWTJ0TWFYTjBPaUV4TEZSdmRXTm9UR2x6ZERvaE1YMHNlVDF2S0dncExHWTlNRHRtUEhrdWJHVnVaM1JvTzJZckt5bDdkbUZ5SUdrc2JUMTVXMlpkTEVVOWFGdHRYU3g0UFdGYmJWMHNYejE0SmlaNExuQnliM1J2ZEhsd1pUdHBaaWhmSmlZb1gxdGtYWHg4Y3loZkxHUXNaeWtzWDF0MVhYeDhjeWhmTEhVc2JTa3NZMXR0WFQxbkxFVXBLV1p2Y2locElHbHVJRzRwWDF0cFhYeDhiQ2hmTEdrc2JsdHBYU3doTUNsOWZTeG1kVzVqZEdsdmJpaGxLWHNoWm5WdVkzUnBiMjRvZENsN0ozVnpaU0J6ZEhKcFkzUW5PMloxYm1OMGFXOXVJSElvWlN4MExISXNiaWw3ZG1GeUlHdzlkQ1ltZEM1d2NtOTBiM1I1Y0dVZ2FXNXpkR0Z1WTJWdlppQnZQM1E2Ynl4aFBVOWlhbVZqZEM1amNtVmhkR1VvYkM1d2NtOTBiM1I1Y0dVcExITTlibVYzSUdjb2JueDhXMTBwTzNKbGRIVnliaUJoTGw5cGJuWnZhMlU5WXlobExISXNjeWtzWVgxbWRXNWpkR2x2YmlCdUtHVXNkQ3h5S1h0MGNubDdjbVYwZFhKdWUzUjVjR1U2SjI1dmNtMWhiQ2NzWVhKbk9tVXVZMkZzYkNoMExISXBmWDFqWVhSamFDaGxLWHR5WlhSMWNtNTdkSGx3WlRvbmRHaHliM2NuTEdGeVp6cGxmWDE5Wm5WdVkzUnBiMjRnYnlncGUzMW1kVzVqZEdsdmJpQnNLQ2w3ZldaMWJtTjBhVzl1SUdFb0tYdDlablZ1WTNScGIyNGdjeWhsS1h0YkoyNWxlSFFuTENkMGFISnZkeWNzSjNKbGRIVnliaWRkTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvZENsN1pWdDBYVDFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnZEdocGN5NWZhVzUyYjJ0bEtIUXNaU2w5ZlNsOVpuVnVZM1JwYjI0Z2FTaGxLWHRtZFc1amRHbHZiaUIwS0hJc2J5eHNMR0VwZTNaaGNpQnpQVzRvWlZ0eVhTeGxMRzhwTzJsbUtDZDBhSEp2ZHljOVBUMXpMblI1Y0dVcFlTaHpMbUZ5WnlrN1pXeHpaWHQyWVhJZ2FUMXpMbUZ5Wnl4alBXa3VkbUZzZFdVN2NtVjBkWEp1SUdNbUppZHZZbXBsWTNRblBUMTBlWEJsYjJZZ1l5WW1iUzVqWVd4c0tHTXNKMTlmWVhkaGFYUW5LVDlRY205dGFYTmxMbkpsYzI5c2RtVW9ZeTVmWDJGM1lXbDBLUzUwYUdWdUtHWjFibU4wYVc5dUtHVXBlM1FvSjI1bGVIUW5MR1VzYkN4aEtYMHNablZ1WTNScGIyNG9aU2w3ZENnbmRHaHliM2NuTEdVc2JDeGhLWDBwT2xCeWIyMXBjMlV1Y21WemIyeDJaU2hqS1M1MGFHVnVLR1oxYm1OMGFXOXVLR1VwZTJrdWRtRnNkV1U5WlN4c0tHa3BmU3hoS1gxOWRtRnlJSEk3ZEdocGN5NWZhVzUyYjJ0bFBXWjFibU4wYVc5dUtHVXNiaWw3Wm5WdVkzUnBiMjRnYnlncGUzSmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlMRzhwZTNRb1pTeHVMSElzYnlsOUtYMXlaWFIxY200Z2NqMXlQM0l1ZEdobGJpaHZMRzhwT204b0tYMTlablZ1WTNScGIyNGdZeWhsTEhRc2NpbDdkbUZ5SUc4OVVEdHlaWFIxY200Z1puVnVZM1JwYjI0b2JDeGhLWHRwWmlodlBUMTJLWFJvY205M0lHNWxkeUJGY25KdmNpZ25SMlZ1WlhKaGRHOXlJR2x6SUdGc2NtVmhaSGtnY25WdWJtbHVaeWNwTzJsbUtHODlQVWtwZTJsbUtDZDBhSEp2ZHljOVBUMXNLWFJvY205M0lHRTdjbVYwZFhKdUlIa29LWDFtYjNJb2NpNXRaWFJvYjJROWJDeHlMbUZ5WnoxaE96c3BlM1poY2lCelBYSXVaR1ZzWldkaGRHVTdhV1lvY3lsN2RtRnlJR2s5Y0NoekxISXBPMmxtS0drcGUybG1LR2s5UFQxQktXTnZiblJwYm5WbE8zSmxkSFZ5YmlCcGZYMXBaaWduYm1WNGRDYzlQVDF5TG0xbGRHaHZaQ2x5TG5ObGJuUTljaTVmYzJWdWREMXlMbUZ5Wnp0bGJITmxJR2xtS0NkMGFISnZkeWM5UFQxeUxtMWxkR2h2WkNsN2FXWW9iejA5VUNsMGFISnZkeUJ2UFVrc2NpNWhjbWM3Y2k1a2FYTndZWFJqYUVWNFkyVndkR2x2YmloeUxtRnlaeWw5Wld4elpTZHlaWFIxY200blBUMDljaTV0WlhSb2IyUW1Kbkl1WVdKeWRYQjBLQ2R5WlhSMWNtNG5MSEl1WVhKbktUdHZQWFk3ZG1GeUlHTTliaWhsTEhRc2NpazdhV1lvSjI1dmNtMWhiQ2M5UFQxakxuUjVjR1VwZTJsbUtHODljaTVrYjI1bFAwazZUeXhqTG1GeVp6MDlQVUVwWTI5dWRHbHVkV1U3Y21WMGRYSnVlM1poYkhWbE9tTXVZWEpuTEdSdmJtVTZjaTVrYjI1bGZYMG5kR2h5YjNjblBUMDlZeTUwZVhCbEppWW9iejFKTEhJdWJXVjBhRzlrUFNkMGFISnZkeWNzY2k1aGNtYzlZeTVoY21jcGZYMTlablZ1WTNScGIyNGdjQ2hsTEhRcGUzWmhjaUJ5UFdVdWFYUmxjbUYwYjNKYmRDNXRaWFJvYjJSZE8ybG1LSFp2YVdRZ01EMDlQWElwZTJsbUtIUXVaR1ZzWldkaGRHVTliblZzYkN3bmRHaHliM2NuUFQwOWRDNXRaWFJvYjJRcGUybG1LR1V1YVhSbGNtRjBiM0l1Y21WMGRYSnVKaVlvZEM1dFpYUm9iMlE5SjNKbGRIVnliaWNzZEM1aGNtYzlkbTlwWkNBd0xIQW9aU3gwS1N3bmRHaHliM2NuUFQwOWRDNXRaWFJvYjJRcEtYSmxkSFZ5YmlCQk8zUXViV1YwYUc5a1BTZDBhSEp2ZHljc2RDNWhjbWM5Ym1WM0lGUjVjR1ZGY25KdmNpZ25WR2hsSUdsMFpYSmhkRzl5SUdSdlpYTWdibTkwSUhCeWIzWnBaR1VnWVNCY1hDZDBhSEp2ZDF4Y0p5QnRaWFJvYjJRbktYMXlaWFIxY200Z1FYMTJZWElnYnoxdUtISXNaUzVwZEdWeVlYUnZjaXgwTG1GeVp5azdhV1lvSjNSb2NtOTNKejA5UFc4dWRIbHdaU2x5WlhSMWNtNGdkQzV0WlhSb2IyUTlKM1JvY205M0p5eDBMbUZ5WnoxdkxtRnlaeXgwTG1SbGJHVm5ZWFJsUFc1MWJHd3NRVHQyWVhJZ2JEMXZMbUZ5Wnp0cFppZ2hiQ2x5WlhSMWNtNGdkQzV0WlhSb2IyUTlKM1JvY205M0p5eDBMbUZ5WnoxdVpYY2dWSGx3WlVWeWNtOXlLQ2RwZEdWeVlYUnZjaUJ5WlhOMWJIUWdhWE1nYm05MElHRnVJRzlpYW1WamRDY3BMSFF1WkdWc1pXZGhkR1U5Ym5Wc2JDeEJPMmxtS0d3dVpHOXVaU2wwVzJVdWNtVnpkV3gwVG1GdFpWMDliQzUyWVd4MVpTeDBMbTVsZUhROVpTNXVaWGgwVEc5akxDZHlaWFIxY200bklUMDlkQzV0WlhSb2IyUW1KaWgwTG0xbGRHaHZaRDBuYm1WNGRDY3NkQzVoY21jOWRtOXBaQ0F3S1R0bGJITmxJSEpsZEhWeWJpQnNPM0psZEhWeWJpQjBMbVJsYkdWbllYUmxQVzUxYkd3c1FYMW1kVzVqZEdsdmJpQmtLR1VwZTNaaGNpQjBQWHQwY25sTWIyTTZaVnN3WFgwN01TQnBiaUJsSmlZb2RDNWpZWFJqYUV4dll6MWxXekZkS1N3eUlHbHVJR1VtSmloMExtWnBibUZzYkhsTWIyTTlaVnN5WFN4MExtRm1kR1Z5VEc5alBXVmJNMTBwTEhSb2FYTXVkSEo1Ulc1MGNtbGxjeTV3ZFhOb0tIUXBmV1oxYm1OMGFXOXVJSFVvWlNsN2RtRnlJSFE5WlM1amIyMXdiR1YwYVc5dWZIeDdmVHQwTG5SNWNHVTlKMjV2Y20xaGJDY3NaR1ZzWlhSbElIUXVZWEpuTEdVdVkyOXRjR3hsZEdsdmJqMTBmV1oxYm1OMGFXOXVJR2NvWlNsN2RHaHBjeTUwY25sRmJuUnlhV1Z6UFZ0N2RISjVURzlqT2lkeWIyOTBKMzFkTEdVdVptOXlSV0ZqYUNoa0xIUm9hWE1wTEhSb2FYTXVjbVZ6WlhRb0lUQXBmV1oxYm1OMGFXOXVJR2dvWlNsN2FXWW9aU2w3ZG1GeUlIUTlaVnQ0WFR0cFppaDBLWEpsZEhWeWJpQjBMbU5oYkd3b1pTazdhV1lvSjJaMWJtTjBhVzl1SnowOWRIbHdaVzltSUdVdWJtVjRkQ2x5WlhSMWNtNGdaVHRwWmlnaGFYTk9ZVTRvWlM1c1pXNW5kR2dwS1h0MllYSWdjajB0TVN4dVBXWjFibU4wYVc5dUlIUW9LWHRtYjNJb095c3JjanhsTG14bGJtZDBhRHNwYVdZb2JTNWpZV3hzS0dVc2Npa3BjbVYwZFhKdUlIUXVkbUZzZFdVOVpWdHlYU3gwTG1SdmJtVTlJVEVzZER0eVpYUjFjbTRnZEM1MllXeDFaVDEyYjJsa0lEQXNkQzVrYjI1bFBTRXdMSFI5TzNKbGRIVnliaUJ1TG01bGVIUTlibjE5Y21WMGRYSnVlMjVsZUhRNmVYMTlablZ1WTNScGIyNGdlU2dwZTNKbGRIVnlibnQyWVd4MVpUcDJiMmxrSURBc1pHOXVaVG9oTUgxOWRtRnlJR1k5VDJKcVpXTjBMbkJ5YjNSdmRIbHdaU3h0UFdZdWFHRnpUM2R1VUhKdmNHVnlkSGtzUlQwblpuVnVZM1JwYjI0blBUMTBlWEJsYjJZZ1UzbHRZbTlzUDFONWJXSnZiRHA3ZlN4NFBVVXVhWFJsY21GMGIzSjhmQ2RBUUdsMFpYSmhkRzl5Snl4ZlBVVXVZWE41Ym1OSmRHVnlZWFJ2Y254OEowQkFZWE41Ym1OSmRHVnlZWFJ2Y2ljc1V6MUZMblJ2VTNSeWFXNW5WR0ZuZkh3blFFQjBiMU4wY21sdVoxUmhaeWNzVkQwbmIySnFaV04wSnowOWRIbHdaVzltSUdVc1lqMTBMbkpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaVHRwWmloaUtYSmxkSFZ5YmlCMmIybGtLRlFtSmlobExtVjRjRzl5ZEhNOVlpa3BPMkk5ZEM1eVpXZGxibVZ5WVhSdmNsSjFiblJwYldVOVZEOWxMbVY0Y0c5eWRITTZlMzBzWWk1M2NtRndQWEk3ZG1GeUlGQTlKM04xYzNCbGJtUmxaRk4wWVhKMEp5eFBQU2R6ZFhOd1pXNWtaV1JaYVdWc1pDY3NkajBuWlhobFkzVjBhVzVuSnl4SlBTZGpiMjF3YkdWMFpXUW5MRUU5ZTMwc1VqMTdmVHRTVzNoZFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE45TzNaaGNpQnJQVTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWml4TVBXc21KbXNvYXlob0tGdGRLU2twTzB3bUprd2hQVDFtSmladExtTmhiR3dvVEN4NEtTWW1LRkk5VENrN2RtRnlJRVk5WVM1d2NtOTBiM1I1Y0dVOWJ5NXdjbTkwYjNSNWNHVTlUMkpxWldOMExtTnlaV0YwWlNoU0tUdHNMbkJ5YjNSdmRIbHdaVDFHTG1OdmJuTjBjblZqZEc5eVBXRXNZUzVqYjI1emRISjFZM1J2Y2oxc0xHRmJVMTA5YkM1a2FYTndiR0Y1VG1GdFpUMG5SMlZ1WlhKaGRHOXlSblZ1WTNScGIyNG5MR0l1YVhOSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmoxbWRXNWpkR2x2YmlobEtYdDJZWElnZEQwblpuVnVZM1JwYjI0blBUMTBlWEJsYjJZZ1pTWW1aUzVqYjI1emRISjFZM1J2Y2p0eVpYUjFjbTRoSVhRbUppaDBQVDA5Ykh4OEowZGxibVZ5WVhSdmNrWjFibU4wYVc5dUp6MDlQU2gwTG1ScGMzQnNZWGxPWVcxbGZIeDBMbTVoYldVcEtYMHNZaTV0WVhKclBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQlBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMlkvVDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bUtHVXNZU2s2S0dVdVgxOXdjbTkwYjE5ZlBXRXNJU2hUSUdsdUlHVXBKaVlvWlZ0VFhUMG5SMlZ1WlhKaGRHOXlSblZ1WTNScGIyNG5LU2tzWlM1d2NtOTBiM1I1Y0dVOVQySnFaV04wTG1OeVpXRjBaU2hHS1N4bGZTeGlMbUYzY21Gd1BXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJudGZYMkYzWVdsME9tVjlmU3h6S0drdWNISnZkRzkwZVhCbEtTeHBMbkJ5YjNSdmRIbHdaVnRmWFQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCMGFHbHpmU3hpTGtGemVXNWpTWFJsY21GMGIzSTlhU3hpTG1GemVXNWpQV1oxYm1OMGFXOXVLR1VzZEN4dUxHOHBlM1poY2lCc1BXNWxkeUJwS0hJb1pTeDBMRzRzYnlrcE8zSmxkSFZ5YmlCaUxtbHpSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNG9kQ2svYkRwc0xtNWxlSFFvS1M1MGFHVnVLR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsTG1SdmJtVS9aUzUyWVd4MVpUcHNMbTVsZUhRb0tYMHBmU3h6S0VZcExFWmJVMTA5SjBkbGJtVnlZWFJ2Y2ljc1JsdDRYVDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsemZTeEdMblJ2VTNSeWFXNW5QV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVKMXR2WW1wbFkzUWdSMlZ1WlhKaGRHOXlYU2Q5TEdJdWEyVjVjejFtZFc1amRHbHZiaWhsS1h0MllYSWdkRDFiWFR0bWIzSW9kbUZ5SUhJZ2FXNGdaU2wwTG5CMWMyZ29jaWs3Y21WMGRYSnVJSFF1Y21WMlpYSnpaU2dwTEdaMWJtTjBhVzl1SUhJb0tYdG1iM0lvTzNRdWJHVnVaM1JvT3lsN2RtRnlJRzQ5ZEM1d2IzQW9LVHRwWmlodUlHbHVJR1VwY21WMGRYSnVJSEl1ZG1Gc2RXVTliaXh5TG1SdmJtVTlJVEVzY24xeVpYUjFjbTRnY2k1a2IyNWxQU0V3TEhKOWZTeGlMblpoYkhWbGN6MW9MR2N1Y0hKdmRHOTBlWEJsUFh0amIyNXpkSEoxWTNSdmNqcG5MSEpsYzJWME9tWjFibU4wYVc5dUtHVXBlMmxtS0hSb2FYTXVjSEpsZGowd0xIUm9hWE11Ym1WNGREMHdMSFJvYVhNdWMyVnVkRDEwYUdsekxsOXpaVzUwUFhadmFXUWdNQ3gwYUdsekxtUnZibVU5SVRFc2RHaHBjeTVrWld4bFoyRjBaVDF1ZFd4c0xIUm9hWE11YldWMGFHOWtQU2R1WlhoMEp5eDBhR2x6TG1GeVp6MTJiMmxrSURBc2RHaHBjeTUwY25sRmJuUnlhV1Z6TG1admNrVmhZMmdvZFNrc0lXVXBabTl5S0haaGNpQjBJR2x1SUhSb2FYTXBKM1FuUFQwOWRDNWphR0Z5UVhRb01Da21KbTB1WTJGc2JDaDBhR2x6TEhRcEppWWhhWE5PWVU0b0szUXVjMnhwWTJVb01Ta3BKaVlvZEdocGMxdDBYVDEyYjJsa0lEQXBmU3h6ZEc5d09tWjFibU4wYVc5dUtDbDdkR2hwY3k1a2IyNWxQU0V3TzNaaGNpQmxQWFJvYVhNdWRISjVSVzUwY21sbGMxc3dYU3gwUFdVdVkyOXRjR3hsZEdsdmJqdHBaaWduZEdoeWIzY25QVDA5ZEM1MGVYQmxLWFJvY205M0lIUXVZWEpuTzNKbGRIVnliaUIwYUdsekxuSjJZV3g5TEdScGMzQmhkR05vUlhoalpYQjBhVzl1T21aMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlIUW9kQ3h1S1h0eVpYUjFjbTRnYkM1MGVYQmxQU2QwYUhKdmR5Y3NiQzVoY21jOVpTeHlMbTVsZUhROWRDeHVKaVlvY2k1dFpYUm9iMlE5SjI1bGVIUW5MSEl1WVhKblBYWnZhV1FnTUNrc0lTRnVmV2xtS0hSb2FYTXVaRzl1WlNsMGFISnZkeUJsTzJadmNpaDJZWElnY2oxMGFHbHpMRzQ5ZEdocGN5NTBjbmxGYm5SeWFXVnpMbXhsYm1kMGFDMHhPekE4UFc0N0xTMXVLWHQyWVhJZ2J6MTBhR2x6TG5SeWVVVnVkSEpwWlhOYmJsMHNiRDF2TG1OdmJYQnNaWFJwYjI0N2FXWW9KM0p2YjNRblBUMDlieTUwY25sTWIyTXBjbVYwZFhKdUlIUW9KMlZ1WkNjcE8ybG1LRzh1ZEhKNVRHOWpQRDEwYUdsekxuQnlaWFlwZTNaaGNpQmhQVzB1WTJGc2JDaHZMQ2RqWVhSamFFeHZZeWNwTEhNOWJTNWpZV3hzS0c4c0oyWnBibUZzYkhsTWIyTW5LVHRwWmloaEppWnpLWHRwWmloMGFHbHpMbkJ5WlhZOGJ5NWpZWFJqYUV4dll5bHlaWFIxY200Z2RDaHZMbU5oZEdOb1RHOWpMQ0V3S1R0cFppaDBhR2x6TG5CeVpYWThieTVtYVc1aGJHeDVURzlqS1hKbGRIVnliaUIwS0c4dVptbHVZV3hzZVV4dll5bDlaV3h6WlNCcFppaGhLWHRwWmloMGFHbHpMbkJ5WlhZOGJ5NWpZWFJqYUV4dll5bHlaWFIxY200Z2RDaHZMbU5oZEdOb1RHOWpMQ0V3S1R0OVpXeHpaU0JwWmlnaGN5bDBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozUnllU0J6ZEdGMFpXMWxiblFnZDJsMGFHOTFkQ0JqWVhSamFDQnZjaUJtYVc1aGJHeDVKeWs3Wld4elpTQnBaaWgwYUdsekxuQnlaWFk4Ynk1bWFXNWhiR3g1VEc5aktYSmxkSFZ5YmlCMEtHOHVabWx1WVd4c2VVeHZZeWw5Zlgwc1lXSnlkWEIwT21aMWJtTjBhVzl1S0dVc2RDbDdabTl5S0haaGNpQnlMRzQ5ZEdocGN5NTBjbmxGYm5SeWFXVnpMbXhsYm1kMGFDMHhPekE4UFc0N0xTMXVLV2xtS0hJOWRHaHBjeTUwY25sRmJuUnlhV1Z6VzI1ZExISXVkSEo1VEc5alBEMTBhR2x6TG5CeVpYWW1KbTB1WTJGc2JDaHlMQ2RtYVc1aGJHeDVURzlqSnlrbUpuUm9hWE11Y0hKbGRqeHlMbVpwYm1Gc2JIbE1iMk1wZTNaaGNpQnZQWEk3WW5KbFlXdDlieVltS0NkaWNtVmhheWM5UFQxbGZId25ZMjl1ZEdsdWRXVW5QVDA5WlNrbUptOHVkSEo1VEc5alBEMTBKaVowUEQxdkxtWnBibUZzYkhsTWIyTW1KaWh2UFc1MWJHd3BPM1poY2lCc1BXOC9ieTVqYjIxd2JHVjBhVzl1T250OU8zSmxkSFZ5YmlCc0xuUjVjR1U5WlN4c0xtRnlaejEwTEc4L0tIUm9hWE11YldWMGFHOWtQU2R1WlhoMEp5eDBhR2x6TG01bGVIUTlieTVtYVc1aGJHeDVURzlqTEVFcE9uUm9hWE11WTI5dGNHeGxkR1VvYkNsOUxHTnZiWEJzWlhSbE9tWjFibU4wYVc5dUtHVXNkQ2w3YVdZb0ozUm9jbTkzSnowOVBXVXVkSGx3WlNsMGFISnZkeUJsTG1GeVp6dHlaWFIxY200blluSmxZV3NuUFQwOVpTNTBlWEJsZkh3blkyOXVkR2x1ZFdVblBUMDlaUzUwZVhCbFAzUm9hWE11Ym1WNGREMWxMbUZ5WnpvbmNtVjBkWEp1SnowOVBXVXVkSGx3WlQ4b2RHaHBjeTV5ZG1Gc1BYUm9hWE11WVhKblBXVXVZWEpuTEhSb2FYTXViV1YwYUc5a1BTZHlaWFIxY200bkxIUm9hWE11Ym1WNGREMG5aVzVrSnlrNkoyNXZjbTFoYkNjOVBUMWxMblI1Y0dVbUpuUW1KaWgwYUdsekxtNWxlSFE5ZENrc1FYMHNabWx1YVhOb09tWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkQ3h5UFhSb2FYTXVkSEo1Ulc1MGNtbGxjeTVzWlc1bmRHZ3RNVHN3UEQxeU95MHRjaWxwWmloMFBYUm9hWE11ZEhKNVJXNTBjbWxsYzF0eVhTeDBMbVpwYm1Gc2JIbE1iMk05UFQxbEtYSmxkSFZ5YmlCMGFHbHpMbU52YlhCc1pYUmxLSFF1WTI5dGNHeGxkR2x2Yml4MExtRm1kR1Z5VEc5aktTeDFLSFFwTEVGOUxHTmhkR05vT21aMWJtTjBhVzl1S0dVcGUyWnZjaWgyWVhJZ2RDeHlQWFJvYVhNdWRISjVSVzUwY21sbGN5NXNaVzVuZEdndE1Uc3dQRDF5T3kwdGNpbHBaaWgwUFhSb2FYTXVkSEo1Ulc1MGNtbGxjMXR5WFN4MExuUnllVXh2WXowOVBXVXBlM1poY2lCdVBYUXVZMjl0Y0d4bGRHbHZianRwWmlnbmRHaHliM2NuUFQwOWJpNTBlWEJsS1h0MllYSWdiejF1TG1GeVp6dDFLSFFwZlhKbGRIVnliaUJ2ZlhSb2NtOTNJRzVsZHlCRmNuSnZjaWduYVd4c1pXZGhiQ0JqWVhSamFDQmhkSFJsYlhCMEp5bDlMR1JsYkdWbllYUmxXV2xsYkdRNlpuVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUIwYUdsekxtUmxiR1ZuWVhSbFBYdHBkR1Z5WVhSdmNqcG9LR1VwTEhKbGMzVnNkRTVoYldVNmRDeHVaWGgwVEc5ak9uSjlMQ2R1WlhoMEp6MDlQWFJvYVhNdWJXVjBhRzlrSmlZb2RHaHBjeTVoY21jOWRtOXBaQ0F3S1N4QmZYMTlLR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhOOUtDbDhmRVoxYm1OMGFXOXVLQ2R5WlhSMWNtNGdkR2hwY3ljcEtDa3BmU3htZFc1amRHbHZiaWhsTEhRc2NpbDdKM1Z6WlNCemRISnBZM1FuTzJaMWJtTjBhVzl1SUc0b1pTeDBLWHRwWmlnaEtHVWdhVzV6ZEdGdVkyVnZaaUIwS1NsMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZERZVzV1YjNRZ1kyRnNiQ0JoSUdOc1lYTnpJR0Z6SUdFZ1puVnVZM1JwYjI0bktYMVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEN3blgxOWxjMDF2WkhWc1pTY3NlM1poYkhWbE9pRXdmU2s3ZG1GeUlHODlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0dVc2RDbDdabTl5S0haaGNpQnlMRzQ5TUR0dVBIUXViR1Z1WjNSb08yNHJLeWx5UFhSYmJsMHNjaTVsYm5WdFpYSmhZbXhsUFhJdVpXNTFiV1Z5WVdKc1pYeDhJVEVzY2k1amIyNW1hV2QxY21GaWJHVTlJVEFzSjNaaGJIVmxKMmx1SUhJbUppaHlMbmR5YVhSaFlteGxQU0V3S1N4UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aU3h5TG10bGVTeHlLWDF5WlhSMWNtNGdablZ1WTNScGIyNG9kQ3h5TEc0cGUzSmxkSFZ5YmlCeUppWmxLSFF1Y0hKdmRHOTBlWEJsTEhJcExHNG1KbVVvZEN4dUtTeDBmWDBvS1N4c1BYSW9NakV3S1N4aFBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQmxKaVpsTGw5ZlpYTk5iMlIxYkdVL1pUcDdaR1ZtWVhWc2REcGxmWDBvYkNrc2N6MXlLRGs0S1N4cFBXWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdaU2gwS1h0MllYSWdjajEwTG5ObGJtUXNiejEwTG1acGJHVXNiRDEwTG5KbGNVbGtPMjRvZEdocGN5eGxLU3gwYUdsekxuTmxibVE5Y2l4MGFHbHpMbVpwYkdVOWJ5eDBhR2x6TG5KbGNVbGtQV3c3ZG1GeUlITTlieTVpZFdabVpYSTdkR2hwY3k1amFHVmphM04xYlQwb01DeGhMbVJsWm1GMWJIUXBLRUZ5Y21GNUxtWnliMjBvY3lrcExIUm9hWE11YzJsNlpUMXpMbXhsYm1kMGFIMXlaWFIxY200Z2J5aGxMRnQ3YTJWNU9pZHlaWEYxWlhOMFZYQnNiMkZrSnl4MllXeDFaVHBtZFc1amRHbHZiaWdwZTNaaGNpQmxQWFJvYVhNdVptbHNaU3gwUFdVdVpHOWpkVzFsYm5SVWVYQmxMSEk5WlM1a2IyTjFiV1Z1ZEVadmNtMWhkQ3h1UFdVdVpHOWpkVzFsYm5SSlpDeHZQV1V1Wlhod2FYSmhkR2x2YmtSaGRHVXNiRDFsTG14cFptVjBhVzFsVm1Gc2FXUXNZVDFsTG5CaFoyVlVlWEJsTEhNOVpTNWlkV1ptWlhJc2FUMVBZbXBsWTNRdVlYTnphV2R1S0hSb2FYTXVabWxzWlM1d1lYTnpkR2h5YjNWbmFIeDhlMzBzZTJSdlkzVnRaVzUwWDNWd2JHOWhaRG9oTUgwcExHTTllM0psY1Y5cFpEcDBhR2x6TG5KbGNVbGtMSEJoYzNOMGFISnZkV2RvT21rc1pHOWpkVzFsYm5SZmRYQnNiMkZrT2pFc1pHOWpkVzFsYm5SZmRIbHdaVHAwTEdSdlkzVnRaVzUwWDJadmNtMWhkRHB5TG5SdlZYQndaWEpEWVhObEtDa3NaWGh3YVhKaGRHbHZibDlrWVhSbE9tOHNaRzlqZFcxbGJuUmZhV1E2Yml4bWFXeGxYM05wZW1VNmN5NXNaVzVuZEdnc1pYaHdaV04wWldSZlkyaGxZMnR6ZFcwNmRHaHBjeTVqYUdWamEzTjFiWDA3WVNZbUtHTXVjR0ZuWlY5MGVYQmxQV0VwTEd3bUppaGpMbXhwWm1WMGFXMWxYM1poYkdsa1BXd3BMSFJvYVhNdWMyVnVaQ2hLVTA5T0xuTjBjbWx1WjJsbWVTaGpLU2w5ZlN4N2EyVjVPaWRvWVc1a2JHVk5aWE56WVdkbEp5eDJZV3gxWlRwbWRXNWpkR2x2YmlobEtYdDJZWElnZEQxbExtVnljbTl5TEhJOVpTNWtiMk4xYldWdWRGOTFjR3h2WVdRc2JqMWxMbkJoYzNOMGFISnZkV2RvTzJsbUtIUXBjbVYwZFhKdWUzZGhjbTVwYm1jNmRDNWpiMlJsTEcxbGMzTmhaMlU2ZEM1dFpYTnpZV2RsTEhCaGMzTjBhSEp2ZFdkb09tNTlPM1poY2lCdlBYSXVZMmhsWTJ0emRXMHNiRDF5TG5OcGVtVXNZVDF5TG5Wd2JHOWhaRjlwWkN4cFBYSXVZMkZzYkY5MGVYQmxPMmxtS0NGdktYSmxkSFZ5YmlCMmIybGtJSFJvYVhNdWMzUmhjblJDYVc1aGNubFZjR3h2WVdRb1QySnFaV04wTG1GemMybG5iaWg3ZlN4MGFHbHpMbVpwYkdVc2UzVndiRzloWkVsa09tRXNZMkZzYkZSNWNHVTZhWDBwS1R0cFppaHNJVDA5ZEdocGN5NXphWHBsS1hSb2NtOTNLREFzY3k1amNtVmhkR1ZGY25KdmNpa29KMU5wZW1WTmFYTnRZWFJqYUNjc0owWnBiR1VnYzJsNlpTQmtiMlZ6SUc1dmRDQnRZWFJqYUNjc2JpazdhV1lvYnlFOVBYUm9hWE11WTJobFkydHpkVzBwZEdoeWIzY29NQ3h6TG1OeVpXRjBaVVZ5Y205eUtTZ25RMmhsWTJ0emRXMU5hWE50WVhSamFDY3NKME5vWldOcmMzVnRJR1J2WlhNZ2JtOTBJRzFoZEdOb0p5eHVLVHR5WlhSMWNtNTdaRzlqZFcxbGJuUmZkWEJzYjJGa09uSXNjR0Z6YzNSb2NtOTFaMmc2Ym4xOWZTeDdhMlY1T2lkemRHRnlkRUpwYm1GeWVWVndiRzloWkNjc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlNsN1ptOXlLSFpoY2lCMFBYUm9hWE1zY2owb01DeHpMbUZrWkUxbGRHRmtZWFJoS1Nnb01DeHpMbWRsYm1WeVlYUmxRMmgxYm10ektTaGxMbUoxWm1abGNpeGxLU3hsS1N4dVBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQjBMbk5sYm1Rb1pTbDlMRzg5TUR0dlBISXViR1Z1WjNSb08yOHJLeWx1S0hKYmIxMHNieXh5S1gxOVhTa3NaWDBvS1R0MExtUmxabUYxYkhROWFYMHNablZ1WTNScGIyNG9aU3gwTEhJcGV5aG1kVzVqZEdsdmJpZ3BlM1poY2lCMFBYSW9NakV4S1N4dVBYSW9PVGtwTG5WMFpqZ3NiejF5S0RJeE1pa3NjejF5S0RrNUtTNWlhVzRzYkQxbWRXNWpkR2x2YmlobExISXBlMlV1WTI5dWMzUnlkV04wYjNJOVBWTjBjbWx1Wno5eUppWW5ZbWx1WVhKNUp6MDlQWEl1Wlc1amIyUnBibWMvWlQxekxuTjBjbWx1WjFSdlFubDBaWE1vWlNrNlpUMXVMbk4wY21sdVoxUnZRbmwwWlhNb1pTazZieWhsS1Q5bFBVRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHVXNNQ2s2SVVGeWNtRjVMbWx6UVhKeVlYa29aU2ttSmlobFBXVXVkRzlUZEhKcGJtY29LU2s3Wm05eUtIWmhjaUJ3UFhRdVlubDBaWE5VYjFkdmNtUnpLR1VwTEhVOU9DcGxMbXhsYm1kMGFDeG5QVEUzTXpJMU9EUXhPVE1zWVQwdE1qY3hOek16T0RjNUxHZzlMVEUzTXpJMU9EUXhPVFFzWXoweU56RTNNek00Tnpnc1pEMHdPMlE4Y0M1c1pXNW5kR2c3WkNzcktYQmJaRjA5TVRZM01URTVNelVtS0hCYlpGMDhQRGg4Y0Z0a1hUNCtQakkwS1h3ME1qYzRNalUxTXpZd0ppaHdXMlJkUER3eU5IeHdXMlJkUGo0K09DazdjRnQxUGo0K05WMThQVEV5T0R3OGRTVXpNaXh3V3loMUt6WTBQajQrT1R3OE5Da3JNVFJkUFhVN1ptOXlLSFpoY2lCcFBXd3VYMlptTEhrOWJDNWZaMmNzWmoxc0xsOW9hQ3h0UFd3dVgybHBMR1E5TUR0a1BIQXViR1Z1WjNSb08yUXJQVEUyS1h0MllYSWdSVDFuTEhnOVlTeGZQV2dzVXoxak8yYzlhU2huTEdFc2FDeGpMSEJiWkNzd1hTdzNMQzAyT0RBNE56WTVNellwTEdNOWFTaGpMR2NzWVN4b0xIQmJaQ3N4WFN3eE1pd3RNemc1TlRZME5UZzJLU3hvUFdrb2FDeGpMR2NzWVN4d1cyUXJNbDBzTVRjc05qQTJNVEExT0RFNUtTeGhQV2tvWVN4b0xHTXNaeXh3VzJRck0xMHNNaklzTFRFd05EUTFNalV6TXpBcExHYzlhU2huTEdFc2FDeGpMSEJiWkNzMFhTdzNMQzB4TnpZME1UZzRPVGNwTEdNOWFTaGpMR2NzWVN4b0xIQmJaQ3MxWFN3eE1pd3hNakF3TURnd05ESTJLU3hvUFdrb2FDeGpMR2NzWVN4d1cyUXJObDBzTVRjc0xURTBOek15TXpFek5ERXBMR0U5YVNoaExHZ3NZeXhuTEhCYlpDczNYU3d5TWl3dE5EVTNNRFU1T0RNcExHYzlhU2huTEdFc2FDeGpMSEJiWkNzNFhTdzNMREUzTnpBd016VTBNVFlwTEdNOWFTaGpMR2NzWVN4b0xIQmJaQ3M1WFN3eE1pd3RNVGsxT0RReE5EUXhOeWtzYUQxcEtHZ3NZeXhuTEdFc2NGdGtLekV3WFN3eE55d3ROREl3TmpNcExHRTlhU2hoTEdnc1l5eG5MSEJiWkNzeE1WMHNNaklzTFRFNU9UQTBNRFF4TmpJcExHYzlhU2huTEdFc2FDeGpMSEJiWkNzeE1sMHNOeXd4T0RBME5qQXpOamd5S1N4alBXa29ZeXhuTEdFc2FDeHdXMlFyTVROZExERXlMQzAwTURNME1URXdNU2tzYUQxcEtHZ3NZeXhuTEdFc2NGdGtLekUwWFN3eE55d3RNVFV3TWpBd01qSTVNQ2tzWVQxcEtHRXNhQ3hqTEdjc2NGdGtLekUxWFN3eU1pd3hNak0yTlRNMU16STVLU3huUFhrb1p5eGhMR2dzWXl4d1cyUXJNVjBzTlN3dE1UWTFOemsyTlRFd0tTeGpQWGtvWXl4bkxHRXNhQ3h3VzJRck5sMHNPU3d0TVRBMk9UVXdNVFl6TWlrc2FEMTVLR2dzWXl4bkxHRXNjRnRrS3pFeFhTd3hOQ3cyTkRNM01UYzNNVE1wTEdFOWVTaGhMR2dzWXl4bkxIQmJaQ3N3WFN3eU1Dd3RNemN6T0RrM016QXlLU3huUFhrb1p5eGhMR2dzWXl4d1cyUXJOVjBzTlN3dE56QXhOVFU0TmpreEtTeGpQWGtvWXl4bkxHRXNhQ3h3VzJRck1UQmRMRGtzTXpnd01UWXdPRE1wTEdnOWVTaG9MR01zWnl4aExIQmJaQ3N4TlYwc01UUXNMVFkyTURRM09ETXpOU2tzWVQxNUtHRXNhQ3hqTEdjc2NGdGtLelJkTERJd0xDMDBNRFUxTXpjNE5EZ3BMR2M5ZVNobkxHRXNhQ3hqTEhCYlpDczVYU3cxTERVMk9EUTBOalF6T0Nrc1l6MTVLR01zWnl4aExHZ3NjRnRrS3pFMFhTdzVMQzB4TURFNU9EQXpOamt3S1N4b1BYa29hQ3hqTEdjc1lTeHdXMlFyTTEwc01UUXNMVEU0TnpNMk16azJNU2tzWVQxNUtHRXNhQ3hqTEdjc2NGdGtLemhkTERJd0xERXhOak0xTXpFMU1ERXBMR2M5ZVNobkxHRXNhQ3hqTEhCYlpDc3hNMTBzTlN3dE1UUTBORFk0TVRRMk55a3NZejE1S0dNc1p5eGhMR2dzY0Z0a0t6SmRMRGtzTFRVeE5EQXpOemcwS1N4b1BYa29hQ3hqTEdjc1lTeHdXMlFyTjEwc01UUXNNVGN6TlRNeU9EUTNNeWtzWVQxNUtHRXNhQ3hqTEdjc2NGdGtLekV5WFN3eU1Dd3RNVGt5TmpZd056Y3pOQ2tzWnoxbUtHY3NZU3hvTEdNc2NGdGtLelZkTERRc0xUTTNPRFUxT0Nrc1l6MW1LR01zWnl4aExHZ3NjRnRrS3poZExERXhMQzB5TURJeU5UYzBORFl6S1N4b1BXWW9hQ3hqTEdjc1lTeHdXMlFyTVRGZExERTJMREU0TXprd016QTFOaklwTEdFOVppaGhMR2dzWXl4bkxIQmJaQ3N4TkYwc01qTXNMVE0xTXpBNU5UVTJLU3huUFdZb1p5eGhMR2dzWXl4d1cyUXJNVjBzTkN3dE1UVXpNRGs1TWpBMk1Da3NZejFtS0dNc1p5eGhMR2dzY0Z0a0t6UmRMREV4TERFeU56STRPVE16TlRNcExHZzlaaWhvTEdNc1p5eGhMSEJiWkNzM1hTd3hOaXd0TVRVMU5EazNOak15S1N4aFBXWW9ZU3hvTEdNc1p5eHdXMlFyTVRCZExESXpMQzB4TURrME56TXdOalF3S1N4blBXWW9aeXhoTEdnc1l5eHdXMlFyTVROZExEUXNOamd4TWpjNU1UYzBLU3hqUFdZb1l5eG5MR0VzYUN4d1cyUXJNRjBzTVRFc0xUTTFPRFV6TnpJeU1pa3NhRDFtS0dnc1l5eG5MR0VzY0Z0a0t6TmRMREUyTEMwM01qSTFNakU1TnprcExHRTlaaWhoTEdnc1l5eG5MSEJiWkNzMlhTd3lNeXczTmpBeU9URTRPU2tzWnoxbUtHY3NZU3hvTEdNc2NGdGtLemxkTERRc0xUWTBNRE0yTkRRNE55a3NZejFtS0dNc1p5eGhMR2dzY0Z0a0t6RXlYU3d4TVN3dE5ESXhPREUxT0RNMUtTeG9QV1lvYUN4akxHY3NZU3h3VzJRck1UVmRMREUyTERVek1EYzBNalV5TUNrc1lUMW1LR0VzYUN4akxHY3NjRnRrS3pKZExESXpMQzA1T1RVek16ZzJOVEVwTEdjOWJTaG5MR0VzYUN4akxIQmJaQ3N3WFN3MkxDMHhPVGcyTXpBNE5EUXBMR005YlNoakxHY3NZU3hvTEhCYlpDczNYU3d4TUN3eE1USTJPRGt4TkRFMUtTeG9QVzBvYUN4akxHY3NZU3h3VzJRck1UUmRMREUxTEMweE5ERTJNelUwT1RBMUtTeGhQVzBvWVN4b0xHTXNaeXh3VzJRck5WMHNNakVzTFRVM05ETTBNRFUxS1N4blBXMG9aeXhoTEdnc1l5eHdXMlFyTVRKZExEWXNNVGN3TURRNE5UVTNNU2tzWXoxdEtHTXNaeXhoTEdnc2NGdGtLek5kTERFd0xDMHhPRGswT1RnMk5qQTJLU3hvUFcwb2FDeGpMR2NzWVN4d1cyUXJNVEJkTERFMUxDMHhNRFV4TlRJektTeGhQVzBvWVN4b0xHTXNaeXh3VzJRck1WMHNNakVzTFRJd05UUTVNakkzT1RrcExHYzliU2huTEdFc2FDeGpMSEJiWkNzNFhTdzJMREU0TnpNek1UTXpOVGtwTEdNOWJTaGpMR2NzWVN4b0xIQmJaQ3N4TlYwc01UQXNMVE13TmpFeE56UTBLU3hvUFcwb2FDeGpMR2NzWVN4d1cyUXJObDBzTVRVc0xURTFOakF4T1Rnek9EQXBMR0U5YlNoaExHZ3NZeXhuTEhCYlpDc3hNMTBzTWpFc01UTXdPVEUxTVRZME9Ta3NaejF0S0djc1lTeG9MR01zY0Z0a0t6UmRMRFlzTFRFME5UVXlNekEzTUNrc1l6MXRLR01zWnl4aExHZ3NjRnRrS3pFeFhTd3hNQ3d0TVRFeU1ESXhNRE0zT1Nrc2FEMXRLR2dzWXl4bkxHRXNjRnRrS3pKZExERTFMRGN4T0RjNE56STFPU2tzWVQxdEtHRXNhQ3hqTEdjc2NGdGtLemxkTERJeExDMHpORE0wT0RVMU5URXBMR2M5Wnl0RlBqNCtNQ3hoUFdFcmVENCtQakFzYUQxb0sxOCtQajR3TEdNOVl5dFRQajQrTUgxeVpYUjFjbTRnZEM1bGJtUnBZVzRvVzJjc1lTeG9MR05kS1gwN2JDNWZabVk5Wm5WdVkzUnBiMjRvWlN4eUxHOHNiQ3hoTEdrc2N5bDdkbUZ5SUhROVpTc29jaVp2Zkg1eUptd3BLeWhoUGo0K01Da3JjenR5WlhSMWNtNG9kRHc4YVh4MFBqNCtNekl0YVNrcmNuMHNiQzVmWjJjOVpuVnVZM1JwYjI0b1pTeHlMRzhzYkN4aExHa3NjeWw3ZG1GeUlIUTlaU3NvY2lac2ZHOG1mbXdwS3loaFBqNCtNQ2tyY3p0eVpYUjFjbTRvZER3OGFYeDBQajQrTXpJdGFTa3JjbjBzYkM1ZmFHZzlablZ1WTNScGIyNG9aU3h5TEc4c2JDeGhMR2tzY3lsN2RtRnlJSFE5WlNzb2NsNXZYbXdwS3loaFBqNCtNQ2tyY3p0eVpYUjFjbTRvZER3OGFYeDBQajQrTXpJdGFTa3JjbjBzYkM1ZmFXazlablZ1WTNScGIyNG9aU3h5TEc4c2JDeGhMR2tzY3lsN2RtRnlJSFE5WlNzb2IxNG9jbngrYkNrcEt5aGhQajQrTUNrcmN6dHlaWFIxY200b2REdzhhWHgwUGo0K016SXRhU2tyY24wc2JDNWZZbXh2WTJ0emFYcGxQVEUyTEd3dVgyUnBaMlZ6ZEhOcGVtVTlNVFlzWlM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2NpbDdhV1lvWlQwOVBYWnZhV1FnTUh4OGJuVnNiRDA5UFdVcGRHaHliM2NnYm1WM0lFVnljbTl5S0NkSmJHeGxaMkZzSUdGeVozVnRaVzUwSUNjclpTazdkbUZ5SUc0OWRDNTNiM0prYzFSdlFubDBaWE1vYkNobExISXBLVHR5WlhSMWNtNGdjaVltY2k1aGMwSjVkR1Z6UDI0NmNpWW1jaTVoYzFOMGNtbHVaejl6TG1KNWRHVnpWRzlUZEhKcGJtY29iaWs2ZEM1aWVYUmxjMVJ2U0dWNEtHNHBmWDBwS0NsOUxHWjFibU4wYVc5dUtHVXBleWhtZFc1amRHbHZiaWdwZTNaaGNpQjBQU2RCUWtORVJVWkhTRWxLUzB4TlRrOVFVVkpUVkZWV1YxaFpXbUZpWTJSbFptZG9hV3ByYkcxdWIzQnhjbk4wZFhaM2VIbDZNREV5TXpRMU5qYzRPU3N2Snl4eVBYdHliM1JzT21aMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlHVThQSFI4WlQ0K1BqTXlMWFI5TEhKdmRISTZablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTRnWlR3OE16SXRkSHhsUGo0K2RIMHNaVzVrYVdGdU9tWjFibU4wYVc5dUtHVXBlMmxtS0dVdVkyOXVjM1J5ZFdOMGIzSTlQVTUxYldKbGNpbHlaWFIxY200Z01UWTNNVEU1TXpVbWNpNXliM1JzS0dVc09DbDhOREkzT0RJMU5UTTJNQ1p5TG5KdmRHd29aU3d5TkNrN1ptOXlLSFpoY2lCMFBUQTdkRHhsTG14bGJtZDBhRHQwS3lzcFpWdDBYVDF5TG1WdVpHbGhiaWhsVzNSZEtUdHlaWFIxY200Z1pYMHNjbUZ1Wkc5dFFubDBaWE02Wm5WdVkzUnBiMjRvWlNsN1ptOXlLSFpoY2lCMFBWdGRPekE4WlR0bExTMHBkQzV3ZFhOb0tIQW9NalUyS2sxaGRHZ3VjbUZ1Wkc5dEtDa3BLVHR5WlhSMWNtNGdkSDBzWW5sMFpYTlViMWR2Y21Sek9tWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkRDFiWFN4eVBUQXNiajB3TzNJOFpTNXNaVzVuZEdnN2Npc3JMRzRyUFRncGRGdHVQajQrTlYxOFBXVmJjbDA4UERJMExXNGxNekk3Y21WMGRYSnVJSFI5TEhkdmNtUnpWRzlDZVhSbGN6cG1kVzVqZEdsdmJpaGxLWHRtYjNJb2RtRnlJSFE5VzEwc2NqMHdPM0k4TXpJcVpTNXNaVzVuZEdnN2NpczlPQ2wwTG5CMWMyZ29NalUxSm1WYmNqNCtQalZkUGo0K01qUXRjaVV6TWlrN2NtVjBkWEp1SUhSOUxHSjVkR1Z6Vkc5SVpYZzZablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFZ0ZExISTlNRHR5UEdVdWJHVnVaM1JvTzNJckt5bDBMbkIxYzJnb0tHVmJjbDArUGo0MEtTNTBiMU4wY21sdVp5Z3hOaWtwTEhRdWNIVnphQ2dvTVRVbVpWdHlYU2t1ZEc5VGRISnBibWNvTVRZcEtUdHlaWFIxY200Z2RDNXFiMmx1S0NjbktYMHNhR1Y0Vkc5Q2VYUmxjenBtZFc1amRHbHZiaWhsS1h0bWIzSW9kbUZ5SUhROVcxMHNjajB3TzNJOFpTNXNaVzVuZEdnN2NpczlNaWwwTG5CMWMyZ29jR0Z5YzJWSmJuUW9aUzV6ZFdKemRISW9jaXd5S1N3eE5pa3BPM0psZEhWeWJpQjBmU3hpZVhSbGMxUnZRbUZ6WlRZME9tWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdjaXh1UFZ0ZExHODlNRHR2UEdVdWJHVnVaM1JvTzI4clBUTXBlM0k5WlZ0dlhUdzhNVFo4WlZ0dkt6RmRQRHc0ZkdWYmJ5c3lYVHRtYjNJb2RtRnlJR3c5TURzMFBtdzdiQ3NyS1RncWJ5czJLbXc4UFRncVpTNXNaVzVuZEdnL2JpNXdkWE5vS0hRdVkyaGhja0YwS0RZekpuSStQajQyS2lnekxXd3BLU2s2Ymk1d2RYTm9LQ2M5SnlsOWNtVjBkWEp1SUc0dWFtOXBiaWduSnlsOUxHSmhjMlUyTkZSdlFubDBaWE02Wm5WdVkzUnBiMjRvWlNsN1pUMWxMbkpsY0d4aFkyVW9MMXRlUVMxYU1DMDVLMXhjTDEwdmFXY3NKeWNwTzJadmNpaDJZWElnY2oxYlhTeHVQVEFzYkQwd08yNDhaUzVzWlc1bmRHZzdiRDBySzI0bE5Da3dJVDFzSmlaeUxuQjFjMmdvS0hRdWFXNWtaWGhQWmlobExtTm9ZWEpCZENodUxURXBLU1p2S0RJc0xUSXFiQ3M0S1MweEtUdzhNaXBzZkhRdWFXNWtaWGhQWmlobExtTm9ZWEpCZENodUtTaytQajQyTFRJcWJDazdjbVYwZFhKdUlISjlmVHRsTG1WNGNHOXlkSE05Y24wcEtDbDlMR1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTbDdjbVYwZFhKdUlTRmxMbU52Ym5OMGNuVmpkRzl5SmlZblpuVnVZM1JwYjI0blBUMTBlWEJsYjJZZ1pTNWpiMjV6ZEhKMVkzUnZjaTVwYzBKMVptWmxjaVltWlM1amIyNXpkSEoxWTNSdmNpNXBjMEoxWm1abGNpaGxLWDFtZFc1amRHbHZiaUJ5S0dVcGUzSmxkSFZ5YmlkbWRXNWpkR2x2YmljOVBYUjVjR1Z2WmlCbExuSmxZV1JHYkc5aGRFeEZKaVluWm5WdVkzUnBiMjRuUFQxMGVYQmxiMllnWlM1emJHbGpaU1ltZENobExuTnNhV05sS0RBc01Da3BmV1V1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYm5Wc2JDRTlaU1ltS0hRb1pTbDhmSElvWlNsOGZDRWhaUzVmYVhOQ2RXWm1aWElwZlgxZEtWc25aR1ZtWVhWc2RDZGRmU2s3SWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVNJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJpbmFyeS1jb20vYmluYXJ5LWRvY3VtZW50LXVwbG9hZGVyL0RvY3VtZW50VXBsb2FkZXIuanNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vQ29tcG9uZW50cy9maWxlLXVwbG9hZGVyLWNvbnRhaW5lci9pbmRleC5qc1wiOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCJcXG4vLyBFWFBPUlRTXFxuX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcXG4gIFxcXCJkZWZhdWx0XFxcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29tcG9uZW50c19maWxlX3VwbG9hZGVyX2NvbnRhaW5lcilcXG59KTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFxcXCJyZWFjdFxcXCJcXG52YXIgZXh0ZXJuYWxfcmVhY3RfID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcXFwicmVhY3RcXFwiKTtcXG52YXIgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcmVhY3RfKTtcXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXFxudmFyIHByb3BfdHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFxcXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1xcXCIpO1xcbnZhciBwcm9wX3R5cGVzX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHByb3BfdHlwZXMpO1xcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcXG52YXIgY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oXFxcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXFxcIik7XFxudmFyIGNsYXNzbmFtZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oY2xhc3NuYW1lcyk7XFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcXFwiQGRlcml2L2NvbXBvbmVudHNcXFwiXFxudmFyIGNvbXBvbmVudHNfID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcXFwiQGRlcml2L2NvbXBvbmVudHNcXFwiKTtcXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFxcXCJAZGVyaXYvc2hhcmVkXFxcIlxcbnZhciBzaGFyZWRfID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcXFwiQGRlcml2L3NoYXJlZFxcXCIpO1xcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXFxcIkBkZXJpdi90cmFuc2xhdGlvbnNcXFwiXFxudmFyIHRyYW5zbGF0aW9uc18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFxcXCJAZGVyaXYvdHJhbnNsYXRpb25zXFxcIik7XFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJpbmFyeS1jb20vYmluYXJ5LWRvY3VtZW50LXVwbG9hZGVyL0RvY3VtZW50VXBsb2FkZXIuanNcXG52YXIgRG9jdW1lbnRVcGxvYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oXFxcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmluYXJ5LWNvbS9iaW5hcnktZG9jdW1lbnQtdXBsb2FkZXIvRG9jdW1lbnRVcGxvYWRlci5qc1xcXCIpO1xcbnZhciBEb2N1bWVudFVwbG9hZGVyX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKERvY3VtZW50VXBsb2FkZXIpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL0NvbXBvbmVudHMvZmlsZS11cGxvYWRlci1jb250YWluZXIvZmlsZS11cGxvYWRlci5qc3hcXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxcblxcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXFxcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxcXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXFxcIik7IH1cXG5cXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFxcXCJzdHJpbmdcXFwiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXFxcIk9iamVjdFxcXCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFxcXCJNYXBcXFwiIHx8IG4gPT09IFxcXCJTZXRcXFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFxcXCJBcmd1bWVudHNcXFwiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxcblxcbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxcblxcbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFxcXCJ1bmRlZmluZWRcXFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcXFwicmV0dXJuXFxcIl0gIT0gbnVsbCkgX2lbXFxcInJldHVyblxcXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxcblxcbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbnZhciBVcGxvYWRNZXNzYWdlID0gZnVuY3Rpb24gVXBsb2FkTWVzc2FnZSgpIHtcXG4gIHZhciBfUmVhY3QkdXNlQ29udGV4dCA9IGV4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS51c2VDb250ZXh0KHNoYXJlZF8uUGxhdGZvcm1Db250ZXh0KSxcXG4gICAgICBpc19kYXNoYm9hcmQgPSBfUmVhY3QkdXNlQ29udGV4dC5pc19kYXNoYm9hcmQ7XFxuXFxuICByZXR1cm4gLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KChleHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkpLkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c18uSWNvbiwge1xcbiAgICBpY29uOiBcXFwiSWNDbG91ZFVwbG9hZFxcXCIsXFxuICAgIGNsYXNzTmFtZTogXFxcImRjLWZpbGUtZHJvcHpvbmVfX21lc3NhZ2UtaWNvblxcXCIsXFxuICAgIHNpemU6IDUwXFxuICB9KSwgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXFxcImRjLWZpbGUtZHJvcHpvbmVfX21lc3NhZ2Utc3VidGl0bGVcXFwiXFxuICB9LCBpc19kYXNoYm9hcmQgJiYgKDAsc2hhcmVkXy5pc01vYmlsZSkoKSA/ICgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdUYXAgaGVyZSB0byB1cGxvYWQgKEpQRUcgIEpQRyAgUE5HICBQREYgIEdJRiknKSA6ICgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdEcm9wIGZpbGUgKEpQRUcgIEpQRyAgUE5HICBQREYgIEdJRikgb3IgY2xpY2sgaGVyZSB0byB1cGxvYWQnKSkpO1xcbn07XFxuXFxudmFyIGZpbGVSZWFkRXJyb3JNZXNzYWdlID0gZnVuY3Rpb24gZmlsZVJlYWRFcnJvck1lc3NhZ2UoZmlsZW5hbWUpIHtcXG4gIHJldHVybiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnVW5hYmxlIHRvIHJlYWQgZmlsZSB7e25hbWV9fScsIHtcXG4gICAgbmFtZTogZmlsZW5hbWVcXG4gIH0pO1xcbn07XFxuXFxudmFyIEZpbGVVcGxvYWRlciA9IC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XFxuICB2YXIgb25GaWxlRHJvcCA9IF9yZWYub25GaWxlRHJvcCxcXG4gICAgICBnZXRTb2NrZXQgPSBfcmVmLmdldFNvY2tldDtcXG5cXG4gIHZhciBfdXNlU3RhdGVDYWxsYmFjayA9ICgwLGNvbXBvbmVudHNfLnVzZVN0YXRlQ2FsbGJhY2spKHtcXG4gICAgZmlsZXM6IFtdLFxcbiAgICBlcnJvcl9tZXNzYWdlOiBudWxsXFxuICB9KSxcXG4gICAgICBfdXNlU3RhdGVDYWxsYmFjazIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGVDYWxsYmFjaywgMiksXFxuICAgICAgZG9jdW1lbnRfZmlsZSA9IF91c2VTdGF0ZUNhbGxiYWNrMlswXSxcXG4gICAgICBzZXREb2N1bWVudEZpbGUgPSBfdXNlU3RhdGVDYWxsYmFjazJbMV07XFxuXFxuICB2YXIgaGFuZGxlQWNjZXB0ZWRGaWxlcyA9IGZ1bmN0aW9uIGhhbmRsZUFjY2VwdGVkRmlsZXMoZmlsZXMpIHtcXG4gICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcXG4gICAgICBzZXREb2N1bWVudEZpbGUoe1xcbiAgICAgICAgZmlsZXM6IGZpbGVzLFxcbiAgICAgICAgZXJyb3JfbWVzc2FnZTogbnVsbFxcbiAgICAgIH0sIGZ1bmN0aW9uIChmaWxlKSB7XFxuICAgICAgICBvbkZpbGVEcm9wKGZpbGUpO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9O1xcblxcbiAgdmFyIGhhbmRsZVJlamVjdGVkRmlsZXMgPSBmdW5jdGlvbiBoYW5kbGVSZWplY3RlZEZpbGVzKGZpbGVzKSB7XFxuICAgIHZhciBpc19maWxlX3Rvb19sYXJnZSA9IGZpbGVzLmxlbmd0aCA+IDAgJiYgZmlsZXNbMF0uZmlsZS5zaXplID4gc2hhcmVkXy5tYXhfZG9jdW1lbnRfc2l6ZTtcXG4gICAgdmFyIHN1cHBvcnRlZF9maWxlcyA9IGZpbGVzLmZpbHRlcihmdW5jdGlvbiAoZWFjaF9maWxlKSB7XFxuICAgICAgcmV0dXJuICgwLHNoYXJlZF8uZ2V0U3VwcG9ydGVkRmlsZXMpKGVhY2hfZmlsZS5maWxlLm5hbWUpO1xcbiAgICB9KTtcXG4gICAgdmFyIGVycm9yX21lc3NhZ2UgPSBpc19maWxlX3Rvb19sYXJnZSAmJiBzdXBwb3J0ZWRfZmlsZXMubGVuZ3RoID4gMCA/ICgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdGaWxlIHNpemUgc2hvdWxkIGJlIDhNQiBvciBsZXNzJykgOiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnRmlsZSB1cGxvYWRlZCBpcyBub3Qgc3VwcG9ydGVkJyk7XFxuICAgIHNldERvY3VtZW50RmlsZSh7XFxuICAgICAgZmlsZXM6IGZpbGVzLFxcbiAgICAgIGVycm9yX21lc3NhZ2U6IGVycm9yX21lc3NhZ2VcXG4gICAgfSwgZnVuY3Rpb24gKGZpbGUpIHtcXG4gICAgICByZXR1cm4gb25GaWxlRHJvcChmaWxlKTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgdmFyIHJlbW92ZUZpbGUgPSBmdW5jdGlvbiByZW1vdmVGaWxlKCkge1xcbiAgICBzZXREb2N1bWVudEZpbGUoe1xcbiAgICAgIGZpbGVzOiBbXSxcXG4gICAgICBlcnJvcl9tZXNzYWdlOiBudWxsXFxuICAgIH0sIGZ1bmN0aW9uIChmaWxlKSB7XFxuICAgICAgcmV0dXJuIG9uRmlsZURyb3AoZmlsZSk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIHZhciB1cGxvYWQgPSBmdW5jdGlvbiB1cGxvYWQoKSB7XFxuICAgIGlmICghIWRvY3VtZW50X2ZpbGUuZXJyb3JfbWVzc2FnZSB8fCBkb2N1bWVudF9maWxlLmZpbGVzLmxlbmd0aCA8IDEpIHJldHVybiAwOyAvLyBGaWxlIHVwbG9hZGVyIGluc3RhbmNlIGNvbm5lY3RlZCB0byBiaW5hcnlfc29ja2V0XFxuXFxuICAgIHZhciB1cGxvYWRlciA9IG5ldyAoRG9jdW1lbnRVcGxvYWRlcl9kZWZhdWx0KCkpKHtcXG4gICAgICBjb25uZWN0aW9uOiBnZXRTb2NrZXQoKVxcbiAgICB9KTtcXG4gICAgdmFyIGlzX2FueV9maWxlX2Vycm9yID0gZmFsc2U7XFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XFxuICAgICAgKDAsc2hhcmVkXy5jb21wcmVzc0ltYWdlRmlsZXMpKGRvY3VtZW50X2ZpbGUuZmlsZXMpLnRoZW4oZnVuY3Rpb24gKGZpbGVzX3RvX3Byb2Nlc3MpIHtcXG4gICAgICAgICgwLHNoYXJlZF8ucmVhZEZpbGVzKShmaWxlc190b19wcm9jZXNzLCBmaWxlUmVhZEVycm9yTWVzc2FnZSkudGhlbihmdW5jdGlvbiAocHJvY2Vzc2VkX2ZpbGVzKSB7XFxuICAgICAgICAgIHByb2Nlc3NlZF9maWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XFxuICAgICAgICAgICAgaWYgKGZpbGUubWVzc2FnZSkge1xcbiAgICAgICAgICAgICAgaXNfYW55X2ZpbGVfZXJyb3IgPSB0cnVlO1xcbiAgICAgICAgICAgICAgcmVqZWN0KGZpbGUpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSk7XFxuICAgICAgICAgIHZhciB0b3RhbF90b191cGxvYWQgPSBwcm9jZXNzZWRfZmlsZXMubGVuZ3RoO1xcblxcbiAgICAgICAgICBpZiAoaXNfYW55X2ZpbGVfZXJyb3IgfHwgIXRvdGFsX3RvX3VwbG9hZCkge1xcbiAgICAgICAgICAgIG9uRmlsZURyb3AodW5kZWZpbmVkKTtcXG4gICAgICAgICAgICByZXR1cm47IC8vIGRvbid0IHN0YXJ0IHN1Ym1pdHRpbmcgZmlsZXMgdW50aWwgYWxsIGZyb250LWVuZCB2YWxpZGF0aW9uIGNoZWNrcyBwYXNzXFxuICAgICAgICAgIH0gLy8gc2VuZCBmaWxlc1xcblxcblxcbiAgICAgICAgICB2YXIgdXBsb2FkZXJfcHJvbWlzZSA9IHVwbG9hZGVyLnVwbG9hZChwcm9jZXNzZWRfZmlsZXNbMF0pLnRoZW4oZnVuY3Rpb24gKGFwaV9yZXNwb25zZSkge1xcbiAgICAgICAgICAgIHJldHVybiBhcGlfcmVzcG9uc2U7XFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgICByZXNvbHZlKHVwbG9hZGVyX3Byb21pc2UpO1xcbiAgICAgICAgfSk7XFxuICAgICAgfSk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xcbiAgICByZXR1cm4ge1xcbiAgICAgIHVwbG9hZDogdXBsb2FkXFxuICAgIH07XFxuICB9KTtcXG4gIHJldHVybiAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoKGV4dGVybmFsX3JlYWN0X2RlZmF1bHQoKSkuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjb21wb25lbnRzXy5GaWxlRHJvcHpvbmUsIHtcXG4gICAgYWNjZXB0OiBzaGFyZWRfLnN1cHBvcnRlZF9maWxldHlwZXMsXFxuICAgIGVycm9yX21lc3NhZ2U6ICgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdQbGVhc2UgdXBsb2FkIHN1cHBvcnRlZCBmaWxlIHR5cGUuJyksXFxuICAgIGZpbGVuYW1lX2xpbWl0OiAyNixcXG4gICAgaG92ZXJfbWVzc2FnZTogKDAsdHJhbnNsYXRpb25zXy5sb2NhbGl6ZSkoJ0Ryb3AgZmlsZXMgaGVyZS4uJyksXFxuICAgIG1heF9zaXplOiBzaGFyZWRfLm1heF9kb2N1bWVudF9zaXplLFxcbiAgICBtZXNzYWdlOiAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoVXBsb2FkTWVzc2FnZSwgbnVsbCksXFxuICAgIG11bHRpcGxlOiBmYWxzZSxcXG4gICAgb25Ecm9wQWNjZXB0ZWQ6IGhhbmRsZUFjY2VwdGVkRmlsZXMsXFxuICAgIG9uRHJvcFJlamVjdGVkOiBoYW5kbGVSZWplY3RlZEZpbGVzLFxcbiAgICB2YWxpZGF0aW9uX2Vycm9yX21lc3NhZ2U6IGRvY3VtZW50X2ZpbGUuZXJyb3JfbWVzc2FnZSxcXG4gICAgdmFsdWU6IGRvY3VtZW50X2ZpbGUuZmlsZXNcXG4gIH0pLCAoZG9jdW1lbnRfZmlsZS5maWxlcy5sZW5ndGggPiAwIHx8ICEhZG9jdW1lbnRfZmlsZS5lcnJvcl9tZXNzYWdlKSAmJiAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1yZW1vdmUtYnRuLWNvbnRhaW5lclxcXCJcXG4gIH0sIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjb21wb25lbnRzXy5JY29uLCB7XFxuICAgIGljb246IFxcXCJJY0Nsb3NlQ2lyY2xlXFxcIixcXG4gICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzX2RlZmF1bHQoKSgnYWNjb3VudC1wb2FfX3VwbG9hZC1yZW1vdmUtYnRuJywge1xcbiAgICAgICdhY2NvdW50LXBvYV9fdXBsb2FkLXJlbW92ZS1idG4tLWVycm9yJzogISFkb2N1bWVudF9maWxlLmVycm9yX21lc3NhZ2VcXG4gICAgfSksXFxuICAgIG9uQ2xpY2s6IHJlbW92ZUZpbGUsXFxuICAgIGNvbG9yOiBcXFwic2Vjb25kYXJ5XFxcIlxcbiAgfSkpKTtcXG59KTtcXG5GaWxlVXBsb2FkZXIucHJvcFR5cGVzID0ge1xcbiAgb25GaWxlRHJvcDogKHByb3BfdHlwZXNfZGVmYXVsdCgpKS5mdW5jLFxcbiAgZ2V0U29ja2V0OiAocHJvcF90eXBlc19kZWZhdWx0KCkpLmZ1bmNcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgZmlsZV91cGxvYWRlciA9IChGaWxlVXBsb2FkZXIpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL0NvbXBvbmVudHMvZmlsZS11cGxvYWRlci1jb250YWluZXIvZmlsZS11cGxvYWRlci1jb250YWluZXIuanN4XFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxudmFyIEZpbGVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gRmlsZVByb3BlcnRpZXMoKSB7XFxuICB2YXIgcHJvcGVydGllcyA9IFt7XFxuICAgIG5hbWU6ICdzaXplJyxcXG4gICAgaWNvbjogJ0ljUG9hRmlsZUVpZ2h0TWInLFxcbiAgICB0ZXh0OiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnTGVzcyB0aGFuIDhNQicpXFxuICB9LCB7XFxuICAgIG5hbWU6ICdmb3JtYXQnLFxcbiAgICBpY29uOiAnSWNQb2FGaWxlRm9ybWF0JyxcXG4gICAgdGV4dDogKDAsdHJhbnNsYXRpb25zXy5sb2NhbGl6ZSkoJ0pQRUcgIEpQRyAgUE5HICBQREYgIEdJRicpXFxuICB9LCB7XFxuICAgIG5hbWU6ICd0aW1lJyxcXG4gICAgaWNvbjogJ0ljUG9hRmlsZVRpbWUnLFxcbiAgICB0ZXh0OiAoMCx0cmFuc2xhdGlvbnNfLmxvY2FsaXplKSgnMSAtIDYgbW9udGhzIG9sZCcpXFxuICB9LCB7XFxuICAgIG5hbWU6ICdjbGVhcicsXFxuICAgIGljb246ICdJY1BvYUZpbGVDbGVhcicsXFxuICAgIHRleHQ6ICgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdBIGNsZWFyIGNvbG91ciBwaG90byBvciBzY2FubmVkIGltYWdlJylcXG4gIH0sIHtcXG4gICAgbmFtZTogJ3dpdGgtYWRkcmVzcycsXFxuICAgIGljb246ICdJY1BvYUZpbGVXaXRoQWRkcmVzcycsXFxuICAgIHRleHQ6ICgwLHRyYW5zbGF0aW9uc18ubG9jYWxpemUpKCdJc3N1ZWQgdW5kZXIgeW91ciBuYW1lIHdpdGggeW91ciBjdXJyZW50IGFkZHJlc3MnKVxcbiAgfV07XFxuICByZXR1cm4gLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtcHJvcGVydHlcXFwiXFxuICB9LCBwcm9wZXJ0aWVzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCB7XFxuICAgICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1wcm9wZXJ0eS1pdGVtIGFjY291bnQtcG9hX191cGxvYWQtcHJvcGVydHktXFxcIi5jb25jYXQoaXRlbS5uYW1lKSxcXG4gICAgICBrZXk6IGl0ZW0ubmFtZVxcbiAgICB9LCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIsIHtcXG4gICAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLXByb3BlcnR5LXdyYXBwZXJcXFwiXFxuICAgIH0sIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjb21wb25lbnRzXy5JY29uLCB7XFxuICAgICAgaWNvbjogaXRlbS5pY29uLFxcbiAgICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtaWNvbi1kYXNoYm9hcmRcXFwiLFxcbiAgICAgIHNpemU6IDQwXFxuICAgIH0pLCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c18uVGV4dCwge1xcbiAgICAgIHNpemU6IFxcXCJ4eHhzXFxcIixcXG4gICAgICB3ZWlnaHQ6IFxcXCJib2xkXFxcIixcXG4gICAgICBhbGlnbjogXFxcImNlbnRlclxcXCJcXG4gICAgfSwgaXRlbS50ZXh0KSkpO1xcbiAgfSkpO1xcbn07XFxuXFxudmFyIEZpbGVVcGxvYWRlckNvbnRhaW5lciA9IGZ1bmN0aW9uIEZpbGVVcGxvYWRlckNvbnRhaW5lcihfcmVmKSB7XFxuICB2YXIgX3JlZiRpc19kZXNjcmlwdGlvbl9lID0gX3JlZi5pc19kZXNjcmlwdGlvbl9lbmFibGVkLFxcbiAgICAgIGlzX2Rlc2NyaXB0aW9uX2VuYWJsZWQgPSBfcmVmJGlzX2Rlc2NyaXB0aW9uX2UgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJGlzX2Rlc2NyaXB0aW9uX2UsXFxuICAgICAgZ2V0U29ja2V0ID0gX3JlZi5nZXRTb2NrZXQsXFxuICAgICAgb25GaWxlRHJvcCA9IF9yZWYub25GaWxlRHJvcCxcXG4gICAgICBvblJlZiA9IF9yZWYub25SZWY7XFxuXFxuICB2YXIgX1JlYWN0JHVzZUNvbnRleHQgPSBleHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkudXNlQ29udGV4dChzaGFyZWRfLlBsYXRmb3JtQ29udGV4dCksXFxuICAgICAgaXNfZGFzaGJvYXJkID0gX1JlYWN0JHVzZUNvbnRleHQuaXNfZGFzaGJvYXJkO1xcblxcbiAgdmFyIHJlZiA9IGV4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS51c2VSZWYoKTtcXG4gIHZhciBnZXRTb2NrZXRGdW5jID0gZ2V0U29ja2V0ICE9PSBudWxsICYmIGdldFNvY2tldCAhPT0gdm9pZCAwID8gZ2V0U29ja2V0IDogc2hhcmVkXy5XUy5nZXRTb2NrZXQ7XFxuICBleHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcXG4gICAgaWYgKHJlZikge1xcbiAgICAgIGlmICh0eXBlb2Ygb25SZWYgPT09ICdmdW5jdGlvbicpIG9uUmVmKHJlZik7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICByZXR1cm4gb25SZWYodW5kZWZpbmVkKTtcXG4gICAgfTtcXG4gIH0sIFtvblJlZiwgcmVmXSk7XFxuXFxuICBpZiAoaXNfZGFzaGJvYXJkICYmICgwLHNoYXJlZF8uaXNEZXNrdG9wKSgpKSB7XFxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIsIHtcXG4gICAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLXNlY3Rpb24gYWNjb3VudC1wb2FfX3VwbG9hZC1zZWN0aW9uLWRhc2hib2FyZFxcXCJcXG4gICAgfSwgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCB7XFxuICAgICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1maWxlIGFjY291bnQtcG9hX191cGxvYWQtZmlsZS1kYXNoYm9hcmRcXFwiXFxuICAgIH0sIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChGaWxlUHJvcGVydGllcywgbnVsbCksIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIiwge1xcbiAgICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtZmlsZS16b25lXFxcIlxcbiAgICB9LCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoZmlsZV91cGxvYWRlciwge1xcbiAgICAgIGdldFNvY2tldDogZ2V0U29ja2V0RnVuYyxcXG4gICAgICByZWY6IHJlZixcXG4gICAgICBvbkZpbGVEcm9wOiBvbkZpbGVEcm9wXFxuICAgIH0pKSkpO1xcbiAgfVxcblxcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIiwge1xcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLXNlY3Rpb25cXFwiXFxuICB9LCBpc19kZXNjcmlwdGlvbl9lbmFibGVkICYmIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChcXFwidWxcXFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtbGlzdFxcXCJcXG4gIH0sICFpc19kYXNoYm9hcmQgJiYgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KFxcXCJsaVxcXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1ib3hcXFwiXFxuICB9LCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c18uSWNvbiwge1xcbiAgICBpY29uOiBcXFwiSWNVdGlsaXR5XFxcIixcXG4gICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1pY29uXFxcIixcXG4gICAgc2l6ZTogMjBcXG4gIH0pLCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1pdGVtXFxcIlxcbiAgfSwgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KHRyYW5zbGF0aW9uc18uTG9jYWxpemUsIHtcXG4gICAgaTE4bl9kZWZhdWx0X3RleHQ6IFxcXCJBIHJlY2VudCB1dGlsaXR5IGJpbGwgKGUuZy4gZWxlY3RyaWNpdHksIHdhdGVyLCBnYXMsIHBob25lIG9yIGludGVybmV0KVxcXCJcXG4gIH0pKSksIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChcXFwibGlcXFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtYm94XFxcIlxcbiAgfSwgaXNfZGFzaGJvYXJkID8gLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfLkljb24sIHtcXG4gICAgaWNvbjogXFxcIkljQmFua0Rhc2hib2FyZFxcXCIsXFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtaWNvblxcXCIsXFxuICAgIHNpemU6IDI0XFxuICB9KSA6IC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjb21wb25lbnRzXy5JY29uLCB7XFxuICAgIGljb246IFxcXCJJY0JhbmtcXFwiLFxcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLWljb25cXFwiLFxcbiAgICBzaXplOiAyMFxcbiAgfSksIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIiwge1xcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLWl0ZW1cXFwiXFxuICB9LCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQodHJhbnNsYXRpb25zXy5Mb2NhbGl6ZSwge1xcbiAgICBpMThuX2RlZmF1bHRfdGV4dDogXFxcIkEgcmVjZW50IGJhbmsgc3RhdGVtZW50IG9yIGdvdmVybm1lbnQtaXNzdWVkIGxldHRlciB3aXRoIHlvdXIgbmFtZSBhbmQgYWRkcmVzc1xcXCJcXG4gIH0pKSksIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChcXFwibGlcXFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtYm94XFxcIlxcbiAgfSwgaXNfZGFzaGJvYXJkID8gLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfLkljb24sIHtcXG4gICAgaWNvbjogXFxcIkljUG9hRmlsZVdpdGhBZGRyZXNzXFxcIixcXG4gICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1pY29uXFxcIixcXG4gICAgc2l6ZTogMjRcXG4gIH0pIDogLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfLkljb24sIHtcXG4gICAgaWNvbjogXFxcIkljVXNlclxcXCIsXFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtaWNvblxcXCIsXFxuICAgIHNpemU6IDIwXFxuICB9KSwgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtaXRlbVxcXCJcXG4gIH0sIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudCh0cmFuc2xhdGlvbnNfLkxvY2FsaXplLCB7XFxuICAgIGkxOG5fZGVmYXVsdF90ZXh0OiBcXFwiSXNzdWVkIHVuZGVyIHlvdXIgbmFtZSB3aXRoIHlvdXIgY3VycmVudCBhZGRyZXNzXFxcIlxcbiAgfSkpKSwgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KFxcXCJsaVxcXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1ib3hcXFwiXFxuICB9LCBpc19kYXNoYm9hcmQgPyAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c18uSWNvbiwge1xcbiAgICBpY29uOiBcXFwiSWNQb2FGaWxlRWlnaHRNYlxcXCIsXFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtaWNvblxcXCIsXFxuICAgIHNpemU6IDI0XFxuICB9KSA6IC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjb21wb25lbnRzXy5JY29uLCB7XFxuICAgIGljb246IFxcXCJJY0xlc3NUaGFuRWlnaHRcXFwiLFxcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLWljb25cXFwiLFxcbiAgICBzaXplOiAyMFxcbiAgfSksIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIiwge1xcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLWl0ZW1cXFwiXFxuICB9LCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQodHJhbnNsYXRpb25zXy5Mb2NhbGl6ZSwge1xcbiAgICBpMThuX2RlZmF1bHRfdGV4dDogXFxcIkxlc3MgdGhhbiA4TUJcXFwiXFxuICB9KSkpLCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoXFxcImxpXFxcIiwge1xcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLWJveFxcXCJcXG4gIH0sIGlzX2Rhc2hib2FyZCA/IC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjb21wb25lbnRzXy5JY29uLCB7XFxuICAgIGljb246IFxcXCJJY1BvYUZpbGVUaW1lXFxcIixcXG4gICAgY2xhc3NOYW1lOiBcXFwiYWNjb3VudC1wb2FfX3VwbG9hZC1pY29uXFxcIixcXG4gICAgc2l6ZTogMjRcXG4gIH0pIDogLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfLkljb24sIHtcXG4gICAgaWNvbjogXFxcIkljQ2xvY2tcXFwiLFxcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLWljb25cXFwiLFxcbiAgICBzaXplOiAyMFxcbiAgfSksIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChcXFwiZGl2XFxcIiwge1xcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLWl0ZW1cXFwiXFxuICB9LCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQodHJhbnNsYXRpb25zXy5Mb2NhbGl6ZSwge1xcbiAgICBpMThuX2RlZmF1bHRfdGV4dDogXFxcIjEgLSA2IG1vbnRocyBvbGRcXFwiXFxuICB9KSkpLCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoXFxcImxpXFxcIiwge1xcbiAgICBjbGFzc05hbWU6IFxcXCJhY2NvdW50LXBvYV9fdXBsb2FkLWJveFxcXCJcXG4gIH0sIGlzX2Rhc2hib2FyZCA/IC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjb21wb25lbnRzXy5JY29uLCB7XFxuICAgIGljb246IFxcXCJJY1BvYUZpbGVDbGVhclxcXCIsXFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtaWNvblxcXCIsXFxuICAgIHNpemU6IDI0XFxuICB9KSA6IC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudChjb21wb25lbnRzXy5JY29uLCB7XFxuICAgIGljb246IFxcXCJJY0V5ZVxcXCIsXFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtaWNvblxcXCIsXFxuICAgIHNpemU6IDIwXFxuICB9KSwgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KFxcXCJkaXZcXFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXFxcImFjY291bnQtcG9hX191cGxvYWQtaXRlbVxcXCJcXG4gIH0sIC8qI19fUFVSRV9fKi9leHRlcm5hbF9yZWFjdF9kZWZhdWx0KCkuY3JlYXRlRWxlbWVudCh0cmFuc2xhdGlvbnNfLkxvY2FsaXplLCB7XFxuICAgIGkxOG5fZGVmYXVsdF90ZXh0OiBcXFwiQSBjbGVhciBjb2xvdXIgcGhvdG8gb3Igc2Nhbm5lZCBpbWFnZVxcXCJcXG4gIH0pKSkpLCAvKiNfX1BVUkVfXyovZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdCgpLmNyZWF0ZUVsZW1lbnQoXFxcImRpdlxcXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzX2RlZmF1bHQoKSgnYWNjb3VudC1wb2FfX3VwbG9hZC1maWxlJywge1xcbiAgICAgICdhY2NvdW50LXBvYV9fdXBsb2FkLWZpbGUtLWRhc2hib2FyZCc6ICgwLHNoYXJlZF8uaXNEZXNrdG9wKSgpICYmIGlzX2Rhc2hib2FyZFxcbiAgICB9KVxcbiAgfSwgLyojX19QVVJFX18qL2V4dGVybmFsX3JlYWN0X2RlZmF1bHQoKS5jcmVhdGVFbGVtZW50KGZpbGVfdXBsb2FkZXIsIHtcXG4gICAgZ2V0U29ja2V0OiBnZXRTb2NrZXRGdW5jLFxcbiAgICByZWY6IHJlZixcXG4gICAgb25GaWxlRHJvcDogb25GaWxlRHJvcFxcbiAgfSkpKTtcXG59O1xcblxcbkZpbGVVcGxvYWRlckNvbnRhaW5lci5wcm9wVHlwZXMgPSB7XFxuICBpc19kZXNjcmlwdGlvbl9lbmFibGVkOiAocHJvcF90eXBlc19kZWZhdWx0KCkpLmJvb2wsXFxuICBnZXRTb2NrZXQ6IChwcm9wX3R5cGVzX2RlZmF1bHQoKSkuZnVuYyxcXG4gIG9uRmlsZURyb3A6IChwcm9wX3R5cGVzX2RlZmF1bHQoKSkuZnVuYyxcXG4gIG9uUmVmOiAocHJvcF90eXBlc19kZWZhdWx0KCkpLmZ1bmNcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgZmlsZV91cGxvYWRlcl9jb250YWluZXIgPSAoRmlsZVVwbG9hZGVyQ29udGFpbmVyKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9Db21wb25lbnRzL2ZpbGUtdXBsb2FkZXItY29udGFpbmVyL2luZGV4LmpzXFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBDb21wb25lbnRzX2ZpbGVfdXBsb2FkZXJfY29udGFpbmVyID0gKGZpbGVfdXBsb2FkZXJfY29udGFpbmVyKTsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTlEYjIxd2IyNWxiblJ6TDJacGJHVXRkWEJzYjJGa1pYSXRZMjl1ZEdGcGJtVnlMMmx1WkdWNExtcHpMbXB6SWl3aWMyOTFjbU5sY3lJNld5SjNaV0p3WVdOck9pOHZRR1JsY21sMkwyRmpZMjkxYm5RdkxpOURiMjF3YjI1bGJuUnpMMlpwYkdVdGRYQnNiMkZrWlhJdFkyOXVkR0ZwYm1WeUwyWnBiR1V0ZFhCc2IyRmtaWEl1YW5ONFB6a3lOR01pTENKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJGalkyOTFiblF2TGk5RGIyMXdiMjVsYm5SekwyWnBiR1V0ZFhCc2IyRmtaWEl0WTI5dWRHRnBibVZ5TDJacGJHVXRkWEJzYjJGa1pYSXRZMjl1ZEdGcGJtVnlMbXB6ZUQ5a05HRTRJaXdpZDJWaWNHRmphem92TDBCa1pYSnBkaTloWTJOdmRXNTBMeTR2UTI5dGNHOXVaVzUwY3k5bWFXeGxMWFZ3Ykc5aFpHVnlMV052Ym5SaGFXNWxjaTlwYm1SbGVDNXFjejg0WVRSaklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJR05zWVhOelRtRnRaWE1nWm5KdmJTQW5ZMnhoYzNOdVlXMWxjeWM3WEc1cGJYQnZjblFnUkc5amRXMWxiblJWY0d4dllXUmxjaUJtY205dElDZEFZbWx1WVhKNUxXTnZiUzlpYVc1aGNua3RaRzlqZFcxbGJuUXRkWEJzYjJGa1pYSW5PMXh1YVcxd2IzSjBJSHNnUm1sc1pVUnliM0I2YjI1bExDQkpZMjl1TENCMWMyVlRkR0YwWlVOaGJHeGlZV05ySUgwZ1puSnZiU0FuUUdSbGNtbDJMMk52YlhCdmJtVnVkSE1uTzF4dWFXMXdiM0owSUhzZ2JHOWpZV3hwZW1VZ2ZTQm1jbTl0SUNkQVpHVnlhWFl2ZEhKaGJuTnNZWFJwYjI1ekp6dGNibWx0Y0c5eWRDQjdYRzRnSUNBZ2FYTk5iMkpwYkdVc1hHNGdJQ0FnVUd4aGRHWnZjbTFEYjI1MFpYaDBMRnh1SUNBZ0lHTnZiWEJ5WlhOelNXMWhaMlZHYVd4bGN5eGNiaUFnSUNCeVpXRmtSbWxzWlhNc1hHNGdJQ0FnWjJWMFUzVndjRzl5ZEdWa1JtbHNaWE1zWEc0Z0lDQWdiV0Y0WDJSdlkzVnRaVzUwWDNOcGVtVXNYRzRnSUNBZ2MzVndjRzl5ZEdWa1gyWnBiR1YwZVhCbGN5eGNibjBnWm5KdmJTQW5RR1JsY21sMkwzTm9ZWEpsWkNjN1hHNWNibU52Ym5OMElGVndiRzloWkUxbGMzTmhaMlVnUFNBb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QnBjMTlrWVhOb1ltOWhjbVFnZlNBOUlGSmxZV04wTG5WelpVTnZiblJsZUhRb1VHeGhkR1p2Y20xRGIyNTBaWGgwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0E4VW1WaFkzUXVSbkpoWjIxbGJuUStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFNXTnZiaUJwWTI5dVBTZEpZME5zYjNWa1ZYQnNiMkZrSnlCamJHRnpjMDVoYldVOUoyUmpMV1pwYkdVdFpISnZjSHB2Ym1WZlgyMWxjM05oWjJVdGFXTnZiaWNnYzJsNlpUMTdOVEI5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMG5aR010Wm1sc1pTMWtjbTl3ZW05dVpWOWZiV1Z6YzJGblpTMXpkV0owYVhSc1pTYytYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMmx6WDJSaGMyaGliMkZ5WkNBbUppQnBjMDF2WW1sc1pTZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2JHOWpZV3hwZW1Vb0oxUmhjQ0JvWlhKbElIUnZJSFZ3Ykc5aFpDQW9TbEJGUnlBZ1NsQkhJQ0JRVGtjZ0lGQkVSaUFnUjBsR0tTY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2JHOWpZV3hwZW1Vb0owUnliM0FnWm1sc1pTQW9TbEJGUnlBZ1NsQkhJQ0JRVGtjZ0lGQkVSaUFnUjBsR0tTQnZjaUJqYkdsamF5Qm9aWEpsSUhSdklIVndiRzloWkNjcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHd2VW1WaFkzUXVSbkpoWjIxbGJuUStYRzRnSUNBZ0tUdGNibjA3WEc1amIyNXpkQ0JtYVd4bFVtVmhaRVZ5Y205eVRXVnpjMkZuWlNBOUlHWnBiR1Z1WVcxbElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z2JHOWpZV3hwZW1Vb0oxVnVZV0pzWlNCMGJ5QnlaV0ZrSUdacGJHVWdlM3R1WVcxbGZYMG5MQ0I3SUc1aGJXVTZJR1pwYkdWdVlXMWxJSDBwTzF4dWZUdGNibHh1WTI5dWMzUWdSbWxzWlZWd2JHOWhaR1Z5SUQwZ1VtVmhZM1F1Wm05eWQyRnlaRkpsWmlnb2V5QnZia1pwYkdWRWNtOXdMQ0JuWlhSVGIyTnJaWFFnZlN3Z2NtVm1LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdXMlJ2WTNWdFpXNTBYMlpwYkdVc0lITmxkRVJ2WTNWdFpXNTBSbWxzWlYwZ1BTQjFjMlZUZEdGMFpVTmhiR3hpWVdOcktIc2dabWxzWlhNNklGdGRMQ0JsY25KdmNsOXRaWE56WVdkbE9pQnVkV3hzSUgwcE8xeHVYRzRnSUNBZ1kyOXVjM1FnYUdGdVpHeGxRV05qWlhCMFpXUkdhV3hsY3lBOUlHWnBiR1Z6SUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0dacGJHVnpMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEVSdlkzVnRaVzUwUm1sc1pTaDdJR1pwYkdWekxDQmxjbkp2Y2w5dFpYTnpZV2RsT2lCdWRXeHNJSDBzSUdacGJHVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVJtbHNaVVJ5YjNBb1ptbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQm9ZVzVrYkdWU1pXcGxZM1JsWkVacGJHVnpJRDBnWm1sc1pYTWdQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwYzE5bWFXeGxYM1J2YjE5c1lYSm5aU0E5SUdacGJHVnpMbXhsYm1kMGFDQStJREFnSmlZZ1ptbHNaWE5iTUYwdVptbHNaUzV6YVhwbElENGdiV0Y0WDJSdlkzVnRaVzUwWDNOcGVtVTdYRzRnSUNBZ0lDQWdJR052Ym5OMElITjFjSEJ2Y25SbFpGOW1hV3hsY3lBOUlHWnBiR1Z6TG1acGJIUmxjaWhsWVdOb1gyWnBiR1VnUFQ0Z1oyVjBVM1Z3Y0c5eWRHVmtSbWxzWlhNb1pXRmphRjltYVd4bExtWnBiR1V1Ym1GdFpTa3BPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2w5dFpYTnpZV2RsSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJR2x6WDJacGJHVmZkRzl2WDJ4aGNtZGxJQ1ltSUhOMWNIQnZjblJsWkY5bWFXeGxjeTVzWlc1bmRHZ2dQaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCc2IyTmhiR2w2WlNnblJtbHNaU0J6YVhwbElITm9iM1ZzWkNCaVpTQTRUVUlnYjNJZ2JHVnpjeWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCc2IyTmhiR2w2WlNnblJtbHNaU0IxY0d4dllXUmxaQ0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtKeWs3WEc1Y2JpQWdJQ0FnSUNBZ2MyVjBSRzlqZFcxbGJuUkdhV3hsS0hzZ1ptbHNaWE1zSUdWeWNtOXlYMjFsYzNOaFoyVWdmU3dnWm1sc1pTQTlQaUJ2YmtacGJHVkVjbTl3S0dacGJHVXBLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZMjl1YzNRZ2NtVnRiM1psUm1sc1pTQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdjMlYwUkc5amRXMWxiblJHYVd4bEtIc2dabWxzWlhNNklGdGRMQ0JsY25KdmNsOXRaWE56WVdkbE9pQnVkV3hzSUgwc0lHWnBiR1VnUFQ0Z2IyNUdhV3hsUkhKdmNDaG1hV3hsS1NrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdOdmJuTjBJSFZ3Ykc5aFpDQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0NFaFpHOWpkVzFsYm5SZlptbHNaUzVsY25KdmNsOXRaWE56WVdkbElIeDhJR1J2WTNWdFpXNTBYMlpwYkdVdVptbHNaWE11YkdWdVozUm9JRHdnTVNrZ2NtVjBkWEp1SURBN1hHNWNiaUFnSUNBZ0lDQWdMeThnUm1sc1pTQjFjR3h2WVdSbGNpQnBibk4wWVc1alpTQmpiMjV1WldOMFpXUWdkRzhnWW1sdVlYSjVYM052WTJ0bGRGeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMWNHeHZZV1JsY2lBOUlHNWxkeUJFYjJOMWJXVnVkRlZ3Ykc5aFpHVnlLSHNnWTI5dWJtVmpkR2x2YmpvZ1oyVjBVMjlqYTJWMEtDa2dmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR2x6WDJGdWVWOW1hV3hsWDJWeWNtOXlJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJYQnlaWE56U1cxaFoyVkdhV3hsY3loa2IyTjFiV1Z1ZEY5bWFXeGxMbVpwYkdWektTNTBhR1Z1S0dacGJHVnpYM1J2WDNCeWIyTmxjM01nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxZV1JHYVd4bGN5aG1hV3hsYzE5MGIxOXdjbTlqWlhOekxDQm1hV3hsVW1WaFpFVnljbTl5VFdWemMyRm5aU2t1ZEdobGJpaHdjbTlqWlhOelpXUmZabWxzWlhNZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOWpaWE56WldSZlptbHNaWE11Wm05eVJXRmphQ2htYVd4bElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeGxMbTFsYzNOaFoyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGMxOWhibmxmWm1sc1pWOWxjbkp2Y2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dacGJHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkRzkwWVd4ZmRHOWZkWEJzYjJGa0lEMGdjSEp2WTJWemMyVmtYMlpwYkdWekxteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselgyRnVlVjltYVd4bFgyVnljbTl5SUh4OElDRjBiM1JoYkY5MGIxOTFjR3h2WVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVSbWxzWlVSeWIzQW9kVzVrWldacGJtVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqc2dMeThnWkc5dUozUWdjM1JoY25RZ2MzVmliV2wwZEdsdVp5Qm1hV3hsY3lCMWJuUnBiQ0JoYkd3Z1puSnZiblF0Wlc1a0lIWmhiR2xrWVhScGIyNGdZMmhsWTJ0eklIQmhjM05jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklITmxibVFnWm1sc1pYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkWEJzYjJGa1pYSmZjSEp2YldselpTQTlJSFZ3Ykc5aFpHVnlMblZ3Ykc5aFpDaHdjbTlqWlhOelpXUmZabWxzWlhOYk1GMHBMblJvWlc0b1lYQnBYM0psYzNCdmJuTmxJRDArSUdGd2FWOXlaWE53YjI1elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZFhCc2IyRmtaWEpmY0hKdmJXbHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lGSmxZV04wTG5WelpVbHRjR1Z5WVhScGRtVklZVzVrYkdVb2NtVm1MQ0FvS1NBOVBpQW9lMXh1SUNBZ0lDQWdJQ0IxY0d4dllXUXNYRzRnSUNBZ2ZTa3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lDQWdQRkpsWVdOMExrWnlZV2R0Wlc1MFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVacGJHVkVjbTl3ZW05dVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmpZMlZ3ZEQxN2MzVndjRzl5ZEdWa1gyWnBiR1YwZVhCbGMzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2w5dFpYTnpZV2RsUFh0c2IyTmhiR2w2WlNnblVHeGxZWE5sSUhWd2JHOWhaQ0J6ZFhCd2IzSjBaV1FnWm1sc1pTQjBlWEJsTGljcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1Z1WVcxbFgyeHBiV2wwUFhzeU5uMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9iM1psY2w5dFpYTnpZV2RsUFh0c2IyTmhiR2w2WlNnblJISnZjQ0JtYVd4bGN5Qm9aWEpsTGk0bktYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWGhmYzJsNlpUMTdiV0Y0WDJSdlkzVnRaVzUwWDNOcGVtVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpUMTdQRlZ3Ykc5aFpFMWxjM05oWjJVZ0x6NTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiWFZzZEdsd2JHVTllMlpoYkhObGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVSSEp2Y0VGalkyVndkR1ZrUFh0b1lXNWtiR1ZCWTJObGNIUmxaRVpwYkdWemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVSSEp2Y0ZKbGFtVmpkR1ZrUFh0b1lXNWtiR1ZTWldwbFkzUmxaRVpwYkdWemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiR2xrWVhScGIyNWZaWEp5YjNKZmJXVnpjMkZuWlQxN1pHOWpkVzFsYm5SZlptbHNaUzVsY25KdmNsOXRaWE56WVdkbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsUFh0a2IyTjFiV1Z1ZEY5bWFXeGxMbVpwYkdWemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHNvWkc5amRXMWxiblJmWm1sc1pTNW1hV3hsY3k1c1pXNW5kR2dnUGlBd0lIeDhJQ0VoWkc5amRXMWxiblJmWm1sc1pTNWxjbkp2Y2w5dFpYTnpZV2RsS1NBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOUoyRmpZMjkxYm5RdGNHOWhYMTkxY0d4dllXUXRjbVZ0YjNabExXSjBiaTFqYjI1MFlXbHVaWEluUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThTV052Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdOdmJqMG5TV05EYkc5elpVTnBjbU5zWlNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbGN5Z25ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzF5WlcxdmRtVXRZblJ1Snl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RoWTJOdmRXNTBMWEJ2WVY5ZmRYQnNiMkZrTFhKbGJXOTJaUzFpZEc0dExXVnljbTl5SnpvZ0lTRmtiMk4xYldWdWRGOW1hV3hsTG1WeWNtOXlYMjFsYzNOaFoyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczllM0psYlc5MlpVWnBiR1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqMG5jMlZqYjI1a1lYSjVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnUEM5U1pXRmpkQzVHY21GbmJXVnVkRDVjYmlBZ0lDQXBPMXh1ZlNrN1hHNWNia1pwYkdWVmNHeHZZV1JsY2k1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ2IyNUdhV3hsUkhKdmNEb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnWjJWMFUyOWphMlYwT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFWnBiR1ZWY0d4dllXUmxjanRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElHTnNZWE56VG1GdFpYTWdabkp2YlNBblkyeGhjM051WVcxbGN5YzdYRzVwYlhCdmNuUWdleUJKWTI5dUxDQlVaWGgwSUgwZ1puSnZiU0FuUUdSbGNtbDJMMk52YlhCdmJtVnVkSE1uTzF4dWFXMXdiM0owSUhzZ1VHeGhkR1p2Y20xRGIyNTBaWGgwTENCcGMwUmxjMnQwYjNBc0lGZFRJSDBnWm5KdmJTQW5RR1JsY21sMkwzTm9ZWEpsWkNjN1hHNXBiWEJ2Y25RZ2V5Qk1iMk5oYkdsNlpTd2diRzlqWVd4cGVtVWdmU0JtY205dElDZEFaR1Z5YVhZdmRISmhibk5zWVhScGIyNXpKenRjYm1sdGNHOXlkQ0JHYVd4bFZYQnNiMkZrWlhJZ1puSnZiU0FuTGk5bWFXeGxMWFZ3Ykc5aFpHVnlMbXB6ZUNjN1hHNWNibU52Ym5OMElFWnBiR1ZRY205d1pYSjBhV1Z6SUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIQnliM0JsY25ScFpYTWdQU0JiWEc0Z0lDQWdJQ0FnSUhzZ2JtRnRaVG9nSjNOcGVtVW5MQ0JwWTI5dU9pQW5TV05RYjJGR2FXeGxSV2xuYUhSTllpY3NJSFJsZUhRNklHeHZZMkZzYVhwbEtDZE1aWE56SUhSb1lXNGdPRTFDSnlrZ2ZTeGNiaUFnSUNBZ0lDQWdleUJ1WVcxbE9pQW5abTl5YldGMEp5d2dhV052YmpvZ0owbGpVRzloUm1sc1pVWnZjbTFoZENjc0lIUmxlSFE2SUd4dlkyRnNhWHBsS0NkS1VFVkhJQ0JLVUVjZ0lGQk9SeUFnVUVSR0lDQkhTVVluS1NCOUxGeHVJQ0FnSUNBZ0lDQjdJRzVoYldVNklDZDBhVzFsSnl3Z2FXTnZiam9nSjBsalVHOWhSbWxzWlZScGJXVW5MQ0IwWlhoME9pQnNiMk5oYkdsNlpTZ25NU0F0SURZZ2JXOXVkR2h6SUc5c1pDY3BJSDBzWEc0Z0lDQWdJQ0FnSUhzZ2JtRnRaVG9nSjJOc1pXRnlKeXdnYVdOdmJqb2dKMGxqVUc5aFJtbHNaVU5zWldGeUp5d2dkR1Y0ZERvZ2JHOWpZV3hwZW1Vb0owRWdZMnhsWVhJZ1kyOXNiM1Z5SUhCb2IzUnZJRzl5SUhOallXNXVaV1FnYVcxaFoyVW5LU0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5kMmwwYUMxaFpHUnlaWE56Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0NklDZEpZMUJ2WVVacGJHVlhhWFJvUVdSa2NtVnpjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaWGgwT2lCc2IyTmhiR2w2WlNnblNYTnpkV1ZrSUhWdVpHVnlJSGx2ZFhJZ2JtRnRaU0IzYVhSb0lIbHZkWElnWTNWeWNtVnVkQ0JoWkdSeVpYTnpKeWtzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnWFR0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMG5ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzF3Y205d1pYSjBlU2MrWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdjSEp2Y0dWeWRHbGxjeTV0WVhBb2FYUmxiU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyQmhZMk52ZFc1MExYQnZZVjlmZFhCc2IyRmtMWEJ5YjNCbGNuUjVMV2wwWlcwZ1lXTmpiM1Z1ZEMxd2IyRmZYM1Z3Ykc5aFpDMXdjbTl3WlhKMGVTMGtlMmwwWlcwdWJtRnRaWDFnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJaWGs5ZTJsMFpXMHVibUZ0WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBTZGhZMk52ZFc1MExYQnZZVjlmZFhCc2IyRmtMWEJ5YjNCbGNuUjVMWGR5WVhCd1pYSW5QbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRWxqYjI0Z2FXTnZiajE3YVhSbGJTNXBZMjl1ZlNCamJHRnpjMDVoYldVOUoyRmpZMjkxYm5RdGNHOWhYMTkxY0d4dllXUXRhV052Ymkxa1lYTm9ZbTloY21RbklITnBlbVU5ZXpRd2ZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhRZ2MybDZaVDBuZUhoNGN5Y2dkMlZwWjJoMFBTZGliMnhrSnlCaGJHbG5iajBuWTJWdWRHVnlKejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2FYUmxiUzUwWlhoMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDa3BmVnh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBcE8xeHVmVHRjYmx4dVkyOXVjM1FnUm1sc1pWVndiRzloWkdWeVEyOXVkR0ZwYm1WeUlEMGdLSHNnYVhOZlpHVnpZM0pwY0hScGIyNWZaVzVoWW14bFpDQTlJSFJ5ZFdVc0lHZGxkRk52WTJ0bGRDd2diMjVHYVd4bFJISnZjQ3dnYjI1U1pXWWdmU2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnYVhOZlpHRnphR0p2WVhKa0lIMGdQU0JTWldGamRDNTFjMlZEYjI1MFpYaDBLRkJzWVhSbWIzSnRRMjl1ZEdWNGRDazdYRzRnSUNBZ1kyOXVjM1FnY21WbUlEMGdVbVZoWTNRdWRYTmxVbVZtS0NrN1hHNWNiaUFnSUNCamIyNXpkQ0JuWlhSVGIyTnJaWFJHZFc1aklEMGdaMlYwVTI5amEyVjBJRDgvSUZkVExtZGxkRk52WTJ0bGREdGNibHh1SUNBZ0lGSmxZV04wTG5WelpVVm1abVZqZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV1lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjI1U1pXWWdQVDA5SUNkbWRXNWpkR2x2YmljcElHOXVVbVZtS0hKbFppazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2dwSUQwK0lHOXVVbVZtS0hWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZlN3Z1cyOXVVbVZtTENCeVpXWmRLVHRjYmlBZ0lDQnBaaUFvYVhOZlpHRnphR0p2WVhKa0lDWW1JR2x6UkdWemEzUnZjQ2dwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMG5ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzF6WldOMGFXOXVJR0ZqWTI5MWJuUXRjRzloWDE5MWNHeHZZV1F0YzJWamRHbHZiaTFrWVhOb1ltOWhjbVFuUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQU2RoWTJOdmRXNTBMWEJ2WVY5ZmRYQnNiMkZrTFdacGJHVWdZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzFtYVd4bExXUmhjMmhpYjJGeVpDYytYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4R2FXeGxVSEp2Y0dWeWRHbGxjeUF2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQwbllXTmpiM1Z1ZEMxd2IyRmZYM1Z3Ykc5aFpDMW1hV3hsTFhwdmJtVW5QbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRVpwYkdWVmNHeHZZV1JsY2lCblpYUlRiMk5yWlhROWUyZGxkRk52WTJ0bGRFWjFibU45SUhKbFpqMTdjbVZtZlNCdmJrWnBiR1ZFY205d1BYdHZia1pwYkdWRWNtOXdmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMG5ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzF6WldOMGFXOXVKejVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdHBjMTlrWlhOamNtbHdkR2x2Ymw5bGJtRmliR1ZrSUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThkV3dnWTJ4aGMzTk9ZVzFsUFNkaFkyTnZkVzUwTFhCdllWOWZkWEJzYjJGa0xXeHBjM1FuUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJV2x6WDJSaGMyaGliMkZ5WkNBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTk9ZVzFsUFNkaFkyTnZkVzUwTFhCdllWOWZkWEJzYjJGa0xXSnZlQ2MrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BFbGpiMjRnYVdOdmJqMG5TV05WZEdsc2FYUjVKeUJqYkdGemMwNWhiV1U5SjJGalkyOTFiblF0Y0c5aFgxOTFjR3h2WVdRdGFXTnZiaWNnYzJsNlpUMTdNakI5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOUoyRmpZMjkxYm5RdGNHOWhYMTkxY0d4dllXUXRhWFJsYlNjK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4TWIyTmhiR2w2WlNCcE1UaHVYMlJsWm1GMWJIUmZkR1Y0ZEQwblFTQnlaV05sYm5RZ2RYUnBiR2wwZVNCaWFXeHNJQ2hsTG1jdUlHVnNaV04wY21samFYUjVMQ0IzWVhSbGNpd2daMkZ6TENCd2FHOXVaU0J2Y2lCcGJuUmxjbTVsZENrbklDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMnhwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGJHa2dZMnhoYzNOT1lXMWxQU2RoWTJOdmRXNTBMWEJ2WVY5ZmRYQnNiMkZrTFdKdmVDYytYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdhWE5mWkdGemFHSnZZWEprSUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhKWTI5dUlHbGpiMjQ5SjBsalFtRnVhMFJoYzJoaWIyRnlaQ2NnWTJ4aGMzTk9ZVzFsUFNkaFkyTnZkVzUwTFhCdllWOWZkWEJzYjJGa0xXbGpiMjRuSUhOcGVtVTllekkwZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tTQTZJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFNXTnZiaUJwWTI5dVBTZEpZMEpoYm1zbklHTnNZWE56VG1GdFpUMG5ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzFwWTI5dUp5QnphWHBsUFhzeU1IMGdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMG5ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzFwZEdWdEp6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4VEc5allXeHBlbVVnYVRFNGJsOWtaV1poZFd4MFgzUmxlSFE5SjBFZ2NtVmpaVzUwSUdKaGJtc2djM1JoZEdWdFpXNTBJRzl5SUdkdmRtVnlibTFsYm5RdGFYTnpkV1ZrSUd4bGRIUmxjaUIzYVhSb0lIbHZkWElnYm1GdFpTQmhibVFnWVdSa2NtVnpjeWNnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyeHBQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGJHa2dZMnhoYzNOT1lXMWxQU2RoWTJOdmRXNTBMWEJ2WVY5ZmRYQnNiMkZrTFdKdmVDYytYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdhWE5mWkdGemFHSnZZWEprSUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhKWTI5dUlHbGpiMjQ5SjBsalVHOWhSbWxzWlZkcGRHaEJaR1J5WlhOekp5QmpiR0Z6YzA1aGJXVTlKMkZqWTI5MWJuUXRjRzloWDE5MWNHeHZZV1F0YVdOdmJpY2djMmw2WlQxN01qUjlJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwSURvZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhKWTI5dUlHbGpiMjQ5SjBsalZYTmxjaWNnWTJ4aGMzTk9ZVzFsUFNkaFkyTnZkVzUwTFhCdllWOWZkWEJzYjJGa0xXbGpiMjRuSUhOcGVtVTllekl3ZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFNkaFkyTnZkVzUwTFhCdllWOWZkWEJzYjJGa0xXbDBaVzBuUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeE1iMk5oYkdsNlpTQnBNVGh1WDJSbFptRjFiSFJmZEdWNGREMG5TWE56ZFdWa0lIVnVaR1Z5SUhsdmRYSWdibUZ0WlNCM2FYUm9JSGx2ZFhJZ1kzVnljbVZ1ZENCaFpHUnlaWE56SnlBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZiR2srWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHNhU0JqYkdGemMwNWhiV1U5SjJGalkyOTFiblF0Y0c5aFgxOTFjR3h2WVdRdFltOTRKejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRwYzE5a1lYTm9ZbTloY21RZ1B5QW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVsamIyNGdhV052YmowblNXTlFiMkZHYVd4bFJXbG5hSFJOWWljZ1kyeGhjM05PWVcxbFBTZGhZMk52ZFc1MExYQnZZVjlmZFhCc2IyRmtMV2xqYjI0bklITnBlbVU5ZXpJMGZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLU0E2SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThTV052YmlCcFkyOXVQU2RKWTB4bGMzTlVhR0Z1UldsbmFIUW5JR05zWVhOelRtRnRaVDBuWVdOamIzVnVkQzF3YjJGZlgzVndiRzloWkMxcFkyOXVKeUJ6YVhwbFBYc3lNSDBnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDBuWVdOamIzVnVkQzF3YjJGZlgzVndiRzloWkMxcGRHVnRKejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFRHOWpZV3hwZW1VZ2FURTRibDlrWldaaGRXeDBYM1JsZUhROUoweGxjM01nZEdoaGJpQTRUVUluSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOXNhVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBJR05zWVhOelRtRnRaVDBuWVdOamIzVnVkQzF3YjJGZlgzVndiRzloWkMxaWIzZ25QbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMmx6WDJSaGMyaGliMkZ5WkNBL0lDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4U1dOdmJpQnBZMjl1UFNkSlkxQnZZVVpwYkdWVWFXMWxKeUJqYkdGemMwNWhiV1U5SjJGalkyOTFiblF0Y0c5aFgxOTFjR3h2WVdRdGFXTnZiaWNnYzJsNlpUMTdNalI5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcElEb2dLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4SlkyOXVJR2xqYjI0OUowbGpRMnh2WTJzbklHTnNZWE56VG1GdFpUMG5ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzFwWTI5dUp5QnphWHBsUFhzeU1IMGdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMG5ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzFwZEdWdEp6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4VEc5allXeHBlbVVnYVRFNGJsOWtaV1poZFd4MFgzUmxlSFE5SnpFZ0xTQTJJRzF2Ym5Sb2N5QnZiR1FuSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOXNhVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBJR05zWVhOelRtRnRaVDBuWVdOamIzVnVkQzF3YjJGZlgzVndiRzloWkMxaWIzZ25QbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMmx6WDJSaGMyaGliMkZ5WkNBL0lDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4U1dOdmJpQnBZMjl1UFNkSlkxQnZZVVpwYkdWRGJHVmhjaWNnWTJ4aGMzTk9ZVzFsUFNkaFkyTnZkVzUwTFhCdllWOWZkWEJzYjJGa0xXbGpiMjRuSUhOcGVtVTllekkwZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tTQTZJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFNXTnZiaUJwWTI5dVBTZEpZMFY1WlNjZ1kyeGhjM05PWVcxbFBTZGhZMk52ZFc1MExYQnZZVjlmZFhCc2IyRmtMV2xqYjI0bklITnBlbVU5ZXpJd2ZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBTZGhZMk52ZFc1MExYQnZZVjlmZFhCc2IyRmtMV2wwWlcwblBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhNYjJOaGJHbDZaU0JwTVRodVgyUmxabUYxYkhSZmRHVjRkRDBuUVNCamJHVmhjaUJqYjJ4dmRYSWdjR2h2ZEc4Z2IzSWdjMk5oYm01bFpDQnBiV0ZuWlNjZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMnhwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmRXdytYRzRnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnhoYzNOT1lXMWxjeWduWVdOamIzVnVkQzF3YjJGZlgzVndiRzloWkMxbWFXeGxKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5ZV05qYjNWdWRDMXdiMkZmWDNWd2JHOWhaQzFtYVd4bExTMWtZWE5vWW05aGNtUW5PaUJwYzBSbGMydDBiM0FvS1NBbUppQnBjMTlrWVhOb1ltOWhjbVFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVacGJHVlZjR3h2WVdSbGNpQm5aWFJUYjJOclpYUTllMmRsZEZOdlkydGxkRVoxYm1OOUlISmxaajE3Y21WbWZTQnZia1pwYkdWRWNtOXdQWHR2YmtacGJHVkVjbTl3ZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrN1hHNTlPMXh1WEc1R2FXeGxWWEJzYjJGa1pYSkRiMjUwWVdsdVpYSXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQWdJR2x6WDJSbGMyTnlhWEIwYVc5dVgyVnVZV0pzWldRNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJR2RsZEZOdlkydGxkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2IyNUdhV3hsUkhKdmNEb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYjI1U1pXWTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUm1sc1pWVndiRzloWkdWeVEyOXVkR0ZwYm1WeU8xeHVJaXdpYVcxd2IzSjBJRVpwYkdWVmNHeHZZV1JsY2tOdmJuUmhhVzVsY2lCbWNtOXRJQ2N1TDJacGJHVXRkWEJzYjJGa1pYSXRZMjl1ZEdGcGJtVnlMbXB6ZUNjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFWnBiR1ZWY0d4dllXUmxja052Ym5SaGFXNWxjanRjYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRlRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJUMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlJFRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkVRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGTFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSRUU3UVVGQlFUdEJRVWxCTzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFWaEJPMEZCWTBFN1FVRkJRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVVJCTzBGQlIwRTdRVUZEUVR0QlFVNUJPMEZCV1VFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGR1FUdEJRVXRCT3p0QlEyeEpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJTRUU3UVVGTlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkdRVHRCUVVsQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJVRUU3UVVGbFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRVFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZGUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGTFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUlVFN1FVRkJRVHRCUVVWQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJTVUU3UVVGQlFUdEJRVVZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVZEJPMEZCUVVFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVVZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGSFFUdEJRVUZCTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVVZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUjBFN1FVRkJRVHRCUVVWQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkZRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVWRCTzBGQlFVRTdRVUZGUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVWQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlJVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRk5RVHRCUVVOQk8wRkJSRUU3UVVGRVFUdEJRVXRCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZLUVR0QlFVOUJPenRCUTJwS1FUdEJRVVZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vQ29tcG9uZW50cy9maWxlLXVwbG9hZGVyLWNvbnRhaW5lci9pbmRleC5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIjpcbi8qKiovICgobW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cbmV2YWwoXCJ2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyohXFxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXFxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXFxuKi9cXG4vKiBnbG9iYWwgZGVmaW5lICovXFxuXFxuKGZ1bmN0aW9uICgpIHtcXG5cXHQndXNlIHN0cmljdCc7XFxuXFxuXFx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xcblxcblxcdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xcblxcdFxcdHZhciBjbGFzc2VzID0gW107XFxuXFxuXFx0XFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcXG5cXHRcXHRcXHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xcblxcdFxcdFxcdGlmICghYXJnKSBjb250aW51ZTtcXG5cXG5cXHRcXHRcXHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XFxuXFxuXFx0XFx0XFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XFxuXFx0XFx0XFx0XFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XFxuXFx0XFx0XFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xcblxcdFxcdFxcdFxcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcXG5cXHRcXHRcXHRcXHRpZiAoaW5uZXIpIHtcXG5cXHRcXHRcXHRcXHRcXHRjbGFzc2VzLnB1c2goaW5uZXIpO1xcblxcdFxcdFxcdFxcdH1cXG5cXHRcXHRcXHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XFxuXFx0XFx0XFx0XFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xcblxcdFxcdFxcdFxcdFxcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcXG5cXHRcXHRcXHRcXHRcXHRcXHRjbGFzc2VzLnB1c2goa2V5KTtcXG5cXHRcXHRcXHRcXHRcXHR9XFxuXFx0XFx0XFx0XFx0fVxcblxcdFxcdFxcdH1cXG5cXHRcXHR9XFxuXFxuXFx0XFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xcblxcdH1cXG5cXG5cXHRpZiAoIHRydWUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcXG5cXHRcXHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xcblxcdFxcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcXG5cXHR9IGVsc2UgaWYgKHRydWUpIHtcXG5cXHRcXHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXFxuXFx0XFx0IShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW10sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKGZ1bmN0aW9uICgpIHtcXG5cXHRcXHRcXHRyZXR1cm4gY2xhc3NOYW1lcztcXG5cXHRcXHR9KS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSxcXG5cXHRcXHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XFxuXFx0fSBlbHNlIHt9XFxufSgpKTtcXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOc1lYTnpibUZ0WlhNdmFXNWtaWGd1YW5NdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QVpHVnlhWFl2WVdOamIzVnVkQzh1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlkyeGhjM051WVcxbGN5OXBibVJsZUM1cWN6OHpaR05rSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFJVnh1SUNCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRjZ1NtVmtJRmRoZEhOdmJpNWNiaUFnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObElDaE5TVlFwTENCelpXVmNiaUFnYUhSMGNEb3ZMMnBsWkhkaGRITnZiaTVuYVhSb2RXSXVhVzh2WTJ4aGMzTnVZVzFsYzF4dUtpOWNiaThxSUdkc2IySmhiQ0JrWldacGJtVWdLaTljYmx4dUtHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MEozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1Y2RIWmhjaUJvWVhOUGQyNGdQU0I3ZlM1b1lYTlBkMjVRY205d1pYSjBlVHRjYmx4dVhIUm1kVzVqZEdsdmJpQmpiR0Z6YzA1aGJXVnpJQ2dwSUh0Y2JseDBYSFIyWVhJZ1kyeGhjM05sY3lBOUlGdGRPMXh1WEc1Y2RGeDBabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwS3lzcElIdGNibHgwWEhSY2RIWmhjaUJoY21jZ1BTQmhjbWQxYldWdWRITmJhVjA3WEc1Y2RGeDBYSFJwWmlBb0lXRnlaeWtnWTI5dWRHbHVkV1U3WEc1Y2JseDBYSFJjZEhaaGNpQmhjbWRVZVhCbElEMGdkSGx3Wlc5bUlHRnlaenRjYmx4dVhIUmNkRngwYVdZZ0tHRnlaMVI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4SUdGeVoxUjVjR1VnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzVjZEZ4MFhIUmNkR05zWVhOelpYTXVjSFZ6YUNoaGNtY3BPMXh1WEhSY2RGeDBmU0JsYkhObElHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHRnlaeWtnSmlZZ1lYSm5MbXhsYm1kMGFDa2dlMXh1WEhSY2RGeDBYSFIyWVhJZ2FXNXVaWElnUFNCamJHRnpjMDVoYldWekxtRndjR3g1S0c1MWJHd3NJR0Z5WnlrN1hHNWNkRngwWEhSY2RHbG1JQ2hwYm01bGNpa2dlMXh1WEhSY2RGeDBYSFJjZEdOc1lYTnpaWE11Y0hWemFDaHBibTVsY2lrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RIMGdaV3h6WlNCcFppQW9ZWEpuVkhsd1pTQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JseDBYSFJjZEZ4MFptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdGeVp5a2dlMXh1WEhSY2RGeDBYSFJjZEdsbUlDaG9ZWE5QZDI0dVkyRnNiQ2hoY21jc0lHdGxlU2tnSmlZZ1lYSm5XMnRsZVYwcElIdGNibHgwWEhSY2RGeDBYSFJjZEdOc1lYTnpaWE11Y0hWemFDaHJaWGtwTzF4dVhIUmNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCamJHRnpjMlZ6TG1wdmFXNG9KeUFuS1R0Y2JseDBmVnh1WEc1Y2RHbG1JQ2gwZVhCbGIyWWdiVzlrZFd4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQnRiMlIxYkdVdVpYaHdiM0owY3lrZ2UxeHVYSFJjZEdOc1lYTnpUbUZ0WlhNdVpHVm1ZWFZzZENBOUlHTnNZWE56VG1GdFpYTTdYRzVjZEZ4MGJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCamJHRnpjMDVoYldWek8xeHVYSFI5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJrWldacGJtVWdQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdkSGx3Wlc5bUlHUmxabWx1WlM1aGJXUWdQVDA5SUNkdlltcGxZM1FuSUNZbUlHUmxabWx1WlM1aGJXUXBJSHRjYmx4MFhIUXZMeUJ5WldkcGMzUmxjaUJoY3lBblkyeGhjM051WVcxbGN5Y3NJR052Ym5OcGMzUmxiblFnZDJsMGFDQnVjRzBnY0dGamEyRm5aU0J1WVcxbFhHNWNkRngwWkdWbWFXNWxLQ2RqYkdGemMyNWhiV1Z6Snl3Z1cxMHNJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJqYkdGemMwNWhiV1Z6TzF4dVhIUmNkSDBwTzF4dVhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEhkcGJtUnZkeTVqYkdGemMwNWhiV1Z6SUQwZ1kyeGhjM05PWVcxbGN6dGNibHgwZlZ4dWZTZ3BLVHRjYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFTeFZRVVZCTzBGQlEwRTdJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc1wiOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbmV2YWwoXCIvKipcXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cXG4gKlxcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cXG4gKi9cXG5cXG5cXG5cXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFxcXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanNcXFwiKTtcXG5cXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cXG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cXG4gICAgICByZXR1cm47XFxuICAgIH1cXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXFxuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xcbiAgICApO1xcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcXG4gICAgdGhyb3cgZXJyO1xcbiAgfTtcXG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XFxuICBmdW5jdGlvbiBnZXRTaGltKCkge1xcbiAgICByZXR1cm4gc2hpbTtcXG4gIH07XFxuICAvLyBJbXBvcnRhbnQhXFxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcXG4gICAgYXJyYXk6IHNoaW0sXFxuICAgIGJvb2w6IHNoaW0sXFxuICAgIGZ1bmM6IHNoaW0sXFxuICAgIG51bWJlcjogc2hpbSxcXG4gICAgb2JqZWN0OiBzaGltLFxcbiAgICBzdHJpbmc6IHNoaW0sXFxuICAgIHN5bWJvbDogc2hpbSxcXG5cXG4gICAgYW55OiBzaGltLFxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxcbiAgICBlbGVtZW50OiBzaGltLFxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcXG4gICAgbm9kZTogc2hpbSxcXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXFxuICAgIG9uZU9mOiBnZXRTaGltLFxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXFxuICAgIHNoYXBlOiBnZXRTaGltLFxcbiAgICBleGFjdDogZ2V0U2hpbSxcXG5cXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXFxuICB9O1xcblxcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XFxuXFxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XFxufTtcXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDNCeWIzQXRkSGx3WlhNdlptRmpkRzl5ZVZkcGRHaFVhSEp2ZDJsdVoxTm9hVzF6TG1wekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dlFHUmxjbWwyTDJGalkyOTFiblF2TGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwzQnliM0F0ZEhsd1pYTXZabUZqZEc5eWVWZHBkR2hVYUhKdmQybHVaMU5vYVcxekxtcHpQMlJqTURjaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xWEc0Z0tpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UTXRjSEpsYzJWdWRDd2dSbUZqWldKdmIyc3NJRWx1WXk1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnYkdsalpXNXpaU0JtYjNWdVpDQnBiaUIwYUdWY2JpQXFJRXhKUTBWT1UwVWdabWxzWlNCcGJpQjBhR1VnY205dmRDQmthWEpsWTNSdmNua2diMllnZEdocGN5QnpiM1Z5WTJVZ2RISmxaUzVjYmlBcUwxeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCU1pXRmpkRkJ5YjNCVWVYQmxjMU5sWTNKbGRDQTlJSEpsY1hWcGNtVW9KeTR2YkdsaUwxSmxZV04wVUhKdmNGUjVjR1Z6VTJWamNtVjBKeWs3WEc1Y2JtWjFibU4wYVc5dUlHVnRjSFI1Um5WdVkzUnBiMjRvS1NCN2ZWeHVablZ1WTNScGIyNGdaVzF3ZEhsR2RXNWpkR2x2YmxkcGRHaFNaWE5sZENncElIdDlYRzVsYlhCMGVVWjFibU4wYVc5dVYybDBhRkpsYzJWMExuSmxjMlYwVjJGeWJtbHVaME5oWTJobElEMGdaVzF3ZEhsR2RXNWpkR2x2Ymp0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ1puVnVZM1JwYjI0Z2MyaHBiU2h3Y205d2N5d2djSEp2Y0U1aGJXVXNJR052YlhCdmJtVnVkRTVoYldVc0lHeHZZMkYwYVc5dUxDQndjbTl3Um5Wc2JFNWhiV1VzSUhObFkzSmxkQ2tnZTF4dUlDQWdJR2xtSUNoelpXTnlaWFFnUFQwOUlGSmxZV04wVUhKdmNGUjVjR1Z6VTJWamNtVjBLU0I3WEc0Z0lDQWdJQ0F2THlCSmRDQnBjeUJ6ZEdsc2JDQnpZV1psSUhkb1pXNGdZMkZzYkdWa0lHWnliMjBnVW1WaFkzUXVYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCbGNuSWdQU0J1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FuUTJGc2JHbHVaeUJRY205d1ZIbHdaWE1nZG1Gc2FXUmhkRzl5Y3lCa2FYSmxZM1JzZVNCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSUdKNUlIUm9aU0JnY0hKdmNDMTBlWEJsYzJBZ2NHRmphMkZuWlM0Z0p5QXJYRzRnSUNBZ0lDQW5WWE5sSUZCeWIzQlVlWEJsY3k1amFHVmphMUJ5YjNCVWVYQmxjeWdwSUhSdklHTmhiR3dnZEdobGJTNGdKeUFyWEc0Z0lDQWdJQ0FuVW1WaFpDQnRiM0psSUdGMElHaDBkSEE2THk5bVlpNXRaUzkxYzJVdFkyaGxZMnN0Y0hKdmNDMTBlWEJsY3lkY2JpQWdJQ0FwTzF4dUlDQWdJR1Z5Y2k1dVlXMWxJRDBnSjBsdWRtRnlhV0Z1ZENCV2FXOXNZWFJwYjI0bk8xeHVJQ0FnSUhSb2NtOTNJR1Z5Y2p0Y2JpQWdmVHRjYmlBZ2MyaHBiUzVwYzFKbGNYVnBjbVZrSUQwZ2MyaHBiVHRjYmlBZ1puVnVZM1JwYjI0Z1oyVjBVMmhwYlNncElIdGNiaUFnSUNCeVpYUjFjbTRnYzJocGJUdGNiaUFnZlR0Y2JpQWdMeThnU1cxd2IzSjBZVzUwSVZ4dUlDQXZMeUJMWldWd0lIUm9hWE1nYkdsemRDQnBiaUJ6ZVc1aklIZHBkR2dnY0hKdlpIVmpkR2x2YmlCMlpYSnphVzl1SUdsdUlHQXVMMlpoWTNSdmNubFhhWFJvVkhsd1pVTm9aV05yWlhKekxtcHpZQzVjYmlBZ2RtRnlJRkpsWVdOMFVISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lHRnljbUY1T2lCemFHbHRMRnh1SUNBZ0lHSnZiMnc2SUhOb2FXMHNYRzRnSUNBZ1puVnVZem9nYzJocGJTeGNiaUFnSUNCdWRXMWlaWEk2SUhOb2FXMHNYRzRnSUNBZ2IySnFaV04wT2lCemFHbHRMRnh1SUNBZ0lITjBjbWx1WnpvZ2MyaHBiU3hjYmlBZ0lDQnplVzFpYjJ3NklITm9hVzBzWEc1Y2JpQWdJQ0JoYm5rNklITm9hVzBzWEc0Z0lDQWdZWEp5WVhsUFpqb2daMlYwVTJocGJTeGNiaUFnSUNCbGJHVnRaVzUwT2lCemFHbHRMRnh1SUNBZ0lHVnNaVzFsYm5SVWVYQmxPaUJ6YUdsdExGeHVJQ0FnSUdsdWMzUmhibU5sVDJZNklHZGxkRk5vYVcwc1hHNGdJQ0FnYm05a1pUb2djMmhwYlN4Y2JpQWdJQ0J2WW1wbFkzUlBaam9nWjJWMFUyaHBiU3hjYmlBZ0lDQnZibVZQWmpvZ1oyVjBVMmhwYlN4Y2JpQWdJQ0J2Ym1WUFpsUjVjR1U2SUdkbGRGTm9hVzBzWEc0Z0lDQWdjMmhoY0dVNklHZGxkRk5vYVcwc1hHNGdJQ0FnWlhoaFkzUTZJR2RsZEZOb2FXMHNYRzVjYmlBZ0lDQmphR1ZqYTFCeWIzQlVlWEJsY3pvZ1pXMXdkSGxHZFc1amRHbHZibGRwZEdoU1pYTmxkQ3hjYmlBZ0lDQnlaWE5sZEZkaGNtNXBibWREWVdOb1pUb2daVzF3ZEhsR2RXNWpkR2x2Ymx4dUlDQjlPMXh1WEc0Z0lGSmxZV04wVUhKdmNGUjVjR1Z6TGxCeWIzQlVlWEJsY3lBOUlGSmxZV04wVUhKdmNGUjVjR1Z6TzF4dVhHNGdJSEpsZEhWeWJpQlNaV0ZqZEZCeWIzQlVlWEJsY3p0Y2JuMDdYRzRpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCI6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbmV2YWwoXCIvKipcXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cXG4gKlxcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cXG4gKi9cXG5cXG5pZiAoZmFsc2UpIHsgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MsIFJlYWN0SXM7IH0gZWxzZSB7XFxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxcbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxcbiAgbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFxcXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanNcXFwiKSgpO1xcbn1cXG4vLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDNCeWIzQXRkSGx3WlhNdmFXNWtaWGd1YW5NdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QVpHVnlhWFl2WVdOamIzVnVkQzh1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdmNISnZjQzEwZVhCbGN5OXBibVJsZUM1cWN6ODNNR1EwSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0F5TURFekxYQnlaWE5sYm5Rc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1RVbFVJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVYRzRnS2k5Y2JseHVhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0FuY0hKdlpIVmpkR2x2YmljcElIdGNiaUFnZG1GeUlGSmxZV04wU1hNZ1BTQnlaWEYxYVhKbEtDZHlaV0ZqZEMxcGN5Y3BPMXh1WEc0Z0lDOHZJRUo1SUdWNGNHeHBZMmwwYkhrZ2RYTnBibWNnWUhCeWIzQXRkSGx3WlhOZ0lIbHZkU0JoY21VZ2IzQjBhVzVuSUdsdWRHOGdibVYzSUdSbGRtVnNiM0J0Wlc1MElHSmxhR0YyYVc5eUxseHVJQ0F2THlCb2RIUndPaTh2Wm1JdWJXVXZjSEp2Y0MxMGVYQmxjeTFwYmkxd2NtOWtYRzRnSUhaaGNpQjBhSEp2ZDA5dVJHbHlaV04wUVdOalpYTnpJRDBnZEhKMVpUdGNiaUFnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDJaaFkzUnZjbmxYYVhSb1ZIbHdaVU5vWldOclpYSnpKeWtvVW1WaFkzUkpjeTVwYzBWc1pXMWxiblFzSUhSb2NtOTNUMjVFYVhKbFkzUkJZMk5sYzNNcE8xeHVmU0JsYkhObElIdGNiaUFnTHk4Z1Fua2daWGh3YkdsamFYUnNlU0IxYzJsdVp5QmdjSEp2Y0MxMGVYQmxjMkFnZVc5MUlHRnlaU0J2Y0hScGJtY2dhVzUwYnlCdVpYY2djSEp2WkhWamRHbHZiaUJpWldoaGRtbHZjaTVjYmlBZ0x5OGdhSFIwY0RvdkwyWmlMbTFsTDNCeWIzQXRkSGx3WlhNdGFXNHRjSEp2WkZ4dUlDQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZabUZqZEc5eWVWZHBkR2hVYUhKdmQybHVaMU5vYVcxekp5a29LVHRjYm4xY2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5SRUZQUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcXG5cIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qc1wiOlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5ldmFsKFwiLyoqXFxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXFxuICpcXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXFxuICovXFxuXFxuXFxuXFxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcXG5cXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMM0J5YjNBdGRIbHdaWE12YkdsaUwxSmxZV04wVUhKdmNGUjVjR1Z6VTJWamNtVjBMbXB6TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2UUdSbGNtbDJMMkZqWTI5MWJuUXZMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDNCeWIzQXRkSGx3WlhNdmJHbGlMMUpsWVdOMFVISnZjRlI1Y0dWelUyVmpjbVYwTG1welAyRmtPRE1pWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRNdGNISmxjMlZ1ZEN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlFeEpRMFZPVTBVZ1ptbHNaU0JwYmlCMGFHVWdjbTl2ZENCa2FYSmxZM1J2Y25rZ2IyWWdkR2hwY3lCemIzVnlZMlVnZEhKbFpTNWNiaUFxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJTWldGamRGQnliM0JVZVhCbGMxTmxZM0psZENBOUlDZFRSVU5TUlZSZlJFOWZUazlVWDFCQlUxTmZWRWhKVTE5UFVsOVpUMVZmVjBsTVRGOUNSVjlHU1ZKRlJDYzdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFkzUlFjbTl3Vkhsd1pYTlRaV055WlhRN1hHNGlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHNpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qc1xcblwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiQGRlcml2L2NvbXBvbmVudHNcIjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19kZXJpdl9jb21wb25lbnRzX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIkBkZXJpdi9zaGFyZWRcIjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19kZXJpdl9zaGFyZWRfXztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiQGRlcml2L3RyYW5zbGF0aW9uc1wiOlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX2Rlcml2X3RyYW5zbGF0aW9uc19fO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJyZWFjdFwiOlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfXztcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gXHR9KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuLyoqKioqKi8gXHRcdFx0XHQoKSA9PiAobW9kdWxlKTtcbi8qKioqKiovIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gc3RhcnR1cFxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgY2FuJ3QgYmUgaW5saW5lZCBiZWNhdXNlIHRoZSBldmFsLXNvdXJjZS1tYXAgZGV2dG9vbCBpcyB1c2VkLlxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL0NvbXBvbmVudHMvZmlsZS11cGxvYWRlci1jb250YWluZXIvaW5kZXguanNcIik7XG4vKioqKioqLyBcdF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfZXhwb3J0c19fLmRlZmF1bHQ7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbi8qKioqKiovIH0pKClcbjtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../account/dist/account/js/file-uploader-container.js\n");

/***/ }),

/***/ "../../account/dist/account/js/form-sub-header.js":
/*!********************************************************!*\
  !*** ../../account/dist/account/js/form-sub-header.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/form-sub-header/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ form_sub_header)\\n});\\n\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n;// CONCATENATED MODULE: ./Components/form-sub-header/form-sub-header.jsx\\n\\n\\n\\nvar FormSubHeader = function FormSubHeader(_ref) {\\n  var title = _ref.title,\\n      subtitle = _ref.subtitle,\\n      description = _ref.description;\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: classnames_default()('account-form__header', {\\n      'account-form__header--has-description': !!description\\n    })\\n  }, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-form__header-section\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    as: \\\"h1\\\",\\n    color: \\\"prominent\\\",\\n    weight: \\\"bold\\\",\\n    size: \\\"xs\\\",\\n    className: \\\"account-form__title\\\"\\n  }, title), subtitle && /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    as: \\\"h2\\\",\\n    size: \\\"xxxs\\\",\\n    color: \\\"prominent\\\",\\n    className: \\\"account-form__subtitle\\\"\\n  }, subtitle))), description && /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    as: \\\"p\\\",\\n    className: \\\"account-form__description\\\"\\n  }, description));\\n};\\n;// CONCATENATED MODULE: ./Components/form-sub-header/index.js\\n\\n/* harmony default export */ const form_sub_header = (FormSubHeader);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL2Zvcm0tc3ViLWhlYWRlci9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9mb3JtLXN1Yi1oZWFkZXIvZm9ybS1zdWItaGVhZGVyLmpzeD81ZjdjIiwid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9mb3JtLXN1Yi1oZWFkZXIvaW5kZXguanM/YWNjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnQGRlcml2L2NvbXBvbmVudHMnO1xuXG5leHBvcnQgY29uc3QgRm9ybVN1YkhlYWRlciA9ICh7IHRpdGxlLCBzdWJ0aXRsZSwgZGVzY3JpcHRpb24gfSkgPT4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdhY2NvdW50LWZvcm1fX2hlYWRlcicsIHtcbiAgICAgICAgICAgICAgICAnYWNjb3VudC1mb3JtX19oZWFkZXItLWhhcy1kZXNjcmlwdGlvbic6ICEhZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FjY291bnQtZm9ybV9faGVhZGVyLXNlY3Rpb24nPlxuICAgICAgICAgICAgICAgIDxUZXh0IGFzPSdoMScgY29sb3I9J3Byb21pbmVudCcgd2VpZ2h0PSdib2xkJyBzaXplPSd4cycgY2xhc3NOYW1lPSdhY2NvdW50LWZvcm1fX3RpdGxlJz5cbiAgICAgICAgICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICB7c3VidGl0bGUgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8VGV4dCBhcz0naDInIHNpemU9J3h4eHMnIGNvbG9yPSdwcm9taW5lbnQnIGNsYXNzTmFtZT0nYWNjb3VudC1mb3JtX19zdWJ0aXRsZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICB7c3VidGl0bGV9XG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7ZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPFRleHQgYXM9J3AnIGNsYXNzTmFtZT0nYWNjb3VudC1mb3JtX19kZXNjcmlwdGlvbic+XG4gICAgICAgICAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICApfVxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4pO1xuIiwiaW1wb3J0IHsgRm9ybVN1YkhlYWRlciB9IGZyb20gJy4vZm9ybS1zdWItaGVhZGVyLmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1TdWJIZWFkZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBREE7QUFEQTtBQUtBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBT0E7QUFBQTtBQUFBO0FBbkJBOztBQ0pBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./Components/form-sub-header/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/classnames/index.js\":\n/***/ ((module, exports) => {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n  Copyright (c) 2017 Jed Watson.\\n  Licensed under the MIT License (MIT), see\\n  http://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\n\\tfunction classNames () {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg) && arg.length) {\\n\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcz8zZGNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTcgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdGlmIChpbm5lcikge1xuXHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQSxVQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_10338__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_10338__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_10338__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_10338__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_10338__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_10338__.o(definition, key) && !__nested_webpack_require_10338__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_10338__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_10338__(\"./Components/form-sub-header/index.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/form-sub-header.js\n");

/***/ })

}]);
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["trader~trader_dist_trader_js_trader_js_4e59f282"],{

/***/ "../../trader/dist/trader/js/trader.js":
/*!*********************************************!*\
  !*** ../../trader/dist/trader/js/trader.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/account/dist/account/css/reset-trading-password-modal.css */ \"../../account/dist/account/css/reset-trading-password-modal.css\"), __webpack_require__(/*! @deriv/account/dist/account/js/file-uploader-container */ \"../../account/dist/account/js/file-uploader-container.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/form-sub-header */ \"../../account/dist/account/js/form-sub-header.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/poa-expired */ \"../../account/dist/account/js/poa-expired.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/poa-needs-review */ \"../../account/dist/account/js/poa-needs-review.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/poa-status-codes */ \"../../account/dist/account/js/poa-status-codes.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/poa-submitted */ \"../../account/dist/account/js/poa-submitted.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/poa-unverified */ \"../../account/dist/account/js/poa-unverified.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/poa-verified */ \"../../account/dist/account/js/poa-verified.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/proof-of-identity-container */ \"../../account/dist/account/js/proof-of-identity-container.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/reset-trading-password-modal */ \"../../account/dist/account/js/reset-trading-password-modal.js\"), __webpack_require__(/*! @deriv/account/dist/account/js/sent-email-modal */ \"../../account/dist/account/js/sent-email-modal.js\"), __webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/deriv-charts */ \"../../../node_modules/@deriv/deriv-charts/dist/smartcharts.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/lib/mobx.module.js\"), __webpack_require__(/*! mobx-react */ \"../../../node_modules/mobx-react/dist/mobxreact.esm.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"), __webpack_require__(/*! react-dom */ \"../../../node_modules/react-dom/index.js\"), __webpack_require__(/*! react-router */ \"../../../node_modules/react-router/esm/react-router.js\"), __webpack_require__(/*! react-router-dom */ \"../../../node_modules/react-router-dom/esm/react-router-dom.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_css_reset_trading_password_modal_css__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_file_uploader_container__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_form_sub_header__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_expired__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_needs_review__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_status_codes__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_submitted__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_unverified__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_verified__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_proof_of_identity_container__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_reset_trading_password_modal__, __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_sent_email_modal__, __WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_deriv_charts__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_mobx_react__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__, __WEBPACK_EXTERNAL_MODULE_react_router__, __WEBPACK_EXTERNAL_MODULE_react_router_dom__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"../../../node_modules/event-source-polyfill/src/eventsource.js\":\n/*!**********************************************************************!*\\\n  !*** ../../../node_modules/event-source-polyfill/src/eventsource.js ***!\n  \\**********************************************************************/\n/***/ (function(module, exports) {\n\neval(\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** @license\\r\\n * eventsource.js\\r\\n * Available under MIT License (MIT)\\r\\n * https://github.com/Yaffle/EventSource/\\r\\n */\\r\\n\\r\\n/*jslint indent: 2, vars: true, plusplus: true */\\r\\n/*global setTimeout, clearTimeout */\\r\\n\\r\\n(function (global) {\\r\\n  \\\"use strict\\\";\\r\\n\\r\\n  var setTimeout = global.setTimeout;\\r\\n  var clearTimeout = global.clearTimeout;\\r\\n  var XMLHttpRequest = global.XMLHttpRequest;\\r\\n  var XDomainRequest = global.XDomainRequest;\\r\\n  var ActiveXObject = global.ActiveXObject;\\r\\n  var NativeEventSource = global.EventSource;\\r\\n\\r\\n  var document = global.document;\\r\\n  var Promise = global.Promise;\\r\\n  var fetch = global.fetch;\\r\\n  var Response = global.Response;\\r\\n  var TextDecoder = global.TextDecoder;\\r\\n  var TextEncoder = global.TextEncoder;\\r\\n  var AbortController = global.AbortController;\\r\\n\\r\\n  if (typeof window !== \\\"undefined\\\" && !(\\\"readyState\\\" in document) && document.body == null) { // Firefox 2\\r\\n    document.readyState = \\\"loading\\\";\\r\\n    window.addEventListener(\\\"load\\\", function (event) {\\r\\n      document.readyState = \\\"complete\\\";\\r\\n    }, false);\\r\\n  }\\r\\n\\r\\n  if (XMLHttpRequest == null && ActiveXObject != null) { // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest_in_IE6\\r\\n    XMLHttpRequest = function () {\\r\\n      return new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\r\\n    };\\r\\n  }\\r\\n\\r\\n  if (Object.create == undefined) {\\r\\n    Object.create = function (C) {\\r\\n      function F(){}\\r\\n      F.prototype = C;\\r\\n      return new F();\\r\\n    };\\r\\n  }\\r\\n\\r\\n  if (!Date.now) {\\r\\n    Date.now = function now() {\\r\\n      return new Date().getTime();\\r\\n    };\\r\\n  }\\r\\n\\r\\n  // see #118 (Promise#finally with polyfilled Promise)\\r\\n  // see #123 (data URLs crash Edge)\\r\\n  // see #125 (CSP violations)\\r\\n  // see pull/#138\\r\\n  // => No way to polyfill Promise#finally\\r\\n\\r\\n  if (AbortController == undefined) {\\r\\n    var originalFetch2 = fetch;\\r\\n    fetch = function (url, options) {\\r\\n      var signal = options.signal;\\r\\n      return originalFetch2(url, {headers: options.headers, credentials: options.credentials, cache: options.cache}).then(function (response) {\\r\\n        var reader = response.body.getReader();\\r\\n        signal._reader = reader;\\r\\n        if (signal._aborted) {\\r\\n          signal._reader.cancel();\\r\\n        }\\r\\n        return {\\r\\n          status: response.status,\\r\\n          statusText: response.statusText,\\r\\n          headers: response.headers,\\r\\n          body: {\\r\\n            getReader: function () {\\r\\n              return reader;\\r\\n            }\\r\\n          }\\r\\n        };\\r\\n      });\\r\\n    };\\r\\n    AbortController = function () {\\r\\n      this.signal = {\\r\\n        _reader: null,\\r\\n        _aborted: false\\r\\n      };\\r\\n      this.abort = function () {\\r\\n        if (this.signal._reader != null) {\\r\\n          this.signal._reader.cancel();\\r\\n        }\\r\\n        this.signal._aborted = true;\\r\\n      };\\r\\n    };\\r\\n  }\\r\\n\\r\\n  function TextDecoderPolyfill() {\\r\\n    this.bitsNeeded = 0;\\r\\n    this.codePoint = 0;\\r\\n  }\\r\\n\\r\\n  TextDecoderPolyfill.prototype.decode = function (octets) {\\r\\n    function valid(codePoint, shift, octetsCount) {\\r\\n      if (octetsCount === 1) {\\r\\n        return codePoint >= 0x0080 >> shift && codePoint << shift <= 0x07FF;\\r\\n      }\\r\\n      if (octetsCount === 2) {\\r\\n        return codePoint >= 0x0800 >> shift && codePoint << shift <= 0xD7FF || codePoint >= 0xE000 >> shift && codePoint << shift <= 0xFFFF;\\r\\n      }\\r\\n      if (octetsCount === 3) {\\r\\n        return codePoint >= 0x010000 >> shift && codePoint << shift <= 0x10FFFF;\\r\\n      }\\r\\n      throw new Error();\\r\\n    }\\r\\n    function octetsCount(bitsNeeded, codePoint) {\\r\\n      if (bitsNeeded === 6 * 1) {\\r\\n        return codePoint >> 6 > 15 ? 3 : codePoint > 31 ? 2 : 1;\\r\\n      }\\r\\n      if (bitsNeeded === 6 * 2) {\\r\\n        return codePoint > 15 ? 3 : 2;\\r\\n      }\\r\\n      if (bitsNeeded === 6 * 3) {\\r\\n        return 3;\\r\\n      }\\r\\n      throw new Error();\\r\\n    }\\r\\n    var REPLACER = 0xFFFD;\\r\\n    var string = \\\"\\\";\\r\\n    var bitsNeeded = this.bitsNeeded;\\r\\n    var codePoint = this.codePoint;\\r\\n    for (var i = 0; i < octets.length; i += 1) {\\r\\n      var octet = octets[i];\\r\\n      if (bitsNeeded !== 0) {\\r\\n        if (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) {\\r\\n          bitsNeeded = 0;\\r\\n          codePoint = REPLACER;\\r\\n          string += String.fromCharCode(codePoint);\\r\\n        }\\r\\n      }\\r\\n      if (bitsNeeded === 0) {\\r\\n        if (octet >= 0 && octet <= 127) {\\r\\n          bitsNeeded = 0;\\r\\n          codePoint = octet;\\r\\n        } else if (octet >= 192 && octet <= 223) {\\r\\n          bitsNeeded = 6 * 1;\\r\\n          codePoint = octet & 31;\\r\\n        } else if (octet >= 224 && octet <= 239) {\\r\\n          bitsNeeded = 6 * 2;\\r\\n          codePoint = octet & 15;\\r\\n        } else if (octet >= 240 && octet <= 247) {\\r\\n          bitsNeeded = 6 * 3;\\r\\n          codePoint = octet & 7;\\r\\n        } else {\\r\\n          bitsNeeded = 0;\\r\\n          codePoint = REPLACER;\\r\\n        }\\r\\n        if (bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint))) {\\r\\n          bitsNeeded = 0;\\r\\n          codePoint = REPLACER;\\r\\n        }\\r\\n      } else {\\r\\n        bitsNeeded -= 6;\\r\\n        codePoint = codePoint << 6 | octet & 63;\\r\\n      }\\r\\n      if (bitsNeeded === 0) {\\r\\n        if (codePoint <= 0xFFFF) {\\r\\n          string += String.fromCharCode(codePoint);\\r\\n        } else {\\r\\n          string += String.fromCharCode(0xD800 + (codePoint - 0xFFFF - 1 >> 10));\\r\\n          string += String.fromCharCode(0xDC00 + (codePoint - 0xFFFF - 1 & 0x3FF));\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    this.bitsNeeded = bitsNeeded;\\r\\n    this.codePoint = codePoint;\\r\\n    return string;\\r\\n  };\\r\\n\\r\\n  // Firefox < 38 throws an error with stream option\\r\\n  var supportsStreamOption = function () {\\r\\n    try {\\r\\n      return new TextDecoder().decode(new TextEncoder().encode(\\\"test\\\"), {stream: true}) === \\\"test\\\";\\r\\n    } catch (error) {\\r\\n      console.debug(\\\"TextDecoder does not support streaming option. Using polyfill instead: \\\" + error);\\r\\n    }\\r\\n    return false;\\r\\n  };\\r\\n\\r\\n  // IE, Edge\\r\\n  if (TextDecoder == undefined || TextEncoder == undefined || !supportsStreamOption()) {\\r\\n    TextDecoder = TextDecoderPolyfill;\\r\\n  }\\r\\n\\r\\n  var k = function () {\\r\\n  };\\r\\n\\r\\n  function XHRWrapper(xhr) {\\r\\n    this.withCredentials = false;\\r\\n    this.readyState = 0;\\r\\n    this.status = 0;\\r\\n    this.statusText = \\\"\\\";\\r\\n    this.responseText = \\\"\\\";\\r\\n    this.onprogress = k;\\r\\n    this.onload = k;\\r\\n    this.onerror = k;\\r\\n    this.onreadystatechange = k;\\r\\n    this._contentType = \\\"\\\";\\r\\n    this._xhr = xhr;\\r\\n    this._sendTimeout = 0;\\r\\n    this._abort = k;\\r\\n  }\\r\\n\\r\\n  XHRWrapper.prototype.open = function (method, url) {\\r\\n    this._abort(true);\\r\\n\\r\\n    var that = this;\\r\\n    var xhr = this._xhr;\\r\\n    var state = 1;\\r\\n    var timeout = 0;\\r\\n\\r\\n    this._abort = function (silent) {\\r\\n      if (that._sendTimeout !== 0) {\\r\\n        clearTimeout(that._sendTimeout);\\r\\n        that._sendTimeout = 0;\\r\\n      }\\r\\n      if (state === 1 || state === 2 || state === 3) {\\r\\n        state = 4;\\r\\n        xhr.onload = k;\\r\\n        xhr.onerror = k;\\r\\n        xhr.onabort = k;\\r\\n        xhr.onprogress = k;\\r\\n        xhr.onreadystatechange = k;\\r\\n        // IE 8 - 9: XDomainRequest#abort() does not fire any event\\r\\n        // Opera < 10: XMLHttpRequest#abort() does not fire any event\\r\\n        xhr.abort();\\r\\n        if (timeout !== 0) {\\r\\n          clearTimeout(timeout);\\r\\n          timeout = 0;\\r\\n        }\\r\\n        if (!silent) {\\r\\n          that.readyState = 4;\\r\\n          that.onabort(null);\\r\\n          that.onreadystatechange();\\r\\n        }\\r\\n      }\\r\\n      state = 0;\\r\\n    };\\r\\n\\r\\n    var onStart = function () {\\r\\n      if (state === 1) {\\r\\n        //state = 2;\\r\\n        var status = 0;\\r\\n        var statusText = \\\"\\\";\\r\\n        var contentType = undefined;\\r\\n        if (!(\\\"contentType\\\" in xhr)) {\\r\\n          try {\\r\\n            status = xhr.status;\\r\\n            statusText = xhr.statusText;\\r\\n            contentType = xhr.getResponseHeader(\\\"Content-Type\\\");\\r\\n          } catch (error) {\\r\\n            // IE < 10 throws exception for `xhr.status` when xhr.readyState === 2 || xhr.readyState === 3\\r\\n            // Opera < 11 throws exception for `xhr.status` when xhr.readyState === 2\\r\\n            // https://bugs.webkit.org/show_bug.cgi?id=29121\\r\\n            status = 0;\\r\\n            statusText = \\\"\\\";\\r\\n            contentType = undefined;\\r\\n            // Firefox < 14, Chrome ?, Safari ?\\r\\n            // https://bugs.webkit.org/show_bug.cgi?id=29658\\r\\n            // https://bugs.webkit.org/show_bug.cgi?id=77854\\r\\n          }\\r\\n        } else {\\r\\n          status = 200;\\r\\n          statusText = \\\"OK\\\";\\r\\n          contentType = xhr.contentType;\\r\\n        }\\r\\n        if (status !== 0) {\\r\\n          state = 2;\\r\\n          that.readyState = 2;\\r\\n          that.status = status;\\r\\n          that.statusText = statusText;\\r\\n          that._contentType = contentType;\\r\\n          that.onreadystatechange();\\r\\n        }\\r\\n      }\\r\\n    };\\r\\n    var onProgress = function () {\\r\\n      onStart();\\r\\n      if (state === 2 || state === 3) {\\r\\n        state = 3;\\r\\n        var responseText = \\\"\\\";\\r\\n        try {\\r\\n          responseText = xhr.responseText;\\r\\n        } catch (error) {\\r\\n          // IE 8 - 9 with XMLHttpRequest\\r\\n        }\\r\\n        that.readyState = 3;\\r\\n        that.responseText = responseText;\\r\\n        that.onprogress();\\r\\n      }\\r\\n    };\\r\\n    var onFinish = function (type, event) {\\r\\n      if (event == null || event.preventDefault == null) {\\r\\n        event = {\\r\\n          preventDefault: k\\r\\n        };\\r\\n      }\\r\\n      // Firefox 52 fires \\\"readystatechange\\\" (xhr.readyState === 4) without final \\\"readystatechange\\\" (xhr.readyState === 3)\\r\\n      // IE 8 fires \\\"onload\\\" without \\\"onprogress\\\"\\r\\n      onProgress();\\r\\n      if (state === 1 || state === 2 || state === 3) {\\r\\n        state = 4;\\r\\n        if (timeout !== 0) {\\r\\n          clearTimeout(timeout);\\r\\n          timeout = 0;\\r\\n        }\\r\\n        that.readyState = 4;\\r\\n        if (type === \\\"load\\\") {\\r\\n          that.onload(event);\\r\\n        } else if (type === \\\"error\\\") {\\r\\n          that.onerror(event);\\r\\n        } else if (type === \\\"abort\\\") {\\r\\n          that.onabort(event);\\r\\n        } else {\\r\\n          throw new TypeError();\\r\\n        }\\r\\n        that.onreadystatechange();\\r\\n      }\\r\\n    };\\r\\n    var onReadyStateChange = function (event) {\\r\\n      if (xhr != undefined) { // Opera 12\\r\\n        if (xhr.readyState === 4) {\\r\\n          if (!(\\\"onload\\\" in xhr) || !(\\\"onerror\\\" in xhr) || !(\\\"onabort\\\" in xhr)) {\\r\\n            onFinish(xhr.responseText === \\\"\\\" ? \\\"error\\\" : \\\"load\\\", event);\\r\\n          }\\r\\n        } else if (xhr.readyState === 3) {\\r\\n          if (!(\\\"onprogress\\\" in xhr)) { // testing XMLHttpRequest#responseText too many times is too slow in IE 11\\r\\n            // and in Firefox 3.6\\r\\n            onProgress();\\r\\n          }\\r\\n        } else if (xhr.readyState === 2) {\\r\\n          onStart();\\r\\n        }\\r\\n      }\\r\\n    };\\r\\n    var onTimeout = function () {\\r\\n      timeout = setTimeout(function () {\\r\\n        onTimeout();\\r\\n      }, 500);\\r\\n      if (xhr.readyState === 3) {\\r\\n        onProgress();\\r\\n      }\\r\\n    };\\r\\n\\r\\n    // XDomainRequest#abort removes onprogress, onerror, onload\\r\\n    if (\\\"onload\\\" in xhr) {\\r\\n      xhr.onload = function (event) {\\r\\n        onFinish(\\\"load\\\", event);\\r\\n      };\\r\\n    }\\r\\n    if (\\\"onerror\\\" in xhr) {\\r\\n      xhr.onerror = function (event) {\\r\\n        onFinish(\\\"error\\\", event);\\r\\n      };\\r\\n    }\\r\\n    // improper fix to match Firefox behaviour, but it is better than just ignore abort\\r\\n    // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\\r\\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\\r\\n    // https://code.google.com/p/chromium/issues/detail?id=153570\\r\\n    // IE 8 fires \\\"onload\\\" without \\\"onprogress\\r\\n    if (\\\"onabort\\\" in xhr) {\\r\\n      xhr.onabort = function (event) {\\r\\n        onFinish(\\\"abort\\\", event);\\r\\n      };\\r\\n    }\\r\\n\\r\\n    if (\\\"onprogress\\\" in xhr) {\\r\\n      xhr.onprogress = onProgress;\\r\\n    }\\r\\n\\r\\n    // IE 8 - 9 (XMLHTTPRequest)\\r\\n    // Opera < 12\\r\\n    // Firefox < 3.5\\r\\n    // Firefox 3.5 - 3.6 - ? < 9.0\\r\\n    // onprogress is not fired sometimes or delayed\\r\\n    // see also #64 (significant lag in IE 11)\\r\\n    if (\\\"onreadystatechange\\\" in xhr) {\\r\\n      xhr.onreadystatechange = function (event) {\\r\\n        onReadyStateChange(event);\\r\\n      };\\r\\n    }\\r\\n\\r\\n    if (\\\"contentType\\\" in xhr || !(\\\"ontimeout\\\" in XMLHttpRequest.prototype)) {\\r\\n      url += (url.indexOf(\\\"?\\\") === -1 ? \\\"?\\\" : \\\"&\\\") + \\\"padding=true\\\";\\r\\n    }\\r\\n    xhr.open(method, url, true);\\r\\n\\r\\n    if (\\\"readyState\\\" in xhr) {\\r\\n      // workaround for Opera 12 issue with \\\"progress\\\" events\\r\\n      // #91 (XMLHttpRequest onprogress not fired for streaming response in Edge 14-15-?)\\r\\n      timeout = setTimeout(function () {\\r\\n        onTimeout();\\r\\n      }, 0);\\r\\n    }\\r\\n  };\\r\\n  XHRWrapper.prototype.abort = function () {\\r\\n    this._abort(false);\\r\\n  };\\r\\n  XHRWrapper.prototype.getResponseHeader = function (name) {\\r\\n    return this._contentType;\\r\\n  };\\r\\n  XHRWrapper.prototype.setRequestHeader = function (name, value) {\\r\\n    var xhr = this._xhr;\\r\\n    if (\\\"setRequestHeader\\\" in xhr) {\\r\\n      xhr.setRequestHeader(name, value);\\r\\n    }\\r\\n  };\\r\\n  XHRWrapper.prototype.getAllResponseHeaders = function () {\\r\\n    // XMLHttpRequest#getAllResponseHeaders returns null for CORS requests in Firefox 3.6.28\\r\\n    return this._xhr.getAllResponseHeaders != undefined ? this._xhr.getAllResponseHeaders() || \\\"\\\" : \\\"\\\";\\r\\n  };\\r\\n  XHRWrapper.prototype.send = function () {\\r\\n    // loading indicator in Safari < ? (6), Chrome < 14, Firefox\\r\\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\\r\\n    if ((!(\\\"ontimeout\\\" in XMLHttpRequest.prototype) || (!(\\\"sendAsBinary\\\" in XMLHttpRequest.prototype) && !(\\\"mozAnon\\\" in XMLHttpRequest.prototype))) &&\\r\\n        document != undefined &&\\r\\n        document.readyState != undefined &&\\r\\n        document.readyState !== \\\"complete\\\") {\\r\\n      var that = this;\\r\\n      that._sendTimeout = setTimeout(function () {\\r\\n        that._sendTimeout = 0;\\r\\n        that.send();\\r\\n      }, 4);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    var xhr = this._xhr;\\r\\n    // withCredentials should be set after \\\"open\\\" for Safari and Chrome (< 19 ?)\\r\\n    if (\\\"withCredentials\\\" in xhr) {\\r\\n      xhr.withCredentials = this.withCredentials;\\r\\n    }\\r\\n    try {\\r\\n      // xhr.send(); throws \\\"Not enough arguments\\\" in Firefox 3.0\\r\\n      xhr.send(undefined);\\r\\n    } catch (error1) {\\r\\n      // Safari 5.1.7, Opera 12\\r\\n      throw error1;\\r\\n    }\\r\\n  };\\r\\n\\r\\n  function toLowerCase(name) {\\r\\n    return name.replace(/[A-Z]/g, function (c) {\\r\\n      return String.fromCharCode(c.charCodeAt(0) + 0x20);\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function HeadersPolyfill(all) {\\r\\n    // Get headers: implemented according to mozilla's example code: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#Example\\r\\n    var map = Object.create(null);\\r\\n    var array = all.split(\\\"\\\\r\\\\n\\\");\\r\\n    for (var i = 0; i < array.length; i += 1) {\\r\\n      var line = array[i];\\r\\n      var parts = line.split(\\\": \\\");\\r\\n      var name = parts.shift();\\r\\n      var value = parts.join(\\\": \\\");\\r\\n      map[toLowerCase(name)] = value;\\r\\n    }\\r\\n    this._map = map;\\r\\n  }\\r\\n  HeadersPolyfill.prototype.get = function (name) {\\r\\n    return this._map[toLowerCase(name)];\\r\\n  };\\r\\n\\r\\n  if (XMLHttpRequest != null && XMLHttpRequest.HEADERS_RECEIVED == null) { // IE < 9, Firefox 3.6\\r\\n    XMLHttpRequest.HEADERS_RECEIVED = 2;\\r\\n  }\\r\\n\\r\\n  function XHRTransport() {\\r\\n  }\\r\\n\\r\\n  XHRTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\\r\\n    xhr.open(\\\"GET\\\", url);\\r\\n    var offset = 0;\\r\\n    xhr.onprogress = function () {\\r\\n      var responseText = xhr.responseText;\\r\\n      var chunk = responseText.slice(offset);\\r\\n      offset += chunk.length;\\r\\n      onProgressCallback(chunk);\\r\\n    };\\r\\n    xhr.onerror = function (event) {\\r\\n      event.preventDefault();\\r\\n      onFinishCallback(new Error(\\\"NetworkError\\\"));\\r\\n    };\\r\\n    xhr.onload = function () {\\r\\n      onFinishCallback(null);\\r\\n    };\\r\\n    xhr.onabort = function () {\\r\\n      onFinishCallback(null);\\r\\n    };\\r\\n    xhr.onreadystatechange = function () {\\r\\n      if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\\r\\n        var status = xhr.status;\\r\\n        var statusText = xhr.statusText;\\r\\n        var contentType = xhr.getResponseHeader(\\\"Content-Type\\\");\\r\\n        var headers = xhr.getAllResponseHeaders();\\r\\n        onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers));\\r\\n      }\\r\\n    };\\r\\n    xhr.withCredentials = withCredentials;\\r\\n    for (var name in headers) {\\r\\n      if (Object.prototype.hasOwnProperty.call(headers, name)) {\\r\\n        xhr.setRequestHeader(name, headers[name]);\\r\\n      }\\r\\n    }\\r\\n    xhr.send();\\r\\n    return xhr;\\r\\n  };\\r\\n\\r\\n  function HeadersWrapper(headers) {\\r\\n    this._headers = headers;\\r\\n  }\\r\\n  HeadersWrapper.prototype.get = function (name) {\\r\\n    return this._headers.get(name);\\r\\n  };\\r\\n\\r\\n  function FetchTransport() {\\r\\n  }\\r\\n\\r\\n  FetchTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\\r\\n    var reader = null;\\r\\n    var controller = new AbortController();\\r\\n    var signal = controller.signal;\\r\\n    var textDecoder = new TextDecoder();\\r\\n    fetch(url, {\\r\\n      headers: headers,\\r\\n      credentials: withCredentials ? \\\"include\\\" : \\\"same-origin\\\",\\r\\n      signal: signal,\\r\\n      cache: \\\"no-store\\\"\\r\\n    }).then(function (response) {\\r\\n      reader = response.body.getReader();\\r\\n      onStartCallback(response.status, response.statusText, response.headers.get(\\\"Content-Type\\\"), new HeadersWrapper(response.headers));\\r\\n      // see https://github.com/promises-aplus/promises-spec/issues/179\\r\\n      return new Promise(function (resolve, reject) {\\r\\n        var readNextChunk = function () {\\r\\n          reader.read().then(function (result) {\\r\\n            if (result.done) {\\r\\n              //Note: bytes in textDecoder are ignored\\r\\n              resolve(undefined);\\r\\n            } else {\\r\\n              var chunk = textDecoder.decode(result.value, {stream: true});\\r\\n              onProgressCallback(chunk);\\r\\n              readNextChunk();\\r\\n            }\\r\\n          })[\\\"catch\\\"](function (error) {\\r\\n            reject(error);\\r\\n          });\\r\\n        };\\r\\n        readNextChunk();\\r\\n      });\\r\\n    })[\\\"catch\\\"](function (error) {\\r\\n      if (error.name === \\\"AbortError\\\") {\\r\\n        return undefined;\\r\\n      } else {\\r\\n        return error;\\r\\n      }\\r\\n    }).then(function (error) {\\r\\n      onFinishCallback(error);\\r\\n    });\\r\\n    return {\\r\\n      abort: function () {\\r\\n        if (reader != null) {\\r\\n          reader.cancel(); // https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\\r\\n        }\\r\\n        controller.abort();\\r\\n      }\\r\\n    };\\r\\n  };\\r\\n\\r\\n  function EventTarget() {\\r\\n    this._listeners = Object.create(null);\\r\\n  }\\r\\n\\r\\n  function throwError(e) {\\r\\n    setTimeout(function () {\\r\\n      throw e;\\r\\n    }, 0);\\r\\n  }\\r\\n\\r\\n  EventTarget.prototype.dispatchEvent = function (event) {\\r\\n    event.target = this;\\r\\n    var typeListeners = this._listeners[event.type];\\r\\n    if (typeListeners != undefined) {\\r\\n      var length = typeListeners.length;\\r\\n      for (var i = 0; i < length; i += 1) {\\r\\n        var listener = typeListeners[i];\\r\\n        try {\\r\\n          if (typeof listener.handleEvent === \\\"function\\\") {\\r\\n            listener.handleEvent(event);\\r\\n          } else {\\r\\n            listener.call(this, event);\\r\\n          }\\r\\n        } catch (e) {\\r\\n          throwError(e);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n  EventTarget.prototype.addEventListener = function (type, listener) {\\r\\n    type = String(type);\\r\\n    var listeners = this._listeners;\\r\\n    var typeListeners = listeners[type];\\r\\n    if (typeListeners == undefined) {\\r\\n      typeListeners = [];\\r\\n      listeners[type] = typeListeners;\\r\\n    }\\r\\n    var found = false;\\r\\n    for (var i = 0; i < typeListeners.length; i += 1) {\\r\\n      if (typeListeners[i] === listener) {\\r\\n        found = true;\\r\\n      }\\r\\n    }\\r\\n    if (!found) {\\r\\n      typeListeners.push(listener);\\r\\n    }\\r\\n  };\\r\\n  EventTarget.prototype.removeEventListener = function (type, listener) {\\r\\n    type = String(type);\\r\\n    var listeners = this._listeners;\\r\\n    var typeListeners = listeners[type];\\r\\n    if (typeListeners != undefined) {\\r\\n      var filtered = [];\\r\\n      for (var i = 0; i < typeListeners.length; i += 1) {\\r\\n        if (typeListeners[i] !== listener) {\\r\\n          filtered.push(typeListeners[i]);\\r\\n        }\\r\\n      }\\r\\n      if (filtered.length === 0) {\\r\\n        delete listeners[type];\\r\\n      } else {\\r\\n        listeners[type] = filtered;\\r\\n      }\\r\\n    }\\r\\n  };\\r\\n\\r\\n  function Event(type) {\\r\\n    this.type = type;\\r\\n    this.target = undefined;\\r\\n  }\\r\\n\\r\\n  function MessageEvent(type, options) {\\r\\n    Event.call(this, type);\\r\\n    this.data = options.data;\\r\\n    this.lastEventId = options.lastEventId;\\r\\n  }\\r\\n\\r\\n  MessageEvent.prototype = Object.create(Event.prototype);\\r\\n\\r\\n  function ConnectionEvent(type, options) {\\r\\n    Event.call(this, type);\\r\\n    this.status = options.status;\\r\\n    this.statusText = options.statusText;\\r\\n    this.headers = options.headers;\\r\\n  }\\r\\n\\r\\n  ConnectionEvent.prototype = Object.create(Event.prototype);\\r\\n\\r\\n  function ErrorEvent(type, options) {\\r\\n    Event.call(this, type);\\r\\n    this.error = options.error;\\r\\n  }\\r\\n\\r\\n  ErrorEvent.prototype = Object.create(Event.prototype);\\r\\n\\r\\n  var WAITING = -1;\\r\\n  var CONNECTING = 0;\\r\\n  var OPEN = 1;\\r\\n  var CLOSED = 2;\\r\\n\\r\\n  var AFTER_CR = -1;\\r\\n  var FIELD_START = 0;\\r\\n  var FIELD = 1;\\r\\n  var VALUE_START = 2;\\r\\n  var VALUE = 3;\\r\\n\\r\\n  var contentTypeRegExp = /^text\\\\/event\\\\-stream(;.*)?$/i;\\r\\n\\r\\n  var MINIMUM_DURATION = 1000;\\r\\n  var MAXIMUM_DURATION = 18000000;\\r\\n\\r\\n  var parseDuration = function (value, def) {\\r\\n    var n = value == null ? def : parseInt(value, 10);\\r\\n    if (n !== n) {\\r\\n      n = def;\\r\\n    }\\r\\n    return clampDuration(n);\\r\\n  };\\r\\n  var clampDuration = function (n) {\\r\\n    return Math.min(Math.max(n, MINIMUM_DURATION), MAXIMUM_DURATION);\\r\\n  };\\r\\n\\r\\n  var fire = function (that, f, event) {\\r\\n    try {\\r\\n      if (typeof f === \\\"function\\\") {\\r\\n        f.call(that, event);\\r\\n      }\\r\\n    } catch (e) {\\r\\n      throwError(e);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  function EventSourcePolyfill(url, options) {\\r\\n    EventTarget.call(this);\\r\\n    options = options || {};\\r\\n\\r\\n    this.onopen = undefined;\\r\\n    this.onmessage = undefined;\\r\\n    this.onerror = undefined;\\r\\n\\r\\n    this.url = undefined;\\r\\n    this.readyState = undefined;\\r\\n    this.withCredentials = undefined;\\r\\n    this.headers = undefined;\\r\\n\\r\\n    this._close = undefined;\\r\\n\\r\\n    start(this, url, options);\\r\\n  }\\r\\n\\r\\n  function getBestXHRTransport() {\\r\\n    return (XMLHttpRequest != undefined && (\\\"withCredentials\\\" in XMLHttpRequest.prototype)) || XDomainRequest == undefined\\r\\n        ? new XMLHttpRequest()\\r\\n        : new XDomainRequest();\\r\\n  }\\r\\n\\r\\n  var isFetchSupported = fetch != undefined && Response != undefined && \\\"body\\\" in Response.prototype;\\r\\n\\r\\n  function start(es, url, options) {\\r\\n    url = String(url);\\r\\n    var withCredentials = Boolean(options.withCredentials);\\r\\n    var lastEventIdQueryParameterName = options.lastEventIdQueryParameterName || \\\"lastEventId\\\";\\r\\n\\r\\n    var initialRetry = clampDuration(1000);\\r\\n    var heartbeatTimeout = parseDuration(options.heartbeatTimeout, 45000);\\r\\n\\r\\n    var lastEventId = \\\"\\\";\\r\\n    var retry = initialRetry;\\r\\n    var wasActivity = false;\\r\\n    var textLength = 0;\\r\\n    var headers = options.headers || {};\\r\\n    var TransportOption = options.Transport;\\r\\n    var xhr = isFetchSupported && TransportOption == undefined ? undefined : new XHRWrapper(TransportOption != undefined ? new TransportOption() : getBestXHRTransport());\\r\\n    var transport = TransportOption != null && typeof TransportOption !== \\\"string\\\" ? new TransportOption() : (xhr == undefined ? new FetchTransport() : new XHRTransport());\\r\\n    var abortController = undefined;\\r\\n    var timeout = 0;\\r\\n    var currentState = WAITING;\\r\\n    var dataBuffer = \\\"\\\";\\r\\n    var lastEventIdBuffer = \\\"\\\";\\r\\n    var eventTypeBuffer = \\\"\\\";\\r\\n\\r\\n    var textBuffer = \\\"\\\";\\r\\n    var state = FIELD_START;\\r\\n    var fieldStart = 0;\\r\\n    var valueStart = 0;\\r\\n\\r\\n    var onStart = function (status, statusText, contentType, headers) {\\r\\n      if (currentState === CONNECTING) {\\r\\n        if (status === 200 && contentType != undefined && contentTypeRegExp.test(contentType)) {\\r\\n          currentState = OPEN;\\r\\n          wasActivity = Date.now();\\r\\n          retry = initialRetry;\\r\\n          es.readyState = OPEN;\\r\\n          var event = new ConnectionEvent(\\\"open\\\", {\\r\\n            status: status,\\r\\n            statusText: statusText,\\r\\n            headers: headers\\r\\n          });\\r\\n          es.dispatchEvent(event);\\r\\n          fire(es, es.onopen, event);\\r\\n        } else {\\r\\n          var message = \\\"\\\";\\r\\n          if (status !== 200) {\\r\\n            if (statusText) {\\r\\n              statusText = statusText.replace(/\\\\s+/g, \\\" \\\");\\r\\n            }\\r\\n            message = \\\"EventSource's response has a status \\\" + status + \\\" \\\" + statusText + \\\" that is not 200. Aborting the connection.\\\";\\r\\n          } else {\\r\\n            message = \\\"EventSource's response has a Content-Type specifying an unsupported type: \\\" + (contentType == undefined ? \\\"-\\\" : contentType.replace(/\\\\s+/g, \\\" \\\")) + \\\". Aborting the connection.\\\";\\r\\n          }\\r\\n          close();\\r\\n          var event = new ConnectionEvent(\\\"error\\\", {\\r\\n            status: status,\\r\\n            statusText: statusText,\\r\\n            headers: headers\\r\\n          });\\r\\n          es.dispatchEvent(event);\\r\\n          fire(es, es.onerror, event);\\r\\n          console.error(message);\\r\\n        }\\r\\n      }\\r\\n    };\\r\\n\\r\\n    var onProgress = function (textChunk) {\\r\\n      if (currentState === OPEN) {\\r\\n        var n = -1;\\r\\n        for (var i = 0; i < textChunk.length; i += 1) {\\r\\n          var c = textChunk.charCodeAt(i);\\r\\n          if (c === \\\"\\\\n\\\".charCodeAt(0) || c === \\\"\\\\r\\\".charCodeAt(0)) {\\r\\n            n = i;\\r\\n          }\\r\\n        }\\r\\n        var chunk = (n !== -1 ? textBuffer : \\\"\\\") + textChunk.slice(0, n + 1);\\r\\n        textBuffer = (n === -1 ? textBuffer : \\\"\\\") + textChunk.slice(n + 1);\\r\\n        if (textChunk !== \\\"\\\") {\\r\\n          wasActivity = Date.now();\\r\\n          textLength += textChunk.length;\\r\\n        }\\r\\n        for (var position = 0; position < chunk.length; position += 1) {\\r\\n          var c = chunk.charCodeAt(position);\\r\\n          if (state === AFTER_CR && c === \\\"\\\\n\\\".charCodeAt(0)) {\\r\\n            state = FIELD_START;\\r\\n          } else {\\r\\n            if (state === AFTER_CR) {\\r\\n              state = FIELD_START;\\r\\n            }\\r\\n            if (c === \\\"\\\\r\\\".charCodeAt(0) || c === \\\"\\\\n\\\".charCodeAt(0)) {\\r\\n              if (state !== FIELD_START) {\\r\\n                if (state === FIELD) {\\r\\n                  valueStart = position + 1;\\r\\n                }\\r\\n                var field = chunk.slice(fieldStart, valueStart - 1);\\r\\n                var value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === \\\" \\\".charCodeAt(0) ? 1 : 0), position);\\r\\n                if (field === \\\"data\\\") {\\r\\n                  dataBuffer += \\\"\\\\n\\\";\\r\\n                  dataBuffer += value;\\r\\n                } else if (field === \\\"id\\\") {\\r\\n                  lastEventIdBuffer = value;\\r\\n                } else if (field === \\\"event\\\") {\\r\\n                  eventTypeBuffer = value;\\r\\n                } else if (field === \\\"retry\\\") {\\r\\n                  initialRetry = parseDuration(value, initialRetry);\\r\\n                  retry = initialRetry;\\r\\n                } else if (field === \\\"heartbeatTimeout\\\") {\\r\\n                  heartbeatTimeout = parseDuration(value, heartbeatTimeout);\\r\\n                  if (timeout !== 0) {\\r\\n                    clearTimeout(timeout);\\r\\n                    timeout = setTimeout(function () {\\r\\n                      onTimeout();\\r\\n                    }, heartbeatTimeout);\\r\\n                  }\\r\\n                }\\r\\n              }\\r\\n              if (state === FIELD_START) {\\r\\n                if (dataBuffer !== \\\"\\\") {\\r\\n                  lastEventId = lastEventIdBuffer;\\r\\n                  if (eventTypeBuffer === \\\"\\\") {\\r\\n                    eventTypeBuffer = \\\"message\\\";\\r\\n                  }\\r\\n                  var event = new MessageEvent(eventTypeBuffer, {\\r\\n                    data: dataBuffer.slice(1),\\r\\n                    lastEventId: lastEventIdBuffer\\r\\n                  });\\r\\n                  es.dispatchEvent(event);\\r\\n                  if (eventTypeBuffer === \\\"open\\\") {\\r\\n                    fire(es, es.onopen, event);\\r\\n                  } else if (eventTypeBuffer === \\\"message\\\") {\\r\\n                    fire(es, es.onmessage, event);\\r\\n                  } else if (eventTypeBuffer === \\\"error\\\") {\\r\\n                    fire(es, es.onerror, event);\\r\\n                  }\\r\\n                  if (currentState === CLOSED) {\\r\\n                    return;\\r\\n                  }\\r\\n                }\\r\\n                dataBuffer = \\\"\\\";\\r\\n                eventTypeBuffer = \\\"\\\";\\r\\n              }\\r\\n              state = c === \\\"\\\\r\\\".charCodeAt(0) ? AFTER_CR : FIELD_START;\\r\\n            } else {\\r\\n              if (state === FIELD_START) {\\r\\n                fieldStart = position;\\r\\n                state = FIELD;\\r\\n              }\\r\\n              if (state === FIELD) {\\r\\n                if (c === \\\":\\\".charCodeAt(0)) {\\r\\n                  valueStart = position + 1;\\r\\n                  state = VALUE_START;\\r\\n                }\\r\\n              } else if (state === VALUE_START) {\\r\\n                state = VALUE;\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    };\\r\\n\\r\\n    var onFinish = function (error) {\\r\\n      if (currentState === OPEN || currentState === CONNECTING) {\\r\\n        currentState = WAITING;\\r\\n        if (timeout !== 0) {\\r\\n          clearTimeout(timeout);\\r\\n          timeout = 0;\\r\\n        }\\r\\n        timeout = setTimeout(function () {\\r\\n          onTimeout();\\r\\n        }, retry);\\r\\n        retry = clampDuration(Math.min(initialRetry * 16, retry * 2));\\r\\n\\r\\n        es.readyState = CONNECTING;\\r\\n        var event = new ErrorEvent(\\\"error\\\", {error: error});\\r\\n        es.dispatchEvent(event);\\r\\n        fire(es, es.onerror, event);\\r\\n        if (error != undefined) {\\r\\n          console.error(error);\\r\\n        }\\r\\n      }\\r\\n    };\\r\\n\\r\\n    var close = function () {\\r\\n      currentState = CLOSED;\\r\\n      if (abortController != undefined) {\\r\\n        abortController.abort();\\r\\n        abortController = undefined;\\r\\n      }\\r\\n      if (timeout !== 0) {\\r\\n        clearTimeout(timeout);\\r\\n        timeout = 0;\\r\\n      }\\r\\n      es.readyState = CLOSED;\\r\\n    };\\r\\n\\r\\n    var onTimeout = function () {\\r\\n      timeout = 0;\\r\\n\\r\\n      if (currentState !== WAITING) {\\r\\n        if (!wasActivity && abortController != undefined) {\\r\\n          onFinish(new Error(\\\"No activity within \\\" + heartbeatTimeout + \\\" milliseconds.\\\" + \\\" \\\" + (currentState === CONNECTING ? \\\"No response received.\\\" : textLength + \\\" chars received.\\\") + \\\" \\\" + \\\"Reconnecting.\\\"));\\r\\n          if (abortController != undefined) {\\r\\n            abortController.abort();\\r\\n            abortController = undefined;\\r\\n          }\\r\\n        } else {\\r\\n          var nextHeartbeat = Math.max((wasActivity || Date.now()) + heartbeatTimeout - Date.now(), 1);\\r\\n          wasActivity = false;\\r\\n          timeout = setTimeout(function () {\\r\\n            onTimeout();\\r\\n          }, nextHeartbeat);\\r\\n        }\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      wasActivity = false;\\r\\n      textLength = 0;\\r\\n      timeout = setTimeout(function () {\\r\\n        onTimeout();\\r\\n      }, heartbeatTimeout);\\r\\n\\r\\n      currentState = CONNECTING;\\r\\n      dataBuffer = \\\"\\\";\\r\\n      eventTypeBuffer = \\\"\\\";\\r\\n      lastEventIdBuffer = lastEventId;\\r\\n      textBuffer = \\\"\\\";\\r\\n      fieldStart = 0;\\r\\n      valueStart = 0;\\r\\n      state = FIELD_START;\\r\\n\\r\\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\\r\\n      // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\\r\\n      var requestURL = url;\\r\\n      if (url.slice(0, 5) !== \\\"data:\\\" && url.slice(0, 5) !== \\\"blob:\\\") {\\r\\n        if (lastEventId !== \\\"\\\") {\\r\\n          requestURL += (url.indexOf(\\\"?\\\") === -1 ? \\\"?\\\" : \\\"&\\\") + lastEventIdQueryParameterName +\\\"=\\\" + encodeURIComponent(lastEventId);\\r\\n        }\\r\\n      }\\r\\n      var withCredentials = es.withCredentials;\\r\\n      var requestHeaders = {};\\r\\n      requestHeaders[\\\"Accept\\\"] = \\\"text/event-stream\\\";\\r\\n      var headers = es.headers;\\r\\n      if (headers != undefined) {\\r\\n        for (var name in headers) {\\r\\n          if (Object.prototype.hasOwnProperty.call(headers, name)) {\\r\\n            requestHeaders[name] = headers[name];\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      try {\\r\\n        abortController = transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials, requestHeaders);\\r\\n      } catch (error) {\\r\\n        close();\\r\\n        throw error;\\r\\n      }\\r\\n    };\\r\\n\\r\\n    es.url = url;\\r\\n    es.readyState = CONNECTING;\\r\\n    es.withCredentials = withCredentials;\\r\\n    es.headers = headers;\\r\\n    es._close = close;\\r\\n\\r\\n    onTimeout();\\r\\n  }\\r\\n\\r\\n  EventSourcePolyfill.prototype = Object.create(EventTarget.prototype);\\r\\n  EventSourcePolyfill.prototype.CONNECTING = CONNECTING;\\r\\n  EventSourcePolyfill.prototype.OPEN = OPEN;\\r\\n  EventSourcePolyfill.prototype.CLOSED = CLOSED;\\r\\n  EventSourcePolyfill.prototype.close = function () {\\r\\n    this._close();\\r\\n  };\\r\\n\\r\\n  EventSourcePolyfill.CONNECTING = CONNECTING;\\r\\n  EventSourcePolyfill.OPEN = OPEN;\\r\\n  EventSourcePolyfill.CLOSED = CLOSED;\\r\\n  EventSourcePolyfill.prototype.withCredentials = undefined;\\r\\n\\r\\n  var R = NativeEventSource\\r\\n  if (XMLHttpRequest != undefined && (NativeEventSource == undefined || !(\\\"withCredentials\\\" in NativeEventSource.prototype))) {\\r\\n    // Why replace a native EventSource ?\\r\\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=444328\\r\\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=831392\\r\\n    // https://code.google.com/p/chromium/issues/detail?id=260144\\r\\n    // https://code.google.com/p/chromium/issues/detail?id=225654\\r\\n    // ...\\r\\n    R = EventSourcePolyfill;\\r\\n  }\\r\\n\\r\\n  (function (factory) {\\r\\n    if ( true && typeof module.exports === \\\"object\\\") {\\r\\n      var v = factory(exports);\\r\\n      if (v !== undefined) module.exports = v;\\r\\n    }\\r\\n    else if (true) {\\r\\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\r\\n    }\\r\\n    else {}\\r\\n  })(function (exports) {\\r\\n    exports.EventSourcePolyfill = EventSourcePolyfill;\\r\\n    exports.NativeEventSource = NativeEventSource;\\r\\n    exports.EventSource = R;\\r\\n  });\\r\\n}(typeof globalThis === 'undefined' ? (typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : this) : globalThis));\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///../../../node_modules/event-source-polyfill/src/eventsource.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/promise-polyfill/src/allSettled.js\":\n/*!****************************************************************!*\\\n  !*** ../../../node_modules/promise-polyfill/src/allSettled.js ***!\n  \\****************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\nfunction allSettled(arr) {\\n  var P = this;\\n  return new P(function(resolve, reject) {\\n    if (!(arr && typeof arr.length !== 'undefined')) {\\n      return reject(\\n        new TypeError(\\n          typeof arr +\\n            ' ' +\\n            arr +\\n            ' is not iterable(cannot read property Symbol(Symbol.iterator))'\\n        )\\n      );\\n    }\\n    var args = Array.prototype.slice.call(arr);\\n    if (args.length === 0) return resolve([]);\\n    var remaining = args.length;\\n\\n    function res(i, val) {\\n      if (val && (typeof val === 'object' || typeof val === 'function')) {\\n        var then = val.then;\\n        if (typeof then === 'function') {\\n          then.call(\\n            val,\\n            function(val) {\\n              res(i, val);\\n            },\\n            function(e) {\\n              args[i] = { status: 'rejected', reason: e };\\n              if (--remaining === 0) {\\n                resolve(args);\\n              }\\n            }\\n          );\\n          return;\\n        }\\n      }\\n      args[i] = { status: 'fulfilled', value: val };\\n      if (--remaining === 0) {\\n        resolve(args);\\n      }\\n    }\\n\\n    for (var i = 0; i < args.length; i++) {\\n      res(i, args[i]);\\n    }\\n  });\\n}\\n\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (allSettled);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb21pc2UtcG9seWZpbGwvc3JjL2FsbFNldHRsZWQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvdHJhZGVyLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9taXNlLXBvbHlmaWxsL3NyYy9hbGxTZXR0bGVkLmpzPzIyMDQiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYWxsU2V0dGxlZChhcnIpIHtcbiAgdmFyIFAgPSB0aGlzO1xuICByZXR1cm4gbmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKCEoYXJyICYmIHR5cGVvZiBhcnIubGVuZ3RoICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgIHJldHVybiByZWplY3QoXG4gICAgICAgIG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgdHlwZW9mIGFyciArXG4gICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgYXJyICtcbiAgICAgICAgICAgICcgaXMgbm90IGl0ZXJhYmxlKGNhbm5vdCByZWFkIHByb3BlcnR5IFN5bWJvbChTeW1ib2wuaXRlcmF0b3IpKSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgIHZhciByZW1haW5pbmcgPSBhcmdzLmxlbmd0aDtcblxuICAgIGZ1bmN0aW9uIHJlcyhpLCB2YWwpIHtcbiAgICAgIGlmICh2YWwgJiYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHZhciB0aGVuID0gdmFsLnRoZW47XG4gICAgICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoZW4uY2FsbChcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICByZXMoaSwgdmFsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIGFyZ3NbaV0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBlIH07XG4gICAgICAgICAgICAgIGlmICgtLXJlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXJnc1tpXSA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbCB9O1xuICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXMoaSwgYXJnc1tpXSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWxsU2V0dGxlZDtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/promise-polyfill/src/allSettled.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/promise-polyfill/src/finally.js\":\n/*!*************************************************************!*\\\n  !*** ../../../node_modules/promise-polyfill/src/finally.js ***!\n  \\*************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/**\\n * @this {Promise}\\n */\\nfunction finallyConstructor(callback) {\\n  var constructor = this.constructor;\\n  return this.then(\\n    function(value) {\\n      // @ts-ignore\\n      return constructor.resolve(callback()).then(function() {\\n        return value;\\n      });\\n    },\\n    function(reason) {\\n      // @ts-ignore\\n      return constructor.resolve(callback()).then(function() {\\n        // @ts-ignore\\n        return constructor.reject(reason);\\n      });\\n    }\\n  );\\n}\\n\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (finallyConstructor);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb21pc2UtcG9seWZpbGwvc3JjL2ZpbmFsbHkuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvdHJhZGVyLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9taXNlLXBvbHlmaWxsL3NyYy9maW5hbGx5LmpzPzQxM2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdGhpcyB7UHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gZmluYWxseUNvbnN0cnVjdG9yKGNhbGxiYWNrKSB7XG4gIHZhciBjb25zdHJ1Y3RvciA9IHRoaXMuY29uc3RydWN0b3I7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmluYWxseUNvbnN0cnVjdG9yO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/promise-polyfill/src/finally.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/promise-polyfill/src/index.js\":\n/*!***********************************************************!*\\\n  !*** ../../../node_modules/promise-polyfill/src/index.js ***!\n  \\***********************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var _finally__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./finally */ \\\"../../../node_modules/promise-polyfill/src/finally.js\\\");\\n/* harmony import */ var _allSettled__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./allSettled */ \\\"../../../node_modules/promise-polyfill/src/allSettled.js\\\");\\n\\n\\n\\n// Store setTimeout reference so promise-polyfill will be unaffected by\\n// other code modifying setTimeout (like sinon.useFakeTimers())\\nvar setTimeoutFunc = setTimeout;\\n\\nfunction isArray(x) {\\n  return Boolean(x && typeof x.length !== 'undefined');\\n}\\n\\nfunction noop() {}\\n\\n// Polyfill for Function.prototype.bind\\nfunction bind(fn, thisArg) {\\n  return function() {\\n    fn.apply(thisArg, arguments);\\n  };\\n}\\n\\n/**\\n * @constructor\\n * @param {Function} fn\\n */\\nfunction Promise(fn) {\\n  if (!(this instanceof Promise))\\n    throw new TypeError('Promises must be constructed via new');\\n  if (typeof fn !== 'function') throw new TypeError('not a function');\\n  /** @type {!number} */\\n  this._state = 0;\\n  /** @type {!boolean} */\\n  this._handled = false;\\n  /** @type {Promise|undefined} */\\n  this._value = undefined;\\n  /** @type {!Array<!Function>} */\\n  this._deferreds = [];\\n\\n  doResolve(fn, this);\\n}\\n\\nfunction handle(self, deferred) {\\n  while (self._state === 3) {\\n    self = self._value;\\n  }\\n  if (self._state === 0) {\\n    self._deferreds.push(deferred);\\n    return;\\n  }\\n  self._handled = true;\\n  Promise._immediateFn(function() {\\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\\n    if (cb === null) {\\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\\n      return;\\n    }\\n    var ret;\\n    try {\\n      ret = cb(self._value);\\n    } catch (e) {\\n      reject(deferred.promise, e);\\n      return;\\n    }\\n    resolve(deferred.promise, ret);\\n  });\\n}\\n\\nfunction resolve(self, newValue) {\\n  try {\\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\\n    if (newValue === self)\\n      throw new TypeError('A promise cannot be resolved with itself.');\\n    if (\\n      newValue &&\\n      (typeof newValue === 'object' || typeof newValue === 'function')\\n    ) {\\n      var then = newValue.then;\\n      if (newValue instanceof Promise) {\\n        self._state = 3;\\n        self._value = newValue;\\n        finale(self);\\n        return;\\n      } else if (typeof then === 'function') {\\n        doResolve(bind(then, newValue), self);\\n        return;\\n      }\\n    }\\n    self._state = 1;\\n    self._value = newValue;\\n    finale(self);\\n  } catch (e) {\\n    reject(self, e);\\n  }\\n}\\n\\nfunction reject(self, newValue) {\\n  self._state = 2;\\n  self._value = newValue;\\n  finale(self);\\n}\\n\\nfunction finale(self) {\\n  if (self._state === 2 && self._deferreds.length === 0) {\\n    Promise._immediateFn(function() {\\n      if (!self._handled) {\\n        Promise._unhandledRejectionFn(self._value);\\n      }\\n    });\\n  }\\n\\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\\n    handle(self, self._deferreds[i]);\\n  }\\n  self._deferreds = null;\\n}\\n\\n/**\\n * @constructor\\n */\\nfunction Handler(onFulfilled, onRejected, promise) {\\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\\n  this.promise = promise;\\n}\\n\\n/**\\n * Take a potentially misbehaving resolver function and make sure\\n * onFulfilled and onRejected are only called once.\\n *\\n * Makes no guarantees about asynchrony.\\n */\\nfunction doResolve(fn, self) {\\n  var done = false;\\n  try {\\n    fn(\\n      function(value) {\\n        if (done) return;\\n        done = true;\\n        resolve(self, value);\\n      },\\n      function(reason) {\\n        if (done) return;\\n        done = true;\\n        reject(self, reason);\\n      }\\n    );\\n  } catch (ex) {\\n    if (done) return;\\n    done = true;\\n    reject(self, ex);\\n  }\\n}\\n\\nPromise.prototype['catch'] = function(onRejected) {\\n  return this.then(null, onRejected);\\n};\\n\\nPromise.prototype.then = function(onFulfilled, onRejected) {\\n  // @ts-ignore\\n  var prom = new this.constructor(noop);\\n\\n  handle(this, new Handler(onFulfilled, onRejected, prom));\\n  return prom;\\n};\\n\\nPromise.prototype['finally'] = _finally__WEBPACK_IMPORTED_MODULE_0__.default;\\n\\nPromise.all = function(arr) {\\n  return new Promise(function(resolve, reject) {\\n    if (!isArray(arr)) {\\n      return reject(new TypeError('Promise.all accepts an array'));\\n    }\\n\\n    var args = Array.prototype.slice.call(arr);\\n    if (args.length === 0) return resolve([]);\\n    var remaining = args.length;\\n\\n    function res(i, val) {\\n      try {\\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\\n          var then = val.then;\\n          if (typeof then === 'function') {\\n            then.call(\\n              val,\\n              function(val) {\\n                res(i, val);\\n              },\\n              reject\\n            );\\n            return;\\n          }\\n        }\\n        args[i] = val;\\n        if (--remaining === 0) {\\n          resolve(args);\\n        }\\n      } catch (ex) {\\n        reject(ex);\\n      }\\n    }\\n\\n    for (var i = 0; i < args.length; i++) {\\n      res(i, args[i]);\\n    }\\n  });\\n};\\n\\nPromise.allSettled = _allSettled__WEBPACK_IMPORTED_MODULE_1__.default;\\n\\nPromise.resolve = function(value) {\\n  if (value && typeof value === 'object' && value.constructor === Promise) {\\n    return value;\\n  }\\n\\n  return new Promise(function(resolve) {\\n    resolve(value);\\n  });\\n};\\n\\nPromise.reject = function(value) {\\n  return new Promise(function(resolve, reject) {\\n    reject(value);\\n  });\\n};\\n\\nPromise.race = function(arr) {\\n  return new Promise(function(resolve, reject) {\\n    if (!isArray(arr)) {\\n      return reject(new TypeError('Promise.race accepts an array'));\\n    }\\n\\n    for (var i = 0, len = arr.length; i < len; i++) {\\n      Promise.resolve(arr[i]).then(resolve, reject);\\n    }\\n  });\\n};\\n\\n// Use polyfill for setImmediate for performance gains\\nPromise._immediateFn =\\n  // @ts-ignore\\n  (typeof setImmediate === 'function' &&\\n    function(fn) {\\n      // @ts-ignore\\n      setImmediate(fn);\\n    }) ||\\n  function(fn) {\\n    setTimeoutFunc(fn, 0);\\n  };\\n\\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\\n  if (typeof console !== 'undefined' && console) {\\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\\n  }\\n};\\n\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Promise);\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///../../../node_modules/promise-polyfill/src/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./index.js\":\n/*!******************!*\\\n  !*** ./index.js ***!\n  \\******************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var promise_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! promise-polyfill */ \\\"../../../node_modules/promise-polyfill/src/index.js\\\");\\n/* harmony import */ var event_source_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! event-source-polyfill */ \\\"../../../node_modules/event-source-polyfill/src/eventsource.js\\\");\\n/* harmony import */ var event_source_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(event_source_polyfill__WEBPACK_IMPORTED_MODULE_1__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @deriv/shared */ \\\"@deriv/shared\\\");\\n/* harmony import */ var _deriv_shared__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_deriv_shared__WEBPACK_IMPORTED_MODULE_3__);\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @deriv/components */ \\\"@deriv/components\\\");\\n/* harmony import */ var _deriv_components__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_deriv_components__WEBPACK_IMPORTED_MODULE_4__);\\n// import 'babel-polyfill';\\n\\n\\n\\n\\n\\nvar App = (0,_deriv_shared__WEBPACK_IMPORTED_MODULE_3__.makeLazyLoader)(function () {\\n  return Promise.all(/*! import() | trader-app */[__webpack_require__.e(\\\"vendors-node_modules_classnames_index_js-node_modules_extend_index_js-node_modules_lodash_deb-c9ff82\\\"), __webpack_require__.e(\\\"trader-app\\\")]).then(__webpack_require__.bind(__webpack_require__, /*! App/app.jsx */ \\\"./App/app.jsx\\\"));\\n}, function () {\\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_2__.createElement(_deriv_components__WEBPACK_IMPORTED_MODULE_4__.Loading, null);\\n})();\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi90cmFkZXIvLi9pbmRleC5qcz80MWY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xuaW1wb3J0ICdwcm9taXNlLXBvbHlmaWxsJztcblxuaW1wb3J0ICdldmVudC1zb3VyY2UtcG9seWZpbGwnO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWFrZUxhenlMb2FkZXIgfSBmcm9tICdAZGVyaXYvc2hhcmVkJztcbmltcG9ydCB7IExvYWRpbmcgfSBmcm9tICdAZGVyaXYvY29tcG9uZW50cyc7XG5cbmNvbnN0IEFwcCA9IG1ha2VMYXp5TG9hZGVyKFxuICAgICgpID0+IGltcG9ydCgvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcInRyYWRlci1hcHBcIiwgd2VicGFja1ByZWxvYWQ6IHRydWUgKi8gJ0FwcC9hcHAuanN4JyksXG4gICAgKCkgPT4gPExvYWRpbmcgLz5cbikoKTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQSw4U0FBQTtBQUFBO0FBQ0E7QUFBQTtBQUdBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./index.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/css/reset-trading-password-modal.css\":\n/*!***********************************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/css/reset-trading-password-modal.css\" ***!\n  \\***********************************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_css_reset_trading_password_modal_css__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/file-uploader-container\":\n/*!*************************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/file-uploader-container\" ***!\n  \\*************************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_file_uploader_container__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/form-sub-header\":\n/*!*****************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/form-sub-header\" ***!\n  \\*****************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_form_sub_header__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/poa-expired\":\n/*!*************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/poa-expired\" ***!\n  \\*************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_expired__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/poa-needs-review\":\n/*!******************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/poa-needs-review\" ***!\n  \\******************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_needs_review__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/poa-status-codes\":\n/*!******************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/poa-status-codes\" ***!\n  \\******************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_status_codes__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/poa-submitted\":\n/*!***************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/poa-submitted\" ***!\n  \\***************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_submitted__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/poa-unverified\":\n/*!****************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/poa-unverified\" ***!\n  \\****************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_unverified__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/poa-verified\":\n/*!**************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/poa-verified\" ***!\n  \\**************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_poa_verified__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/proof-of-identity-container\":\n/*!*****************************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/proof-of-identity-container\" ***!\n  \\*****************************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_proof_of_identity_container__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/reset-trading-password-modal\":\n/*!******************************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/reset-trading-password-modal\" ***!\n  \\******************************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_reset_trading_password_modal__;\n\n/***/ }),\n\n/***/ \"@deriv/account/dist/account/js/sent-email-modal\":\n/*!******************************************************************!*\\\n  !*** external \"@deriv/account/dist/account/js/sent-email-modal\" ***!\n  \\******************************************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_sent_email_modal__;\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/*!************************************!*\\\n  !*** external \"@deriv/components\" ***!\n  \\************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/deriv-charts\":\n/*!**************************************!*\\\n  !*** external \"@deriv/deriv-charts\" ***!\n  \\**************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_deriv_charts__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/*!********************************!*\\\n  !*** external \"@deriv/shared\" ***!\n  \\********************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/*!**************************************!*\\\n  !*** external \"@deriv/translations\" ***!\n  \\**************************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"mobx\":\n/*!***********************!*\\\n  !*** external \"mobx\" ***!\n  \\***********************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;\n\n/***/ }),\n\n/***/ \"mobx-react\":\n/*!*****************************!*\\\n  !*** external \"mobx-react\" ***!\n  \\*****************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx_react__;\n\n/***/ }),\n\n/***/ \"react\":\n/*!************************!*\\\n  !*** external \"react\" ***!\n  \\************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ }),\n\n/***/ \"react-dom\":\n/*!****************************!*\\\n  !*** external \"react-dom\" ***!\n  \\****************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;\n\n/***/ }),\n\n/***/ \"react-router\":\n/*!*******************************!*\\\n  !*** external \"react-router\" ***!\n  \\*******************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router__;\n\n/***/ }),\n\n/***/ \"react-router-dom\":\n/*!***********************************!*\\\n  !*** external \"react-router-dom\" ***!\n  \\***********************************/\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_router_dom__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_135848__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_135848__);\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_135848__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/chunk prefetch function */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_135848__.F = {};\n/******/ \t\t__nested_webpack_require_135848__.E = (chunkId) => {\n/******/ \t\t\tObject.keys(__nested_webpack_require_135848__.F).map((key) => {\n/******/ \t\t\t\t__nested_webpack_require_135848__.F[key](chunkId);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_135848__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_135848__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it's Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__nested_webpack_require_135848__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === 'object' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === 'function') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__nested_webpack_require_135848__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach(key => def[key] = () => value[key]);\n/******/ \t\t\t}\n/******/ \t\t\tdef['default'] = () => value;\n/******/ \t\t\t__nested_webpack_require_135848__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_135848__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_135848__.o(definition, key) && !__nested_webpack_require_135848__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_135848__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_135848__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_135848__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_135848__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_135848__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"trader/js/trader.\" + chunkId + \".\" + {\"vendors-node_modules_classnames_index_js-node_modules_extend_index_js-node_modules_lodash_deb-c9ff82\":\"328e2af5bb025f3fd045\",\"trader-app\":\"1336d6ddbc37b4eed738\",\"trade-modals\":\"7fea16926dd365d037c8\",\"error-component\":\"82cb227571aafb3ef745\",\"contract\":\"b79771c8d96754850515\",\"vendors-node_modules_formik_dist_formik_esm_js\":\"3ec1e4b2a609d1778d36\",\"cfd\":\"c3dcbf890663909f60f6\",\"reports\":\"74882767a70c8c439568\",\"Modules_Trading_Components_Form_TradeParams_Multiplier_expiration_jsx-Modules_Trading_Compone-90e657\":\"f585fecb44f438efe3dd\",\"screen-small\":\"17be59acb13e346d0326\",\"screen-large\":\"76ab4cd0c6623ff44db1\",\"settings-chart\":\"c3b029283e524868acd4\",\"two-month-picker\":\"82fb1089e45862d80f9e\"}[chunkId] + \".js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_135848__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"trader/css/trader.\" + chunkId + \".\" + {\"trader-app\":\"ce0a03308e453c00b2f1\",\"cfd\":\"c761ce2fdc8c0e7ea86b\",\"reports\":\"2f64aea3be3f6a16988d\",\"screen-small\":\"595e66a4b584ab577670\"}[chunkId] + \".css\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_135848__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_135848__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"@deriv/trader:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_135848__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_135848__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_135848__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\t;\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_135848__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_135848__.nmd = (module) => {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_135848__.p = \"/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/css loading */\n/******/ \t(() => {\n/******/ \t\tvar createStylesheet = (chunkId, fullhref, resolve, reject) => {\n/******/ \t\t\tvar linkTag = document.createElement(\"link\");\n/******/ \t\t\n/******/ \t\t\tlinkTag.rel = \"stylesheet\";\n/******/ \t\t\tlinkTag.type = \"text/css\";\n/******/ \t\t\tvar onLinkComplete = (event) => {\n/******/ \t\t\t\t// avoid mem leaks.\n/******/ \t\t\t\tlinkTag.onerror = linkTag.onload = null;\n/******/ \t\t\t\tif (event.type === 'load') {\n/******/ \t\t\t\t\tresolve();\n/******/ \t\t\t\t} else {\n/******/ \t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n/******/ \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n/******/ \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n/******/ \t\t\t\t\terr.type = errorType;\n/******/ \t\t\t\t\terr.request = realHref;\n/******/ \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n/******/ \t\t\t\t\treject(err);\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n/******/ \t\t\tlinkTag.href = fullhref;\n/******/ \t\t\n/******/ \t\t\tdocument.head.appendChild(linkTag);\n/******/ \t\t\treturn linkTag;\n/******/ \t\t};\n/******/ \t\tvar findStylesheet = (href, fullhref) => {\n/******/ \t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n/******/ \t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingLinkTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n/******/ \t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n/******/ \t\t\t}\n/******/ \t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n/******/ \t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingStyleTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n/******/ \t\t\t\tif(dataHref === href || dataHref === fullhref) return tag;\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\tvar loadStylesheet = (chunkId) => {\n/******/ \t\t\treturn new Promise((resolve, reject) => {\n/******/ \t\t\t\tvar href = __nested_webpack_require_135848__.miniCssF(chunkId);\n/******/ \t\t\t\tvar fullhref = __nested_webpack_require_135848__.p + href;\n/******/ \t\t\t\tif(findStylesheet(href, fullhref)) return resolve();\n/******/ \t\t\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t\t// object to store loaded CSS chunks\n/******/ \t\tvar installedCssChunks = {\n/******/ \t\t\t\"trader\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_135848__.f.miniCss = (chunkId, promises) => {\n/******/ \t\t\tvar cssChunks = {\"trader-app\":1,\"cfd\":1,\"reports\":1,\"screen-small\":1};\n/******/ \t\t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n/******/ \t\t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n/******/ \t\t\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(() => {\n/******/ \t\t\t\t\tinstalledCssChunks[chunkId] = 0;\n/******/ \t\t\t\t}, (e) => {\n/******/ \t\t\t\t\tdelete installedCssChunks[chunkId];\n/******/ \t\t\t\t\tthrow e;\n/******/ \t\t\t\t}));\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no hmr\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// Promise = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t\"trader\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_135848__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_135848__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => {\n/******/ \t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n/******/ \t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_135848__.p + __nested_webpack_require_135848__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_135848__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_135848__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t} else {}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_135848__.F.j = (chunkId) => {\n/******/ \t\t\tif((!__nested_webpack_require_135848__.o(installedChunks, chunkId) || installedChunks[chunkId] === undefined) && true) {\n/******/ \t\t\t\tinstalledChunks[chunkId] = null;\n/******/ \t\t\t\tvar link = document.createElement('link');\n/******/ \t\t\n/******/ \t\t\t\tif (__nested_webpack_require_135848__.nc) {\n/******/ \t\t\t\t\tlink.setAttribute(\"nonce\", __nested_webpack_require_135848__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tlink.rel = \"prefetch\";\n/******/ \t\t\t\tlink.as = \"script\";\n/******/ \t\t\t\tlink.href = __nested_webpack_require_135848__.p + __nested_webpack_require_135848__.u(chunkId);\n/******/ \t\t\t\tdocument.head.appendChild(link);\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no deferred startup\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0, resolves = [];\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_135848__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tresolves.push(installedChunks[chunkId][0]);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t\t}\n/******/ \t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\tif(__nested_webpack_require_135848__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t__nested_webpack_require_135848__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(runtime) runtime(__nested_webpack_require_135848__);\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\twhile(resolves.length) {\n/******/ \t\t\t\tresolves.shift()();\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_deriv_trader\"] = self[\"webpackChunk_deriv_trader\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t\t\n/******/ \t\t// no deferred startup\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/chunk prefetch trigger */\n/******/ \t(() => {\n/******/ \t\tvar chunkToChildrenMap = {\n/******/ \t\t\t\"trader-app\": [\n/******/ \t\t\t\t\"vendors-node_modules_formik_dist_formik_esm_js\",\n/******/ \t\t\t\t\"cfd\",\n/******/ \t\t\t\t\"trade-modals\",\n/******/ \t\t\t\t\"settings-chart\"\n/******/ \t\t\t]\n/******/ \t\t};\n/******/ \t\t__nested_webpack_require_135848__.f.prefetch = (chunkId, promises) => {\n/******/ \t\t\tPromise.all(promises).then(() => {\n/******/ \t\t\t\tvar chunks = chunkToChildrenMap[chunkId];\n/******/ \t\t\t\tfor (var i = 0; Array.isArray(chunks) && i < chunks.length; i++) {\n/******/ \t\t\t\t\t__nested_webpack_require_135848__.E(chunks[i]);\n/******/ \t\t\t\t}\n/******/ \t\t\t});\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// module factories are used so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_135848__(\"./index.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../trader/dist/trader/js/trader.js\n");

/***/ })

}]);